(setglobal Targetint!
  (let
    (size =[int] (field 8 (global Stdlib__sys!))
     Int32 =
       (module-defn(Int32) utils/targetint.ml(68):2389-2959
         (let
           (include =a
              (let (let = (global Stdlib__int32!)) (global Stdlib__int32!))
            zero =a (field 0 include)
            one =a (field 1 include)
            minus_one =a (field 2 include)
            unsigned_div =a (field 3 include)
            unsigned_rem =a (field 4 include)
            succ =a (field 5 include)
            pred =a (field 6 include)
            abs =a (field 7 include)
            max_int =a (field 8 include)
            min_int =a (field 9 include)
            lognot =a (field 10 include)
            unsigned_to_int =a (field 11 include)
            of_string_opt =a (field 12 include)
            to_string =a (field 13 include)
            compare =a (field 14 include)
            unsigned_compare =a (field 15 include)
            equal =a (field 16 include)
            of_int_exn =
              (let (*match* = (field 8 (global Stdlib__sys!)))
                (if (!= *match* 32)
                  (if (!= *match* 64)
                    (before utils/targetint.ml(81):2767-2779
                      (raise
                        (after utils/targetint.ml(81):2767-2779
                          (makeblock 0 (global Assert_failure!)
                            [0: "utils/targetint.ml" 81 8]))))
                    (before utils/targetint.ml(75):2548-2747
                      (function n[int] : int32
                        (funct-body utils/targetint.ml(75):2548-2747
                          (before utils/targetint.ml(76):2567-2747
                            (if
                              (||
                                (< n
                                  (Int32.to_int
                                    (field 9 (global Stdlib__int32!))))
                                (> n
                                  (Int32.to_int
                                    (field 8 (global Stdlib__int32!)))))
                              (before utils/targetint.ml(77):2644-2705
                                (after utils/targetint.ml(77):2644-2705
                                  (apply (field 1 (global Misc!))
                                    [0:
                                     [11:
                                      "Targetint.of_int_exn: 0x"
                                      [4: 6a 0a 0a [11: " out of range" 0a]]]
                                     "Targetint.of_int_exn: 0x%x out of range"]
                                    n)))
                              (before utils/targetint.ml(79):2733-2747
                                (Int32.of_int n))))))))
                  (before utils/targetint.ml(73):2515-2527
                    (function prim stub (Int32.of_int prim)))))
            of_int32 =
              (function x
                (funct-body utils/targetint.ml(82)<ghost>:2795-2800
                  (before utils/targetint.ml(82):2799-2800 x)))
            to_int32 =
              (function x
                (funct-body utils/targetint.ml(83)<ghost>:2816-2821
                  (before utils/targetint.ml(83):2820-2821 x)))
            of_int64 = (function prim stub (int32_of_int64 prim))
            to_int64 = (function prim stub (int64_of_int32 prim))
            repr =
              (function x[int32]
                (funct-body utils/targetint.ml(86)<ghost>:2897-2908
                  (before utils/targetint.ml(86):2901-2908
                    (makeblock 0 (int32) x))))
            print =
              (function ppf t[int32]
                (funct-body utils/targetint.ml(87)<ghost>:2921-2955
                  (before utils/targetint.ml(87):2929-2955
                    (after utils/targetint.ml(87):2929-2955
                      (apply (field 122 (global Stdlib__format!)) ppf
                        [0: [5: 0a 0a 0a 0a] "%ld"] t))))))
           (pseudo utils/targetint.ml(68):2404-2959
             (makeblock 0 zero one minus_one unsigned_div unsigned_rem succ
               pred abs max_int min_int lognot unsigned_to_int of_string_opt
               to_string compare unsigned_compare equal of_int_exn of_int32
               to_int32 of_int64 to_int64 repr print))))
     Int64 =
       (module-defn(Int64) utils/targetint.ml(90):2961-3146
         (let
           (include =a
              (let (let = (global Stdlib__int64!)) (global Stdlib__int64!))
            zero =a (field 0 include)
            one =a (field 1 include)
            minus_one =a (field 2 include)
            unsigned_div =a (field 3 include)
            unsigned_rem =a (field 4 include)
            succ =a (field 5 include)
            pred =a (field 6 include)
            abs =a (field 7 include)
            max_int =a (field 8 include)
            min_int =a (field 9 include)
            lognot =a (field 10 include)
            unsigned_to_int =a (field 11 include)
            of_string_opt =a (field 12 include)
            to_string =a (field 13 include)
            compare =a (field 14 include)
            unsigned_compare =a (field 15 include)
            equal =a (field 16 include)
            of_int_exn = (function prim stub (Int64.of_int prim))
            of_int64 =
              (function x
                (funct-body utils/targetint.ml(93)<ghost>:3046-3051
                  (before utils/targetint.ml(93):3050-3051 x)))
            to_int64 =
              (function x
                (funct-body utils/targetint.ml(94)<ghost>:3067-3072
                  (before utils/targetint.ml(94):3071-3072 x)))
            repr =
              (function x[int64]
                (funct-body utils/targetint.ml(95)<ghost>:3084-3095
                  (before utils/targetint.ml(95):3088-3095
                    (makeblock 1 (int64) x))))
            print =
              (function ppf t[int64]
                (funct-body utils/targetint.ml(96)<ghost>:3108-3142
                  (before utils/targetint.ml(96):3116-3142
                    (after utils/targetint.ml(96):3116-3142
                      (apply (field 122 (global Stdlib__format!)) ppf
                        [0: [7: 0a 0a 0a 0a] "%Ld"] t))))))
           (pseudo utils/targetint.ml(90):2976-3146
             (makeblock 0 zero one minus_one unsigned_div unsigned_rem succ
               pred abs max_int min_int lognot unsigned_to_int of_string_opt
               to_string compare unsigned_compare equal of_int_exn of_int64
               to_int64 repr print))))
     include =
       (if (!= size 32)
         (if (!= size 64)
           (before utils/targetint.ml(103):3274-3286
             (raise
               (after utils/targetint.ml(103):3274-3286
                 (makeblock 0 (global Assert_failure!)
                   [0: "utils/targetint.ml" 103 18]))))
           (before utils/targetint.ml(102):3241-3255
             (makeblock 0 (field 0 Int64) (field 1 Int64) (field 2 Int64)
               (function prim stub (Int64.neg prim))
               (function prim prim stub (Int64.add prim prim))
               (function prim prim stub (Int64.sub prim prim))
               (function prim prim stub (Int64.mul prim prim))
               (function prim prim stub (Int64.div prim prim))
               (field 3 Int64)
               (function prim prim stub (Int64.mod prim prim))
               (field 4 Int64) (field 5 Int64) (field 6 Int64)
               (field 7 Int64) (field 8 Int64) (field 9 Int64)
               (function prim prim stub (Int64.and prim prim))
               (function prim prim stub (Int64.or prim prim))
               (function prim prim stub (Int64.xor prim prim))
               (field 10 Int64)
               (function prim prim stub (Int64.lsl prim prim))
               (function prim prim stub (Int64.asr prim prim))
               (function prim prim stub (Int64.lsr prim prim))
               (function prim stub (Int64.of_int prim)) (field 17 Int64)
               (function prim stub (Int64.to_int prim))
               (function prim stub (caml_int64_of_float prim))
               (function prim stub (caml_int64_to_float prim))
               (function prim stub (int64_of_int32 prim))
               (function prim stub (int32_of_int64 prim)) (field 18 Int64)
               (field 19 Int64)
               (function prim stub (caml_int64_of_string prim))
               (field 13 Int64) (field 14 Int64) (field 15 Int64)
               (field 16 Int64) (field 20 Int64) (field 21 Int64))))
         (before utils/targetint.ml(101):3207-3221
           (makeblock 0 (field 0 Int32) (field 1 Int32) (field 2 Int32)
             (function prim stub (Int32.neg prim))
             (function prim prim stub (Int32.add prim prim))
             (function prim prim stub (Int32.sub prim prim))
             (function prim prim stub (Int32.mul prim prim))
             (function prim prim stub (Int32.div prim prim)) (field 3 Int32)
             (function prim prim stub (Int32.mod prim prim)) (field 4 Int32)
             (field 5 Int32) (field 6 Int32) (field 7 Int32) (field 8 Int32)
             (field 9 Int32) (function prim prim stub (Int32.and prim prim))
             (function prim prim stub (Int32.or prim prim))
             (function prim prim stub (Int32.xor prim prim)) (field 10 Int32)
             (function prim prim stub (Int32.lsl prim prim))
             (function prim prim stub (Int32.asr prim prim))
             (function prim prim stub (Int32.lsr prim prim))
             (function prim stub (Int32.of_int prim)) (field 17 Int32)
             (function prim stub (Int32.to_int prim))
             (function prim stub (caml_int32_of_float prim))
             (function prim stub (caml_int32_to_float prim)) (field 18 Int32)
             (field 19 Int32) (field 20 Int32) (field 21 Int32)
             (function prim stub (caml_int32_of_string prim))
             (field 13 Int32) (field 14 Int32) (field 15 Int32)
             (field 16 Int32) (field 22 Int32) (field 23 Int32))))
     zero =a (field 0 include)
     one =a (field 1 include)
     minus_one =a (field 2 include)
     neg =a (field 3 include)
     add =a (field 4 include)
     sub =a (field 5 include)
     mul =a (field 6 include)
     div =a (field 7 include)
     unsigned_div =a (field 8 include)
     rem =a (field 9 include)
     unsigned_rem =a (field 10 include)
     succ =a (field 11 include)
     pred =a (field 12 include)
     abs =a (field 13 include)
     max_int =a (field 14 include)
     min_int =a (field 15 include)
     logand =a (field 16 include)
     logor =a (field 17 include)
     logxor =a (field 18 include)
     lognot =a (field 19 include)
     shift_left =a (field 20 include)
     shift_right =a (field 21 include)
     shift_right_logical =a (field 22 include)
     of_int =a (field 23 include)
     of_int_exn =a (field 24 include)
     to_int =a (field 25 include)
     of_float =a (field 26 include)
     to_float =a (field 27 include)
     of_int32 =a (field 28 include)
     to_int32 =a (field 29 include)
     of_int64 =a (field 30 include)
     to_int64 =a (field 31 include)
     of_string =a (field 32 include)
     to_string =a (field 33 include)
     compare =a (field 34 include)
     unsigned_compare =a (field 35 include)
     equal =a (field 36 include)
     repr =a (field 37 include)
     print =a (field 38 include))
    (pseudo _none_(0)<ghost>:-1--1
      (makeblock 0 zero one minus_one neg add sub mul div unsigned_div rem
        unsigned_rem succ pred abs size max_int min_int logand logor logxor
        lognot shift_left shift_right shift_right_logical of_int of_int_exn
        to_int of_float to_float of_int32 to_int32 of_int64 to_int64
        of_string to_string compare unsigned_compare equal repr print))))
