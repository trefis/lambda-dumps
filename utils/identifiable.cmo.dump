(setglobal Identifiable!
  (let
    (Pair =
       (module-defn(Pair) utils/identifiable.ml(88):3066-3552
         (function A B is_a_functor
           (let
             (A =a A
              B =a B
              compare =
                (function param param : int
                  (funct-body utils/identifiable.ml(91)<ghost>:3179-3275
                    (let
                      (b2 =a (field 1 param)
                       a2 =a (field 0 param)
                       b1 =a (field 1 param)
                       a1 =a (field 0 param))
                      (before utils/identifiable.ml(92):3203-3275
                        (let
                          (c =[int]
                             (after utils/identifiable.ml(92):3211-3226
                               (apply (field 2 A) a1 a2)))
                          (before utils/identifiable.ml(93):3234-3275
                            (if (!= c 0)
                              (before utils/identifiable.ml(93):3249-3250 c)
                              (before utils/identifiable.ml(94):3260-3275
                                (after utils/identifiable.ml(94):3260-3275
                                  (apply (field 2 B) b1 b2))))))))))
              output =
                (function oc param
                  (funct-body utils/identifiable.ml(96)<ghost>:3290-3353
                    (let (b =a (field 1 param) a =a (field 0 param))
                      (before utils/identifiable.ml(96):3302-3353
                        (after utils/identifiable.ml(96):3302-3353
                          (apply (field 0 (global Stdlib__printf!)) oc
                            [0:
                             [11: " (" [15: [11: ", " [15: [12: ')' 0a]]]]]
                             " (%a, %a)"]
                            (field 3 A) a (field 3 B) b))))))
              hash =
                (function param : int
                  (funct-body utils/identifiable.ml(97)<ghost>:3365-3407
                    (let (b =a (field 1 param) a =a (field 0 param))
                      (before utils/identifiable.ml(97):3374-3407
                        (after utils/identifiable.ml(97):3374-3407
                          (apply (field 26 (global Stdlib__hashtbl!))
                            (makeblock 0 (int,int)
                              (after utils/identifiable.ml(97):3388-3396
                                (apply (field 1 A) a))
                              (after utils/identifiable.ml(97):3398-3406
                                (apply (field 1 B) b)))))))))
              equal =
                (function param param
                  (funct-body utils/identifiable.ml(98)<ghost>:3420-3470
                    (let
                      (b2 =a (field 1 param)
                       a2 =a (field 0 param)
                       b1 =a (field 1 param)
                       a1 =a (field 0 param))
                      (before utils/identifiable.ml(98):3440-3470
                        (&&
                          (after utils/identifiable.ml(98):3440-3453
                            (apply (field 0 A) a1 a2))
                          (after utils/identifiable.ml(98):3457-3470
                            (apply (field 0 B) b1 b2)))))))
              print =
                (function ppf param
                  (funct-body utils/identifiable.ml(99)<ghost>:3483-3548
                    (let (b =a (field 1 param) a =a (field 0 param))
                      (before utils/identifiable.ml(99):3496-3548
                        (after utils/identifiable.ml(99):3496-3548
                          (apply (field 122 (global Stdlib__format!)) ppf
                            [0:
                             [11:
                              " ("
                              [15:
                               [11:
                                ", " [17: [0: "@ " 1 0] [15: [12: ')' 0a]]]]]]
                             " (%a, @ %a)"]
                            (field 4 A) a (field 4 B) b)))))))
             (pseudo utils/identifiable.ml(88):3136-3552
               (makeblock 0 equal hash compare output print)))))
     Make_map =
       (module-defn(Make_map) utils/identifiable.ml(102):3554-5680
         (function T is_a_functor
           (let
             (T =a T
              include =
                (apply
                  (let (let = (field 0 (global Stdlib__map!)))
                    (field 0 (global Stdlib__map!)))
                  (makeblock 0 (field 2 T)))
              empty =a (field 0 include)
              is_empty =a (field 1 include)
              mem =a (field 2 include)
              add =a (field 3 include)
              update =a (field 4 include)
              singleton =a (field 5 include)
              remove =a (field 6 include)
              merge =a (field 7 include)
              union =a (field 8 include)
              compare =a (field 9 include)
              equal =a (field 10 include)
              iter =a (field 11 include)
              fold =a (field 12 include)
              for_all =a (field 13 include)
              exists =a (field 14 include)
              filter =a (field 15 include)
              partition =a (field 16 include)
              cardinal =a (field 17 include)
              bindings =a (field 18 include)
              min_binding =a (field 19 include)
              min_binding_opt =a (field 20 include)
              max_binding =a (field 21 include)
              max_binding_opt =a (field 22 include)
              choose =a (field 23 include)
              choose_opt =a (field 24 include)
              split =a (field 25 include)
              find =a (field 26 include)
              find_opt =a (field 27 include)
              find_first =a (field 28 include)
              find_first_opt =a (field 29 include)
              find_last =a (field 30 include)
              find_last_opt =a (field 31 include)
              map =a (field 32 include)
              mapi =a (field 33 include)
              to_seq =a (field 34 include)
              to_seq_from =a (field 35 include)
              add_seq =a (field 36 include)
              of_seq =a (field 37 include)
              filter_map =
                (function t f
                  (funct-body utils/identifiable.ml(105)<ghost>:3632-3754
                    (before utils/identifiable.ml(106):3643-3754
                      (after utils/identifiable.ml(106):3643-3754
                        (apply fold
                          (function id v map
                            (funct-body utils/identifiable.ml(106):3648-3746
                              (before utils/identifiable.ml(107):3673-3745
                                (let
                                  (*match* =
                                     (after utils/identifiable.ml(107):3679-3685
                                       (apply f id v)))
                                  (if *match*
                                    (let (r =a (field 0 *match*))
                                      (before utils/identifiable.ml(109):3733-3745
                                        (after utils/identifiable.ml(109):3733-3745
                                          (apply add id r map))))
                                    (before utils/identifiable.ml(108):3709-3712
                                      map))))))
                          t empty)))))
              of_list =
                (function l
                  (funct-body utils/identifiable.ml(111)<ghost>:3770-3834
                    (before utils/identifiable.ml(112):3778-3834
                      (after utils/identifiable.ml(112):3778-3834
                        (apply (field 20 (global Stdlib__list!))
                          (function map param
                            (funct-body utils/identifiable.ml(112):3793-3826
                              (let
                                (v =a (field 1 param) id =a (field 0 param))
                                (before utils/identifiable.ml(112):3813-3825
                                  (after utils/identifiable.ml(112):3813-3825
                                    (apply add id v map))))))
                          empty l)))))
              disjoint_union =
                (function eq print m1 m2
                  (funct-body utils/identifiable.ml(114)<ghost>:3857-4378
                    (before utils/identifiable.ml(115):3880-4378
                      (after utils/identifiable.ml(115):3880-4378
                        (apply union
                          (function id v1 v2
                            (funct-body utils/identifiable.ml(115):3886-4366
                              (before utils/identifiable.ml(116):3911-4365
                                (let
                                  (ok =
                                     (if eq
                                       (let (eq =a (field 0 eq))
                                         (before utils/identifiable.ml(118):3983-3991
                                           (after utils/identifiable.ml(118):3983-3991
                                             (apply eq v1 v2))))
                                       (before utils/identifiable.ml(117):3954-3959
                                         0a)))
                                  (before utils/identifiable.ml(120):4011-4365
                                    (if (not ok)
                                      (before utils/identifiable.ml(121):4036-4344
                                        (let
                                          (err =
                                             (if print
                                               (let
                                                 (print =a (field 0 print))
                                                 (before utils/identifiable.ml(126):4204-4300
                                                   (after utils/identifiable.ml(126):4204-4300
                                                     (apply
                                                       (field 126
                                                         (global Stdlib__format!))
                                                       [0:
                                                        [11:
                                                         "Map.disjoint_union "
                                                         [15:
                                                          [11:
                                                           " => "
                                                           [15:
                                                            [11:
                                                             " <> " [15: 0a]]]]]]
                                                        "Map.disjoint_union %a => %a <> %a"]
                                                       (field 4 T) id print
                                                       v1 print v2))))
                                               (before utils/identifiable.ml(124):4111-4161
                                                 (after utils/identifiable.ml(124):4111-4161
                                                   (apply
                                                     (field 126
                                                       (global Stdlib__format!))
                                                     [0:
                                                      [11:
                                                       "Map.disjoint_union "
                                                       [15: 0a]]
                                                      "Map.disjoint_union %a"]
                                                     (field 4 T) id)))))
                                          (before utils/identifiable.ml(129):4324-4344
                                            (after utils/identifiable.ml(129):4324-4344
                                              (apply (field 0 (global Misc!))
                                                err)))))
                                      (before utils/identifiable.ml(130):4358-4365
                                        (makeblock 0 v1))))))))
                          m1 m2)))))
              union_right =
                (function m1 m2
                  (funct-body utils/identifiable.ml(133)<ghost>:4398-4570
                    (before utils/identifiable.ml(134):4410-4570
                      (after utils/identifiable.ml(134):4410-4570
                        (apply merge
                          (function _id x y
                            (funct-body utils/identifiable.ml(134):4416-4558
                              (before utils/identifiable.ml(134):4432-4557
                                (let (*match* = x *match* = y)
                                  (catch
                                    (if *match*
                                      (if *match*
                                        (let (v =a (field 0 *match*))
                                          (exit 1 v))
                                        (let (v =a (field 0 *match*))
                                          (exit 1 v)))
                                      (if *match*
                                        (let (v =a (field 0 *match*))
                                          (exit 1 v))
                                        (before utils/identifiable.ml(135):4472-4476
                                          0a)))
                                   with (1 v)
                                    (before utils/identifiable.ml(138):4551-4557
                                      (makeblock 0 v)))))))
                          m1 m2)))))
              union_left =
                (function m1 m2
                  (funct-body utils/identifiable.ml(141)<ghost>:4589-4614
                    (before utils/identifiable.ml(141):4597-4614
                      (after utils/identifiable.ml(141):4597-4614
                        (apply union_right m2 m1)))))
              union_merge =
                (function f m1 m2
                  (funct-body utils/identifiable.ml(143)<ghost>:4634-4790
                    (before utils/identifiable.ml(144):4648-4790
                      (let
                        (aux =
                           (function param m1 m2
                             (funct-body utils/identifiable.ml(144)<ghost>:4656-4763
                               (before utils/identifiable.ml(145):4672-4763
                                 (let (*match* = m1 *match* = m2)
                                   (catch
                                     (if *match*
                                       (if *match*
                                         (let
                                           (m2 =a (field 0 *match*)
                                            m1 =a (field 0 *match*))
                                           (before utils/identifiable.ml(147):4749-4763
                                             (makeblock 0
                                               (after utils/identifiable.ml(147):4754-4763
                                                 (apply f m1 m2)))))
                                         (let (m =a *match*) (exit 2 m)))
                                       (let (m =a *match*) (exit 2 m)))
                                    with (2 m)
                                     (before utils/identifiable.ml(146):4719-4720
                                       m)))))))
                        (before utils/identifiable.ml(149):4775-4790
                          (after utils/identifiable.ml(149):4775-4790
                            (apply merge aux m1 m2)))))))
              rename =
                (function m v
                  (funct-body utils/identifiable.ml(151)<ghost>:4805-4851
                    (before utils/identifiable.ml(152):4815-4851
                      (try
                        (after utils/identifiable.ml(152):4819-4827
                          (apply find v m))
                       with exn
                        (if (== exn (field 7 (global Stdlib!)))
                          (before utils/identifiable.ml(153):4850-4851 v)
                          (reraise exn))))))
              map_keys =
                (function f m
                  (funct-body utils/identifiable.ml(155)<ghost>:4868-4932
                    (before utils/identifiable.ml(156):4878-4932
                      (after utils/identifiable.ml(156):4878-4932
                        (apply of_list
                          (after utils/identifiable.ml(156):4886-4932
                            (apply (field 16 (global Stdlib__list!))
                              (function param
                                (funct-body utils/identifiable.ml(156):4896-4918
                                  (let
                                    (v =a (field 1 param)
                                     k =a (field 0 param))
                                    (before utils/identifiable.ml(156):4911-4917
                                      (makeblock 0
                                        (after utils/identifiable.ml(156):4911-4914
                                          (apply f k))
                                        v)))))
                              (after utils/identifiable.ml(156):4919-4931
                                (apply bindings m)))))))))
              print =
                (function f ppf s
                  (funct-body utils/identifiable.ml(158)<ghost>:4946-5109
                    (before utils/identifiable.ml(159):4960-5109
                      (let
                        (elts =
                           (function ppf s
                             (funct-body utils/identifiable.ml(159)<ghost>:4969-5056
                               (before utils/identifiable.ml(159):4977-5056
                                 (after utils/identifiable.ml(159):4977-5056
                                   (apply iter
                                     (function id v
                                       (funct-body utils/identifiable.ml(159):4982-5054
                                         (before utils/identifiable.ml(160):5003-5053
                                           (after utils/identifiable.ml(160):5003-5053
                                             (apply
                                               (field 122
                                                 (global Stdlib__format!))
                                               ppf
                                               [0:
                                                [17:
                                                 [0: "@ " 1 0]
                                                 [12:
                                                  '('
                                                  [18:
                                                   [1: [0: 0a ""]]
                                                   [15:
                                                    [17:
                                                     [0: "@ " 1 0]
                                                     [15:
                                                      [17: 0a [12: ')' 0a]]]]]]]]
                                                "@ (@[%a@ %a@])"]
                                               (field 4 T) id f v)))))
                                     s))))))
                        (before utils/identifiable.ml(161):5064-5109
                          (after utils/identifiable.ml(161):5064-5109
                            (apply (field 122 (global Stdlib__format!)) ppf
                              [0:
                               [18:
                                [1: [0: [11: "<1>" 0a] "<1>"]]
                                [12:
                                 '{'
                                 [18:
                                  [1: [0: 0a ""]]
                                  [15:
                                   [17:
                                    [0: "@ " 1 0]
                                    [17: 0a [12: '}' [17: 0a 0a]]]]]]]]
                               "@[<1>{@[%a@ @]}@]"]
                              elts s)))))))
              T_set =
                (module-defn(T_set) utils/identifiable.ml(163):5113-5140
                  (apply
                    (let (let = (field 0 (global Stdlib__set!)))
                      (field 0 (global Stdlib__set!)))
                    (makeblock 0 (field 2 T))))
              keys =
                (function map
                  (funct-body utils/identifiable.ml(165)<ghost>:5153-5212
                    (before utils/identifiable.ml(165):5159-5212
                      (after utils/identifiable.ml(165):5159-5212
                        (apply fold
                          (function k param set
                            (funct-body utils/identifiable.ml(165):5164-5196
                              (before utils/identifiable.ml(165):5180-5195
                                (after utils/identifiable.ml(165):5180-5195
                                  (apply (field 3 T_set) k set)))))
                          map (field 0 T_set))))))
              data =
                (function t
                  (funct-body utils/identifiable.ml(167)<ghost>:5225-5254
                    (before utils/identifiable.ml(167):5229-5254
                      (after utils/identifiable.ml(167):5229-5254
                        (apply (field 16 (global Stdlib__list!))
                          (function prim stub (field 1 prim))
                          (after utils/identifiable.ml(167):5242-5254
                            (apply bindings t)))))))
              of_set =
                (function f set
                  (funct-body utils/identifiable.ml(169)<ghost>:5269-5328
                    (before utils/identifiable.ml(169):5277-5328
                      (after utils/identifiable.ml(169):5277-5328
                        (apply (field 15 T_set)
                          (function e map
                            (funct-body utils/identifiable.ml(169):5288-5318
                              (before utils/identifiable.ml(169):5302-5317
                                (after utils/identifiable.ml(169):5302-5317
                                  (apply add e
                                    (after utils/identifiable.ml(169):5308-5313
                                      (apply f e))
                                    map)))))
                          set empty)))))
              transpose_keys_and_data =
                (function map
                  (funct-body utils/identifiable.ml(171)<ghost>:5360-5405
                    (before utils/identifiable.ml(171):5366-5405
                      (after utils/identifiable.ml(171):5366-5405
                        (apply fold
                          (function k v m
                            (funct-body utils/identifiable.ml(171):5371-5395
                              (before utils/identifiable.ml(171):5385-5394
                                (after utils/identifiable.ml(171):5385-5394
                                  (apply add v k m)))))
                          map empty)))))
              transpose_keys_and_data_set =
                (function map
                  (funct-body utils/identifiable.ml(172)<ghost>:5440-5676
                    (before utils/identifiable.ml(173):5450-5676
                      (after utils/identifiable.ml(173):5450-5676
                        (apply fold
                          (function k v m
                            (funct-body utils/identifiable.ml(173):5455-5660
                              (before utils/identifiable.ml(174):5477-5659
                                (let
                                  (set =
                                     (catch
                                       (try
                                         (exit 5
                                           (after utils/identifiable.ml(175):5503-5511
                                             (apply find v m)))
                                        with exn
                                         (if
                                           (== exn
                                             (field 7 (global Stdlib!)))
                                           (before utils/identifiable.ml(177):5564-5581
                                             (after utils/identifiable.ml(177):5564-5581
                                               (apply (field 4 T_set) k)))
                                           (reraise exn)))
                                      with (5 set)
                                       (before utils/identifiable.ml(179):5613-5628
                                         (after utils/identifiable.ml(179):5613-5628
                                           (apply (field 3 T_set) k set)))))
                                  (before utils/identifiable.ml(181):5648-5659
                                    (after utils/identifiable.ml(181):5648-5659
                                      (apply add v set m)))))))
                          map empty))))))
             (pseudo utils/identifiable.ml(102):3584-5680
               (makeblock 0 empty is_empty mem add update singleton remove
                 merge union compare equal iter fold for_all exists filter
                 partition cardinal bindings min_binding min_binding_opt
                 max_binding max_binding_opt choose choose_opt split find
                 find_opt find_first find_first_opt find_last find_last_opt
                 map mapi to_seq to_seq_from add_seq of_seq filter_map
                 of_list disjoint_union union_right union_left union_merge
                 rename map_keys print T_set keys data of_set
                 transpose_keys_and_data transpose_keys_and_data_set)))))
     Make_set =
       (module-defn(Make_set) utils/identifiable.ml(185):5682-6276
         (function T is_a_functor
           (let
             (T =a T
              include =
                (apply
                  (let (let = (field 0 (global Stdlib__set!)))
                    (field 0 (global Stdlib__set!)))
                  (makeblock 0 (field 2 T)))
              empty =a (field 0 include)
              is_empty =a (field 1 include)
              mem =a (field 2 include)
              add =a (field 3 include)
              singleton =a (field 4 include)
              remove =a (field 5 include)
              union =a (field 6 include)
              inter =a (field 7 include)
              disjoint =a (field 8 include)
              diff =a (field 9 include)
              compare =a (field 10 include)
              equal =a (field 11 include)
              subset =a (field 12 include)
              iter =a (field 13 include)
              fold =a (field 15 include)
              for_all =a (field 16 include)
              exists =a (field 17 include)
              filter =a (field 18 include)
              partition =a (field 19 include)
              cardinal =a (field 20 include)
              elements =a (field 21 include)
              min_elt =a (field 22 include)
              min_elt_opt =a (field 23 include)
              max_elt =a (field 24 include)
              max_elt_opt =a (field 25 include)
              choose =a (field 26 include)
              choose_opt =a (field 27 include)
              split =a (field 28 include)
              find =a (field 29 include)
              find_opt =a (field 30 include)
              find_first =a (field 31 include)
              find_first_opt =a (field 32 include)
              find_last =a (field 33 include)
              find_last_opt =a (field 34 include)
              to_seq_from =a (field 36 include)
              to_seq =a (field 37 include)
              add_seq =a (field 38 include)
              of_seq =a (field 39 include)
              output =
                (function oc s
                  (funct-body utils/identifiable.ml(188)<ghost>:5756-5875
                    (before utils/identifiable.ml(189):5767-5875
                      (seq
                        (after utils/identifiable.ml(189):5767-5790
                          (apply (field 0 (global Stdlib__printf!)) oc
                            [0: [11: " ( " 0a] " ( "]))
                        (before utils/identifiable.ml(190):5796-5875
                          (seq
                            (after utils/identifiable.ml(190):5796-5848
                              (apply iter
                                (function v
                                  (funct-body utils/identifiable.ml(190):5801-5846
                                    (before utils/identifiable.ml(190):5811-5845
                                      (after utils/identifiable.ml(190):5811-5845
                                        (apply
                                          (field 0 (global Stdlib__printf!))
                                          oc [0: [15: [12: ' ' 0a]] "%a "]
                                          (field 3 T) v)))))
                                s))
                            (before utils/identifiable.ml(191):5854-5875
                              (after utils/identifiable.ml(191):5854-5875
                                (apply (field 0 (global Stdlib__printf!)) oc
                                  [0: [12: ')' 0a] ")"])))))))))
              print =
                (function ppf s
                  (funct-body utils/identifiable.ml(193)<ghost>:5889-6024
                    (before utils/identifiable.ml(194):5901-6024
                      (let
                        (elts =
                           (function ppf s
                             (funct-body utils/identifiable.ml(194)<ghost>:5910-5971
                               (before utils/identifiable.ml(194):5918-5971
                                 (after utils/identifiable.ml(194):5918-5971
                                   (apply iter
                                     (function e
                                       (funct-body utils/identifiable.ml(194):5923-5969
                                         (before utils/identifiable.ml(194):5933-5968
                                           (after utils/identifiable.ml(194):5933-5968
                                             (apply
                                               (field 122
                                                 (global Stdlib__format!))
                                               ppf
                                               [0:
                                                [17: [0: "@ " 1 0] [15: 0a]]
                                                "@ %a"]
                                               (field 4 T) e)))))
                                     s))))))
                        (before utils/identifiable.ml(195):5979-6024
                          (after utils/identifiable.ml(195):5979-6024
                            (apply (field 122 (global Stdlib__format!)) ppf
                              [0:
                               [18:
                                [1: [0: [11: "<1>" 0a] "<1>"]]
                                [12:
                                 '{'
                                 [18:
                                  [1: [0: 0a ""]]
                                  [15:
                                   [17:
                                    [0: "@ " 1 0]
                                    [17: 0a [12: '}' [17: 0a 0a]]]]]]]]
                               "@[<1>{@[%a@ @]}@]"]
                              elts s)))))))
              to_string =
                (function s
                  (funct-body utils/identifiable.ml(197)<ghost>:6042-6074
                    (before utils/identifiable.ml(197):6046-6074
                      (after utils/identifiable.ml(197):6046-6074
                        (apply (field 126 (global Stdlib__format!))
                          [0: [15: 0a] "%a"] print s)))))
              of_list =
                (function l
                  (funct-body utils/identifiable.ml(199)<ghost>:6090-6221
                    (before utils/identifiable.ml(199):6094-6221
                      (if l
                        (let (q =a (field 1 l) t =a (field 0 l))
                          (if q
                            (let (t =a t)
                              (before utils/identifiable.ml(202):6166-6221
                                (after utils/identifiable.ml(202):6166-6221
                                  (apply (field 20 (global Stdlib__list!))
                                    (function acc e
                                      (funct-body utils/identifiable.ml(202):6181-6205
                                        (before utils/identifiable.ml(202):6195-6204
                                          (after utils/identifiable.ml(202):6195-6204
                                            (apply add e acc)))))
                                    (after utils/identifiable.ml(202):6206-6219
                                      (apply singleton t))
                                    q))))
                            (before utils/identifiable.ml(201):6138-6149
                              (after utils/identifiable.ml(201):6138-6149
                                (apply singleton t)))))
                        (before utils/identifiable.ml(200):6119-6124 empty)))))
              map =
                (function f s
                  (funct-body utils/identifiable.ml(204)<ghost>:6233-6272
                    (before utils/identifiable.ml(204):6239-6272
                      (after utils/identifiable.ml(204):6239-6272
                        (apply of_list
                          (after utils/identifiable.ml(204):6247-6272
                            (apply (field 16 (global Stdlib__list!)) f
                              (after utils/identifiable.ml(204):6259-6271
                                (apply elements s))))))))))
             (pseudo utils/identifiable.ml(185):5712-6276
               (makeblock 0 empty is_empty mem add singleton remove union
                 inter disjoint diff compare equal subset iter fold for_all
                 exists filter partition cardinal elements min_elt
                 min_elt_opt max_elt max_elt_opt choose choose_opt split find
                 find_opt find_first find_first_opt find_last find_last_opt
                 to_seq_from to_seq add_seq of_seq output print to_string
                 of_list map)))))
     Make_tbl =
       (module-defn(Make_tbl) utils/identifiable.ml(207):6278-6894
         (function T is_a_functor
           (let
             (T =a T
              include =
                (apply
                  (let (let = (field 24 (global Stdlib__hashtbl!)))
                    (field 24 (global Stdlib__hashtbl!)))
                  (makeblock 0 (field 0 T) (field 1 T)))
              create =a (field 0 include)
              clear =a (field 1 include)
              reset =a (field 2 include)
              copy =a (field 3 include)
              add =a (field 4 include)
              remove =a (field 5 include)
              find =a (field 6 include)
              find_opt =a (field 7 include)
              find_all =a (field 8 include)
              replace =a (field 9 include)
              mem =a (field 10 include)
              iter =a (field 11 include)
              filter_map_inplace =a (field 12 include)
              fold =a (field 13 include)
              length =a (field 14 include)
              stats =a (field 15 include)
              to_seq =a (field 16 include)
              to_seq_keys =a (field 17 include)
              to_seq_values =a (field 18 include)
              add_seq =a (field 19 include)
              replace_seq =a (field 20 include)
              of_seq =a (field 21 include)
              T_map =
                (module-defn(T_map) utils/identifiable.ml(210):6345-6372
                  (apply Make_map T))
              to_list =
                (function t
                  (funct-body utils/identifiable.ml(212)<ghost>:6388-6448
                    (before utils/identifiable.ml(213):6396-6448
                      (after utils/identifiable.ml(213):6396-6448
                        (apply fold
                          (function key datum elts
                            (funct-body utils/identifiable.ml(213):6401-6443
                              (before utils/identifiable.ml(213):6424-6442
                                (makeblock 0 (makeblock 0 key datum) elts))))
                          t 0a)))))
              of_list =
                (function elts
                  (funct-body utils/identifiable.ml(215)<ghost>:6464-6559
                    (before utils/identifiable.ml(216):6475-6559
                      (let
                        (t =
                           (after utils/identifiable.ml(216):6483-6492
                             (apply create 42)))
                        (before utils/identifiable.ml(217):6500-6559
                          (seq
                            (after utils/identifiable.ml(217):6500-6552
                              (apply (field 14 (global Stdlib__list!))
                                (function param
                                  (funct-body utils/identifiable.ml(217):6510-6547
                                    (let
                                      (datum =a (field 1 param)
                                       key =a (field 0 param))
                                      (before utils/identifiable.ml(217):6531-6546
                                        (after utils/identifiable.ml(217):6531-6546
                                          (apply add t key datum))))))
                                elts))
                            (before utils/identifiable.ml(218):6558-6559 t)))))))
              to_map =
                (function v
                  (funct-body utils/identifiable.ml(220)<ghost>:6574-6606
                    (before utils/identifiable.ml(220):6578-6606
                      (after utils/identifiable.ml(220):6578-6606
                        (apply fold (field 3 T_map) v (field 0 T_map))))))
              of_map =
                (function m
                  (funct-body utils/identifiable.ml(222)<ghost>:6621-6712
                    (before utils/identifiable.ml(223):6629-6712
                      (let
                        (t =
                           (after utils/identifiable.ml(223):6637-6662
                             (apply create
                               (after utils/identifiable.ml(223):6644-6662
                                 (apply (field 17 T_map) m)))))
                        (before utils/identifiable.ml(224):6670-6712
                          (seq
                            (after utils/identifiable.ml(224):6670-6705
                              (apply (field 11 T_map)
                                (function k v
                                  (funct-body utils/identifiable.ml(224):6681-6703
                                    (before utils/identifiable.ml(224):6693-6702
                                      (after utils/identifiable.ml(224):6693-6702
                                        (apply add t k v)))))
                                m))
                            (before utils/identifiable.ml(225):6711-6712 t)))))))
              memoize =
                (function t f key
                  (funct-body utils/identifiable.ml(227)<ghost>:6728-6837
                    (before utils/identifiable.ml(228):6749-6837
                      (try
                        (after utils/identifiable.ml(228):6753-6763
                          (apply find t key))
                       with exn
                        (if (== exn (field 7 (global Stdlib!)))
                          (before utils/identifiable.ml(230):6794-6837
                            (let
                              (r =
                                 (after utils/identifiable.ml(230):6802-6807
                                   (apply f key)))
                              (before utils/identifiable.ml(231):6817-6837
                                (seq
                                  (after utils/identifiable.ml(231):6817-6828
                                    (apply add t key r))
                                  (before utils/identifiable.ml(232):6836-6837
                                    r)))))
                          (reraise exn))))))
              map =
                (function t f
                  (funct-body utils/identifiable.ml(234)<ghost>:6849-6890
                    (before utils/identifiable.ml(235):6859-6890
                      (after utils/identifiable.ml(235):6859-6890
                        (apply of_map
                          (after utils/identifiable.ml(235):6866-6890
                            (apply (field 32 T_map) f
                              (after utils/identifiable.ml(235):6879-6889
                                (apply to_map t))))))))))
             (pseudo utils/identifiable.ml(207):6308-6894
               (makeblock 0 create clear reset copy add remove find find_opt
                 find_all replace mem iter filter_map_inplace fold length
                 stats to_seq to_seq_keys to_seq_values add_seq replace_seq
                 of_seq T_map to_list of_list to_map of_map memoize map)))))
     Make =
       (module-defn(Make) utils/identifiable.ml(249):7116-7264
         (function T is_a_functor
           (let
             (T =a T
              T =a (module-defn(T) utils/identifiable.ml(250):7151-7163 T)
              include =a T
              equal =a (field 0 include)
              hash =a (field 1 include)
              compare =a (field 2 include)
              output =a (field 3 include)
              print =a (field 4 include)
              Set =
                (module-defn(Set) utils/identifiable.ml(253):7179-7204
                  (apply Make_set T))
              Map =
                (module-defn(Map) utils/identifiable.ml(254):7207-7232
                  (apply Make_map T))
              Tbl =
                (module-defn(Tbl) utils/identifiable.ml(255):7235-7260
                  (apply Make_tbl T)))
             (pseudo utils/identifiable.ml(249):7142-7264
               (makeblock 0 T equal hash compare output print Set Map Tbl))))))
    (pseudo _none_(0)<ghost>:-1--1
      (makeblock 0 Pair
        (function funarg is_a_functor stub
          (let (let = (apply Make funarg))
            (makeblock 0 (field 0 let) (field 1 let) (field 2 let)
              (field 3 let) (field 4 let) (field 5 let) (field 6 let)
              (let (let =a (field 7 let))
                (makeblock 0 (field 0 let) (field 1 let) (field 2 let)
                  (field 3 let) (field 4 let) (field 5 let) (field 6 let)
                  (field 7 let) (field 8 let) (field 9 let) (field 10 let)
                  (field 11 let) (field 12 let) (field 13 let) (field 14 let)
                  (field 15 let) (field 16 let) (field 17 let) (field 18 let)
                  (field 19 let) (field 20 let) (field 21 let) (field 22 let)
                  (field 23 let) (field 24 let) (field 25 let) (field 26 let)
                  (field 27 let) (field 28 let) (field 29 let) (field 30 let)
                  (field 31 let) (field 32 let) (field 33 let) (field 34 let)
                  (field 35 let) (field 36 let) (field 37 let) (field 38 let)
                  (field 39 let) (field 40 let) (field 41 let) (field 42 let)
                  (field 43 let) (field 44 let) (field 45 let) (field 48 let)
                  (field 49 let) (field 50 let) (field 51 let) (field 52 let)
                  (field 46 let)))
              (let (let =a (field 8 let))
                (makeblock 0 (field 0 let) (field 1 let) (field 2 let)
                  (field 3 let) (field 4 let) (field 5 let) (field 6 let)
                  (field 7 let) (field 8 let) (field 9 let) (field 10 let)
                  (field 11 let) (field 12 let) (field 13 let) (field 14 let)
                  (field 15 let) (field 16 let) (field 17 let) (field 18 let)
                  (field 19 let) (field 20 let) (field 21 let) (field 23 let)
                  (field 24 let) (field 25 let) (field 26 let) (field 27 let)
                  (field 28 let))))))))))
