(setglobal Warnings!
  (let
    (number =
       (function param : int
         (funct-body utils/warnings.ml(105):5195-7195
           (switch* param
            case int 0: (before utils/warnings.ml(106):5225-5226 1)
            case int 1: (before utils/warnings.ml(107):5250-5251 2)
            case int 2: (before utils/warnings.ml(109):5304-5305 5)
            case int 3: (before utils/warnings.ml(114):5443-5445 10)
            case int 4: (before utils/warnings.ml(115):5466-5468 11)
            case int 5: (before utils/warnings.ml(116):5487-5489 12)
            case int 6: (before utils/warnings.ml(118):5554-5556 14)
            case int 7: (before utils/warnings.ml(120):5629-5631 16)
            case int 8: (before utils/warnings.ml(124):5752-5754 20)
            case int 9: (before utils/warnings.ml(125):5785-5787 21)
            case int 10: (before utils/warnings.ml(127):5840-5842 23)
            case int 11: (before utils/warnings.ml(129):5898-5899 8)
            case int 12: (before utils/warnings.ml(132):6012-6014 28)
            case int 13: (before utils/warnings.ml(133):6036-6038 29)
            case int 14: (before utils/warnings.ml(143):6342-6344 39)
            case int 15: (before utils/warnings.ml(155):6714-6716 51)
            case int 16: (before utils/warnings.ml(156):6748-6750 52)
            case int 17: (before utils/warnings.ml(160):6872-6874 56)
            case int 18: (before utils/warnings.ml(163):6968-6970 59)
            case int 19: (before utils/warnings.ml(166):7063-7065 62)
            case int 20: (before utils/warnings.ml(168):7136-7138 64)
            case tag 0: (before utils/warnings.ml(108):5275-5276 4)
            case tag 1: (before utils/warnings.ml(110):5330-5331 6)
            case tag 2: (before utils/warnings.ml(111):5357-5358 7)
            case tag 3: (before utils/warnings.ml(112):5382-5383 8)
            case tag 4: (before utils/warnings.ml(113):5419-5420 9)
            case tag 5: (before utils/warnings.ml(117):5526-5528 13)
            case tag 6: (before utils/warnings.ml(119):5590-5592 15)
            case tag 7: (before utils/warnings.ml(121):5667-5669 17)
            case tag 8: (before utils/warnings.ml(122):5693-5695 18)
            case tag 9: (before utils/warnings.ml(123):5726-5728 19)
            case tag 10: (before utils/warnings.ml(126):5810-5812 22)
            case tag 11: (before utils/warnings.ml(128):5868-5870 24)
            case tag 12: (before utils/warnings.ml(130):5940-5942 26)
            case tag 13: (before utils/warnings.ml(131):5970-5972 27)
            case tag 14: (before utils/warnings.ml(134):6070-6072 30)
            case tag 15: (before utils/warnings.ml(135):6102-6104 31)
            case tag 16: (before utils/warnings.ml(136):6139-6141 32)
            case tag 17: (before utils/warnings.ml(137):6163-6165 33)
            case tag 18: (before utils/warnings.ml(138):6199-6201 34)
            case tag 19: (before utils/warnings.ml(139):6228-6230 35)
            case tag 20: (before utils/warnings.ml(140):6256-6258 36)
            case tag 21: (before utils/warnings.ml(141):6287-6289 37)
            case tag 22: (before utils/warnings.ml(142):6316-6318 38)
            case tag 23: (before utils/warnings.ml(144):6372-6374 40)
            case tag 24: (before utils/warnings.ml(145):6399-6401 41)
            case tag 25: (before utils/warnings.ml(146):6430-6432 42)
            case tag 26: (before utils/warnings.ml(147):6460-6462 43)
            case tag 27: (before utils/warnings.ml(148):6495-6497 44)
            case tag 28: (before utils/warnings.ml(149):6537-6539 45)
            case tag 29: (before utils/warnings.ml(150):6566-6568 46)
            case tag 30: (before utils/warnings.ml(151):6596-6598 47)
            case tag 31: (before utils/warnings.ml(152):6638-6640 48)
            case tag 32: (before utils/warnings.ml(153):6662-6664 49)
            case tag 33: (before utils/warnings.ml(154):6688-6690 50)
            case tag 34: (before utils/warnings.ml(157):6780-6782 53)
            case tag 35: (before utils/warnings.ml(158):6813-6815 54)
            case tag 36: (before utils/warnings.ml(159):6845-6847 55)
            case tag 37: (before utils/warnings.ml(161):6902-6904 57)
            case tag 38: (before utils/warnings.ml(162):6926-6928 58)
            case tag 39: (before utils/warnings.ml(164):6994-6996 60)
            case tag 40: (before utils/warnings.ml(165):7034-7036 61)
            case tag 41: (before utils/warnings.ml(167):7103-7105 63)
            case tag 42: (before utils/warnings.ml(169):7164-7166 65)
            case tag 43: (before utils/warnings.ml(170):7193-7195 66))))
     last_warning_number =[int] 66
     letter =
       (function param[int]
         (funct-body utils/warnings.ml(178):7311-7898
           (let (switcher =a (-97+ param))
             (if (isout 25 switcher)
               (before utils/warnings.ml(207):7886-7898
                 (raise
                   (after utils/warnings.ml(207):7886-7898
                     (makeblock 0 (global Assert_failure!)
                       [0: "utils/warnings.ml" 207 9]))))
               (switch* switcher
                case int 0:
                 (before utils/warnings.ml(180):7336-7425
                   (letrec
                     (loop
                        (function i[int]
                          (funct-body utils/warnings.ml(180)<ghost>:7349-7392
                            (before utils/warnings.ml(180):7353-7392
                              (if (== i 0)
                                (before utils/warnings.ml(180):7367-7369 0a)
                                (before utils/warnings.ml(180):7375-7392
                                  (makeblock 0 (int,*) i
                                    (after utils/warnings.ml(180):7380-7392
                                      (apply loop (- i 1))))))))))
                     (before utils/warnings.ml(181):7401-7425
                       (after utils/warnings.ml(181):7401-7425
                         (apply loop last_warning_number)))))
                case int 1: (before utils/warnings.ml(182):7437-7439 0a)
                case int 2:
                 (before utils/warnings.ml(183):7451-7457 [0: 1 [0: 2 0a]])
                case int 3:
                 (before utils/warnings.ml(184):7469-7472 [0: 3 0a])
                case int 4:
                 (before utils/warnings.ml(185):7484-7487 [0: 4 0a])
                case int 5:
                 (before utils/warnings.ml(186):7499-7502 [0: 5 0a])
                case int 6: (before utils/warnings.ml(187):7514-7516 0a)
                case int 7: (before utils/warnings.ml(188):7528-7530 0a)
                case int 8: (before utils/warnings.ml(189):7542-7544 0a)
                case int 9: (before utils/warnings.ml(190):7556-7558 0a)
                case int 10:
                 (before utils/warnings.ml(191):7570-7602
                   [0:
                    32
                    [0:
                     33 [0: 34 [0: 35 [0: 36 [0: 37 [0: 38 [0: 39 0a]]]]]]]])
                case int 11:
                 (before utils/warnings.ml(192):7614-7617 [0: 6 0a])
                case int 12:
                 (before utils/warnings.ml(193):7629-7632 [0: 7 0a])
                case int 13: (before utils/warnings.ml(194):7644-7646 0a)
                case int 14: (before utils/warnings.ml(195):7658-7660 0a)
                case int 15:
                 (before utils/warnings.ml(196):7672-7675 [0: 8 0a])
                case int 16: (before utils/warnings.ml(197):7687-7689 0a)
                case int 17:
                 (before utils/warnings.ml(198):7701-7704 [0: 9 0a])
                case int 18:
                 (before utils/warnings.ml(199):7716-7720 [0: 10 0a])
                case int 19: (before utils/warnings.ml(200):7732-7734 0a)
                case int 20:
                 (before utils/warnings.ml(201):7746-7754 [0: 11 [0: 12 0a]])
                case int 21:
                 (before utils/warnings.ml(202):7766-7770 [0: 13 0a])
                case int 22: (before utils/warnings.ml(203):7782-7784 0a)
                case int 23:
                 (before utils/warnings.ml(204):7796-7844
                   [0:
                    14
                    [0:
                     15
                     [0:
                      16
                      [0:
                       17
                       [0:
                        18
                        [0:
                         19
                         [0: 20 [0: 21 [0: 22 [0: 23 [0: 24 [0: 30 0a]]]]]]]]]]]])
                case int 24:
                 (before utils/warnings.ml(205):7856-7860 [0: 26 0a])
                case int 25:
                 (before utils/warnings.ml(206):7872-7876 [0: 27 0a]))))))
     current =
       (makemutable 0
         (makeblock 0
           (after utils/warnings.ml(221):8167-8208
             (caml_make_vect (+ last_warning_number 1) 1a))
           (after utils/warnings.ml(222):8224-8266
             (caml_make_vect (+ last_warning_number 1) 0a))
           (makeblock 0
             (field 0 (field 38 (field 3 (field 11 (global Misc!))))) 0a)
           (makeblock 0
             (field 0 (field 38 (field 3 (field 11 (global Misc!))))) 1a)))
     disabled = (makemutable 0 0a)
     without_warnings =
       (function f
         (funct-body utils/warnings.ml(229)<ghost>:8468-8518
           (before utils/warnings.ml(230):8474-8518
             (after utils/warnings.ml(230):8474-8518
               (apply (field 10 (global Misc!))
                 (makeblock 0 (makeblock 0 disabled 1a) 0a) f)))))
     backup =
       (function param
         (funct-body utils/warnings.ml(232)<ghost>:8531-8544
           (before utils/warnings.ml(232):8536-8544 (field 0 current))))
     restore =
       (function x
         (funct-body utils/warnings.ml(234)<ghost>:8558-8574
           (before utils/warnings.ml(234):8562-8574
             (setfield_ptr 0 current x))))
     is_active =
       (function x
         (funct-body utils/warnings.ml(236)<ghost>:8590-8641
           (before utils/warnings.ml(237):8596-8641
             (&& (not (field 0 disabled))
               (after utils/warnings.ml(237):8613-8641
                 (array.get[int] (field 0 (field 0 current))
                   (after utils/warnings.ml(237):8632-8640 (apply number x))))))))
     is_error =
       (function x
         (funct-body utils/warnings.ml(239)<ghost>:8656-8706
           (before utils/warnings.ml(240):8662-8706
             (&& (not (field 0 disabled))
               (after utils/warnings.ml(240):8679-8706
                 (array.get[int] (field 1 (field 0 current))
                   (after utils/warnings.ml(240):8697-8705 (apply number x))))))))
     alert_is_active =
       (function param
         (funct-body utils/warnings.ml(242)<ghost>:8728-8842
           (let (kind =a (field 0 param))
             (before utils/warnings.ml(243):8742-8842
               (&& (not (field 0 disabled))
                 (let
                   (*match* = (field 2 (field 0 current))
                    pos =a (field 1 *match*)
                    set =a (field 0 *match*))
                   (before utils/warnings.ml(245):8801-8842
                     (==
                       (after utils/warnings.ml(245):8801-8836
                         (apply
                           (field 2
                             (field 38 (field 3 (field 11 (global Misc!)))))
                           kind set))
                       pos))))))))
     alert_is_error =
       (function param
         (funct-body utils/warnings.ml(247)<ghost>:8863-8983
           (let (kind =a (field 0 param))
             (before utils/warnings.ml(248):8877-8983
               (&& (not (field 0 disabled))
                 (let
                   (*match* = (field 3 (field 0 current))
                    pos =a (field 1 *match*)
                    set =a (field 0 *match*))
                   (before utils/warnings.ml(250):8942-8983
                     (==
                       (after utils/warnings.ml(250):8942-8977
                         (apply
                           (field 2
                             (field 38 (field 3 (field 11 (global Misc!)))))
                           kind set))
                       pos))))))))
     mk_lazy =
       (function f
         (funct-body utils/warnings.ml(252)<ghost>:8997-9221
           (before utils/warnings.ml(253):9003-9221
             (let
               (state =
                  (after utils/warnings.ml(253):9015-9024 (apply backup 0a)))
               (before utils/warnings.ml(254):9030-9221
                 (makemutable 246
                   (function param
                     (let
                       (prev =
                          (after utils/warnings.ml(256):9058-9067
                            (apply backup 0a)))
                       (before utils/warnings.ml(257):9077-9215
                         (seq
                           (after utils/warnings.ml(257):9077-9090
                             (apply restore state))
                           (before utils/warnings.ml(258):9098-9215
                             (try
                               (let
                                 (r =
                                    (after utils/warnings.ml(259):9118-9122
                                      (apply f 0a)))
                                 (before utils/warnings.ml(260):9134-9157
                                   (seq
                                     (after utils/warnings.ml(260):9134-9146
                                       (apply restore prev))
                                     (before utils/warnings.ml(261):9156-9157
                                       r))))
                              with exn
                               (before utils/warnings.ml(263):9184-9215
                                 (seq
                                   (after utils/warnings.ml(263):9184-9196
                                     (apply restore prev))
                                   (before utils/warnings.ml(264):9206-9215
                                     (reraise
                                       (after utils/warnings.ml(264):9212-9215
                                         exn)))))))))))))))))
     set_alert =
       (function error enable s
         (funct-body utils/warnings.ml(267)<ghost>:9237-9753
           (before utils/warnings.ml(268):9258-9753
             (let
               (upd =
                  (stringswitch s
                   case "all":
                    (before utils/warnings.ml(271):9308-9350
                      (makeblock 0
                        (field 0
                          (field 38 (field 3 (field 11 (global Misc!)))))
                        (not enable)))
                   default:
                    (let (s =a s)
                      (before utils/warnings.ml(273):9370-9631
                        (let
                          (*match* =
                             (if error
                               (before utils/warnings.ml(274):9411-9434
                                 (field 3 (field 0 current)))
                               (before utils/warnings.ml(274):9440-9457
                                 (field 2 (field 0 current))))
                           pos =a (field 1 *match*)
                           set =a (field 0 *match*))
                          (before utils/warnings.ml(276):9477-9631
                            (let
                              (f =
                                 (if (== enable pos)
                                   (before utils/warnings.ml(278):9526-9552
                                     (field 3
                                       (field 38
                                         (field 3 (field 11 (global Misc!))))))
                                   (before utils/warnings.ml(279):9568-9597
                                     (field 5
                                       (field 38
                                         (field 3 (field 11 (global Misc!))))))))
                              (before utils/warnings.ml(281):9617-9631
                                (makeblock 0
                                  (after utils/warnings.ml(281):9618-9625
                                    (apply f s set))
                                  pos)))))))))
               (before utils/warnings.ml(283):9639-9753
                 (if error
                   (before utils/warnings.ml(284):9657-9702
                     (setfield_ptr 0 current
                       (let (init = (field 0 current))
                         (makeblock 0 (field 0 init) (field 1 init)
                           (field 2 init) upd))))
                   (before utils/warnings.ml(286):9714-9753
                     (setfield_ptr 0 current
                       (let (init = (field 0 current))
                         (makeblock 0 (field 0 init) (field 1 init) upd
                           (field 3 init)))))))))))
     parse_alert_option =
       (function s
         (funct-body utils/warnings.ml(288)<ghost>:9778-10845
           (before utils/warnings.ml(289):9784-10845
             (let (n =[int] (string.length s))
               (before utils/warnings.ml(290):9813-10845
                 (let
                   (id_char =
                      (function param[int]
                        (funct-body utils/warnings.ml(290):9827-9910
                          (catch
                            (catch
                              (if (>= param 65)
                                (let (switcher =a (-91+ param))
                                  (if (isout 5 switcher)
                                    (if (>= switcher 32) (exit 18) (exit 17))
                                    (if (!= switcher 4) (exit 18) (exit 17))))
                                (if (>= param 48)
                                  (if (>= param 58) (exit 18) (exit 17))
                                  (if (!= param 39) (exit 18) (exit 17))))
                             with (18)
                              (before utils/warnings.ml(292):9905-9910 0a))
                           with (17)
                            (before utils/warnings.ml(291):9889-9893 1a)))))
                   (before utils/warnings.ml(294):9918-10845
                     (letrec
                       (parse_id
                          (function i[int] : int
                            (funct-body utils/warnings.ml(294)<ghost>:9935-9997
                              (before utils/warnings.ml(295):9943-9997
                                (if
                                  (&& (< i n)
                                    (after utils/warnings.ml(295):9955-9968
                                      (apply id_char
                                        (after utils/warnings.ml(295):9963-9968
                                          (string.get s i)))))
                                  (before utils/warnings.ml(295):9974-9990
                                    (after utils/warnings.ml(295):9974-9990
                                      (apply parse_id (+ i 1))))
                                  (before utils/warnings.ml(295):9996-9997 i))))))
                       (before utils/warnings.ml(297):10005-10845
                         (letrec
                           (scan
                              (function i[int]
                                (funct-body utils/warnings.ml(297)<ghost>:10018-10659
                                  (before utils/warnings.ml(298):10026-10659
                                    (if (== i n)
                                      (before utils/warnings.ml(298):10040-10042
                                        0a)
                                      (before utils/warnings.ml(299):10052-10659
                                        (if (== (+ i 1) n)
                                          (before utils/warnings.ml(299):10070-10121
                                            (raise
                                              (after utils/warnings.ml(299):10076-10121
                                                (makeblock 0
                                                  (field 7
                                                    (global Stdlib__arg!))
                                                  "Ill-formed list of alert settings"))))
                                          (before utils/warnings.ml(300):10131-10659
                                            (let
                                              (*match* =
                                                 (after utils/warnings.ml(300):10137-10142
                                                   (string.get s i))
                                               *match* =
                                                 (after utils/warnings.ml(300):10144-10151
                                                   (string.get s (+ i 1)))
                                               *match* = *match*
                                               *match* = *match*)
                                              (catch
                                                (if (>= *match* 46)
                                                  (if (!= *match* 64)
                                                    (exit 14)
                                                    (before utils/warnings.ml(306):10457-10594
                                                      (after utils/warnings.ml(306):10457-10594
                                                        (apply id
                                                          (function s
                                                            (funct-body utils/warnings.ml(306):10460-10574
                                                              (before utils/warnings.ml(307):10484-10573
                                                                (seq
                                                                  (after utils/warnings.ml(307):10484-10520
                                                                    (apply
                                                                    set_alert
                                                                    1a 1a s))
                                                                  (before utils/warnings.ml(308):10536-10573
                                                                    (after utils/warnings.ml(308):10536-10573
                                                                    (apply
                                                                    set_alert
                                                                    0a 1a s)))))))
                                                          (+ i 1)))))
                                                  (if (>= *match* 43)
                                                    (let
                                                      (switcher =a
                                                         (-43+ *match*))
                                                      (switch* switcher
                                                       case int 0:
                                                        (if (!= *match* 43)
                                                          (before utils/warnings.ml(302):10243-10291
                                                            (after utils/warnings.ml(302):10243-10291
                                                              (apply id
                                                                (after utils/warnings.ml(302):10246-10283
                                                                  (apply
                                                                    set_alert
                                                                    0a 1a))
                                                                (+ i 1))))
                                                          (before utils/warnings.ml(301):10177-10224
                                                            (after utils/warnings.ml(301):10177-10224
                                                              (apply id
                                                                (after utils/warnings.ml(301):10180-10216
                                                                  (apply
                                                                    set_alert
                                                                    1a 1a))
                                                                (+ i 2)))))
                                                       case int 1: (exit 14)
                                                       case int 2:
                                                        (if (!= *match* 45)
                                                          (before utils/warnings.ml(304):10379-10428
                                                            (after utils/warnings.ml(304):10379-10428
                                                              (apply id
                                                                (after utils/warnings.ml(304):10382-10420
                                                                  (apply
                                                                    set_alert
                                                                    0a 0a))
                                                                (+ i 1))))
                                                          (before utils/warnings.ml(303):10312-10360
                                                            (after utils/warnings.ml(303):10312-10360
                                                              (apply id
                                                                (after utils/warnings.ml(303):10315-10352
                                                                  (apply
                                                                    set_alert
                                                                    1a 0a))
                                                                (+ i 2)))))))
                                                    (exit 14)))
                                               with (14)
                                                (before utils/warnings.ml(310):10608-10659
                                                  (raise
                                                    (after utils/warnings.ml(310):10614-10659
                                                      (makeblock 0
                                                        (field 7
                                                          (global Stdlib__arg!))
                                                        "Ill-formed list of alert settings")))))))))))))
                             id
                               (function f i[int]
                                 (funct-body utils/warnings.ml(311)<ghost>:10669-10831
                                   (before utils/warnings.ml(312):10679-10831
                                     (let
                                       (j =[int]
                                          (after utils/warnings.ml(312):10687-10697
                                            (apply parse_id i)))
                                       (before utils/warnings.ml(313):10705-10831
                                         (seq
                                           (if (== j i)
                                             (before utils/warnings.ml(313):10719-10770
                                               (raise
                                                 (after utils/warnings.ml(313):10725-10770
                                                   (makeblock 0
                                                     (field 7
                                                       (global Stdlib__arg!))
                                                     "Ill-formed list of alert settings"))))
                                             0a)
                                           (before utils/warnings.ml(314):10776-10831
                                             (let
                                               (id =
                                                  (after utils/warnings.ml(314):10785-10807
                                                    (apply
                                                      (field 3
                                                        (global Stdlib__string!))
                                                      s i (- j i))))
                                               (before utils/warnings.ml(315):10815-10831
                                                 (seq
                                                   (after utils/warnings.ml(315):10815-10819
                                                     (apply f id))
                                                   (before utils/warnings.ml(316):10825-10831
                                                     (after utils/warnings.ml(316):10825-10831
                                                       (apply scan j))))))))))))))
                           (before utils/warnings.ml(318):10839-10845
                             (after utils/warnings.ml(318):10839-10845
                               (apply scan 0)))))))))))))
     parse_opt =
       (function error active errflag s
         (funct-body utils/warnings.ml(320)<ghost>:10861-12748
           (before utils/warnings.ml(321):10888-12748
             (let
               (flags =
                  (if errflag
                    (before utils/warnings.ml(321):10916-10921 error)
                    (before utils/warnings.ml(321):10927-10933 active)))
               (before utils/warnings.ml(322):10939-12748
                 (let
                   (set =
                      (function i[int]
                        (funct-body utils/warnings.ml(322)<ghost>:10947-11046
                          (before utils/warnings.ml(323):10955-11046
                            (if (== i 3)
                              (before utils/warnings.ml(323):10969-11019
                                (after utils/warnings.ml(323):10969-11019
                                  (apply set_alert errflag 1a "deprecated")))
                              (before utils/warnings.ml(324):11029-11046
                                (after utils/warnings.ml(324):11029-11046
                                  (array.set[int] flags i 1a))))))))
                   (before utils/warnings.ml(326):11054-12748
                     (let
                       (clear =
                          (function i[int]
                            (funct-body utils/warnings.ml(326)<ghost>:11064-11165
                              (before utils/warnings.ml(327):11072-11165
                                (if (== i 3)
                                  (before utils/warnings.ml(327):11086-11137
                                    (after utils/warnings.ml(327):11086-11137
                                      (apply set_alert errflag 0a
                                        "deprecated")))
                                  (before utils/warnings.ml(328):11147-11165
                                    (after utils/warnings.ml(328):11147-11165
                                      (array.set[int] flags i 0a))))))))
                       (before utils/warnings.ml(330):11173-12748
                         (let
                           (set_all =
                              (function i[int]
                                (funct-body utils/warnings.ml(330)<ghost>:11185-11403
                                  (before utils/warnings.ml(331):11193-11403
                                    (if (== i 3)
                                      (before utils/warnings.ml(331):11207-11330
                                        (seq
                                          (after utils/warnings.ml(332):11219-11267
                                            (apply set_alert 0a 1a
                                              "deprecated"))
                                          (before utils/warnings.ml(333):11275-11322
                                            (after utils/warnings.ml(333):11275-11322
                                              (apply set_alert 1a 1a
                                                "deprecated")))))
                                      (before utils/warnings.ml(335):11340-11403
                                        (seq
                                          (after utils/warnings.ml(336):11352-11370
                                            (array.set[int] active i 1a))
                                          (before utils/warnings.ml(337):11378-11395
                                            (after utils/warnings.ml(337):11378-11395
                                              (array.set[int] error i 1a))))))))))
                           (before utils/warnings.ml(340):11411-12748
                             (let
                               (error =
                                  (function param
                                    (funct-body utils/warnings.ml(340)<ghost>:11421-11471
                                      (before utils/warnings.ml(340):11426-11471
                                        (raise
                                          (after utils/warnings.ml(340):11432-11471
                                            (makeblock 0
                                              (field 7 (global Stdlib__arg!))
                                              "Ill-formed list of warnings")))))))
                               (before utils/warnings.ml(341):11477-12748
                                 (letrec
                                   (get_num
                                      (function n[int] i[int]
                                        (funct-body utils/warnings.ml(341)<ghost>:11493-11655
                                          (before utils/warnings.ml(342):11503-11655
                                            (if (>= i (string.length s))
                                              (before utils/warnings.ml(342):11532-11536
                                                (makeblock 0 (int,int) i n))
                                              (before utils/warnings.ml(343):11546-11655
                                                (let
                                                  (*match* =
                                                     (after utils/warnings.ml(343):11552-11557
                                                       (string.get s i))
                                                   switcher =a (-48+ *match*))
                                                  (if (isout 9 switcher)
                                                    (before utils/warnings.ml(345):11651-11655
                                                      (makeblock 0 (int,int)
                                                        i n))
                                                    (before utils/warnings.ml(344):11581-11639
                                                      (after utils/warnings.ml(344):11581-11639
                                                        (apply get_num
                                                          (-
                                                            (+ (* 10 n)
                                                              (after utils/warnings.ml(344):11609-11614
                                                                (string.get s
                                                                  i)))
                                                            '0')
                                                          (+ i 1))))))))))))
                                   (before utils/warnings.ml(347):11663-12748
                                     (let
                                       (get_range =
                                          (function i[int]
                                            (funct-body utils/warnings.ml(347)<ghost>:11677-11893
                                              (before utils/warnings.ml(348):11685-11893
                                                (let
                                                  (*match* =
                                                     (after utils/warnings.ml(348):11697-11708
                                                       (apply get_num 0 i))
                                                   n1 =a (field 1 *match*)
                                                   i =a (field 0 *match*))
                                                  (before utils/warnings.ml(349):11716-11893
                                                    (if
                                                      (&&
                                                        (< (+ i 2)
                                                          (string.length s))
                                                        (&&
                                                          (==
                                                            (after utils/warnings.ml(349):11746-11751
                                                              (string.get s
                                                                i))
                                                            '.')
                                                          (==
                                                            (after utils/warnings.ml(349):11761-11770
                                                              (string.get s
                                                                (+ i 1)))
                                                            '.')))
                                                      (before utils/warnings.ml(350):11788-11868
                                                        (let
                                                          (*match* =
                                                             (after utils/warnings.ml(350):11800-11817
                                                               (apply get_num
                                                                 0 (+ i 2)))
                                                           n2 =a
                                                             (field 1
                                                               *match*)
                                                           i =a
                                                             (field 0
                                                               *match*))
                                                          (before utils/warnings.ml(351):11827-11868
                                                            (seq
                                                              (if (< n2 n1)
                                                                (before utils/warnings.ml(351):11843-11851
                                                                  (after utils/warnings.ml(351):11843-11851
                                                                    (apply
                                                                    error 0a)))
                                                                0a)
                                                              (before utils/warnings.ml(352):11859-11868
                                                                (makeblock 0 (int,int,int)
                                                                  i n1 n2))))))
                                                      (before utils/warnings.ml(354):11884-11893
                                                        (makeblock 0 (int,int,int)
                                                          i n1 n1)))))))))
                                       (before utils/warnings.ml(356):11901-12748
                                         (letrec
                                           (loop
                                              (function i[int]
                                                (funct-body utils/warnings.ml(356)<ghost>:11914-12297
                                                  (before utils/warnings.ml(357):11922-12297
                                                    (if
                                                      (>= i
                                                        (string.length s))
                                                      (before utils/warnings.ml(357):11951-11953
                                                        0a)
                                                      (before utils/warnings.ml(358):11963-12297
                                                        (let
                                                          (*match* =
                                                             (after utils/warnings.ml(358):11969-11974
                                                               (string.get s
                                                                 i)))
                                                          (catch
                                                            (if
                                                              (>= *match* 65)
                                                              (if
                                                                (>= *match*
                                                                  97)
                                                                (if
                                                                  (>= *match*
                                                                    123)
                                                                  (exit 21)
                                                                  (before utils/warnings.ml(363):12105-12154
                                                                    (seq
                                                                    (after utils/warnings.ml(363):12105-12135
                                                                    (apply
                                                                    (field 14
                                                                    (global Stdlib__list!))
                                                                    clear
                                                                    (after utils/warnings.ml(363):12121-12135
                                                                    (apply
                                                                    letter
                                                                    (after utils/warnings.ml(363):12129-12134
                                                                    (string.get
                                                                    s i))))))
                                                                    (before utils/warnings.ml(364):12144-12154
                                                                    (after utils/warnings.ml(364):12144-12154
                                                                    (apply
                                                                    loop
                                                                    (+ i 1)))))))
                                                                (if
                                                                  (>= *match*
                                                                    91)
                                                                  (exit 21)
                                                                  (before utils/warnings.ml(360):12007-12077
                                                                    (seq
                                                                    (after utils/warnings.ml(360):12007-12058
                                                                    (apply
                                                                    (field 14
                                                                    (global Stdlib__list!))
                                                                    set
                                                                    (after utils/warnings.ml(360):12021-12058
                                                                    (apply
                                                                    letter
                                                                    (after utils/warnings.ml(360):12029-12057
                                                                    (apply
                                                                    (field 4
                                                                    (global Stdlib__char!))
                                                                    (after utils/warnings.ml(360):12051-12056
                                                                    (string.get
                                                                    s i))))))))
                                                                    (before utils/warnings.ml(361):12067-12077
                                                                    (after utils/warnings.ml(361):12067-12077
                                                                    (apply
                                                                    loop
                                                                    (+ i 1))))))))
                                                              (if
                                                                (>= *match*
                                                                  46)
                                                                (if
                                                                  (>= *match*
                                                                    64)
                                                                  (before utils/warnings.ml(367):12248-12277
                                                                    (after utils/warnings.ml(367):12248-12277
                                                                    (apply
                                                                    loop_letter_num
                                                                    set_all
                                                                    (+ i 1))))
                                                                  (exit 21))
                                                                (if
                                                                  (>= *match*
                                                                    43)
                                                                  (let
                                                                    (switcher =a
                                                                    (-43+
                                                                    *match*))
                                                                    (switch* switcher
                                                                    case int 0:
                                                                    (before utils/warnings.ml(365):12168-12193
                                                                    (after utils/warnings.ml(365):12168-12193
                                                                    (apply
                                                                    loop_letter_num
                                                                    set
                                                                    (+ i 1))))
                                                                    case int 1:
                                                                    (exit 21)
                                                                    case int 2:
                                                                    (before utils/warnings.ml(366):12207-12234
                                                                    (after utils/warnings.ml(366):12207-12234
                                                                    (apply
                                                                    loop_letter_num
                                                                    clear
                                                                    (+ i 1))))))
                                                                  (exit 21))))
                                                           with (21)
                                                            (before utils/warnings.ml(368):12289-12297
                                                              (after utils/warnings.ml(368):12289-12297
                                                                (apply error
                                                                  0a))))))))))
                                             loop_letter_num
                                               (function myset i[int]
                                                 (funct-body utils/warnings.ml(369)<ghost>:12320-12734
                                                   (before utils/warnings.ml(370):12334-12734
                                                     (if
                                                       (>= i
                                                         (string.length s))
                                                       (before utils/warnings.ml(370):12363-12371
                                                         (after utils/warnings.ml(370):12363-12371
                                                           (apply error 0a)))
                                                       (before utils/warnings.ml(371):12381-12734
                                                         (let
                                                           (*match* =
                                                              (after utils/warnings.ml(371):12387-12392
                                                                (string.get s
                                                                  i)))
                                                           (catch
                                                             (if
                                                               (>= *match*
                                                                 65)
                                                               (if
                                                                 (>= *match*
                                                                   97)
                                                                 (if
                                                                   (>=
                                                                    *match*
                                                                    123)
                                                                   (exit 28)
                                                                   (before utils/warnings.ml(380):12665-12714
                                                                    (seq
                                                                    (after utils/warnings.ml(380):12665-12695
                                                                    (apply
                                                                    (field 14
                                                                    (global Stdlib__list!))
                                                                    myset
                                                                    (after utils/warnings.ml(380):12681-12695
                                                                    (apply
                                                                    letter
                                                                    (after utils/warnings.ml(380):12689-12694
                                                                    (string.get
                                                                    s i))))))
                                                                    (before utils/warnings.ml(381):12704-12714
                                                                    (after utils/warnings.ml(381):12704-12714
                                                                    (apply
                                                                    loop
                                                                    (+ i 1)))))))
                                                                 (if
                                                                   (>=
                                                                    *match*
                                                                    91)
                                                                   (exit 28)
                                                                   (before utils/warnings.ml(377):12565-12637
                                                                    (seq
                                                                    (after utils/warnings.ml(377):12565-12618
                                                                    (apply
                                                                    (field 14
                                                                    (global Stdlib__list!))
                                                                    myset
                                                                    (after utils/warnings.ml(377):12581-12618
                                                                    (apply
                                                                    letter
                                                                    (after utils/warnings.ml(377):12589-12617
                                                                    (apply
                                                                    (field 4
                                                                    (global Stdlib__char!))
                                                                    (after utils/warnings.ml(377):12611-12616
                                                                    (string.get
                                                                    s i))))))))
                                                                    (before utils/warnings.ml(378):12627-12637
                                                                    (after utils/warnings.ml(378):12627-12637
                                                                    (apply
                                                                    loop
                                                                    (+ i 1))))))))
                                                               (let
                                                                 (switcher =a
                                                                    (-48+
                                                                    *match*))
                                                                 (if
                                                                   (isout 9
                                                                    switcher)
                                                                   (exit 28)
                                                                   (before utils/warnings.ml(373):12426-12537
                                                                    (let
                                                                    (*match* =
                                                                    (after utils/warnings.ml(373):12442-12453
                                                                    (apply
                                                                    get_range
                                                                    i))
                                                                    n2 =a
                                                                    (field 2
                                                                    *match*)
                                                                    n1 =a
                                                                    (field 1
                                                                    *match*)
                                                                    i =a
                                                                    (field 0
                                                                    *match*))
                                                                    (before utils/warnings.ml(374):12465-12537
                                                                    (seq
                                                                    (for n n1
                                                                    to
                                                                    (after utils/warnings.ml(374):12479-12505
                                                                    (apply
                                                                    (field 15
                                                                    (global Stdlib!))
                                                                    n2
                                                                    last_warning_number))
                                                                    (before utils/warnings.ml(374):12509-12516
                                                                    (after utils/warnings.ml(374):12509-12516
                                                                    (apply
                                                                    myset n))))
                                                                    (before utils/warnings.ml(375):12531-12537
                                                                    (after utils/warnings.ml(375):12531-12537
                                                                    (apply
                                                                    loop i))))))))))
                                                            with (28)
                                                             (before utils/warnings.ml(382):12726-12734
                                                               (after utils/warnings.ml(382):12726-12734
                                                                 (apply error
                                                                   0a)))))))))))
                                           (before utils/warnings.ml(384):12742-12748
                                             (after utils/warnings.ml(384):12742-12748
                                               (apply loop 0)))))))))))))))))))))
     parse_options =
       (function errflag s
         (funct-body utils/warnings.ml(387)<ghost>:12771-12955
           (before utils/warnings.ml(388):12785-12955
             (let
               (error =
                  (after utils/warnings.ml(388):12797-12824
                    (apply (field 7 (global Stdlib__array!))
                      (field 1 (field 0 current)))))
               (before utils/warnings.ml(389):12830-12955
                 (let
                   (active =
                      (after utils/warnings.ml(389):12843-12871
                        (apply (field 7 (global Stdlib__array!))
                          (field 0 (field 0 current)))))
                   (before utils/warnings.ml(390):12877-12955
                     (seq
                       (after utils/warnings.ml(390):12877-12909
                         (apply parse_opt error active errflag s))
                       (before utils/warnings.ml(391):12913-12955
                         (setfield_ptr 0 current
                           (let (init = (field 0 current))
                             (makeblock 0 active error (field 2 init)
                               (field 3 init)))))))))))))
     defaults_w = "+a-4-6-7-9-27-29-32..42-44-45-48-50-60-66"
     defaults_warn_error = "-a+31"
     *match* =
       (after utils/warnings.ml(397):13137-13167
         (apply parse_options 0a defaults_w))
     *match* =
       (after utils/warnings.ml(398):13179-13217
         (apply parse_options 1a defaults_warn_error))
     ref_manual_explanation =
       (function param
         (funct-body utils/warnings.ml(400)<ghost>:13248-13497
           (before utils/warnings.ml(403):13374-13497
             (let
               (section = 5
                chapter = 9
                section =[int] section
                chapter =[int] chapter)
               (before utils/warnings.ml(404):13438-13497
                 (after utils/warnings.ml(404):13438-13497
                   (apply (field 3 (global Stdlib__printf!))
                     [0:
                      [11:
                       "(See manual section "
                       [4: 0a 0a 0a [12: '.' [4: 0a 0a 0a [12: ')' 0a]]]]]
                      "(See manual section %d.%d)"]
                     chapter section)))))))
     message =
       (function param
         (funct-body utils/warnings.ml(406):13513-23687
           (catch
             (switch* param
              case int 0:
               (before utils/warnings.ml(408):13549-13666
                 "this `(*' is the start of a comment.\nHint: Did you forget spaces when writing the infix operator `( * )'?")
              case int 1:
               (before utils/warnings.ml(410):13690-13725
                 "this is not the end of a comment.")
              case int 2:
               (before utils/warnings.ml(417):13973-14056
                 "this function application is partial,\nmaybe some arguments are missing.")
              case int 3:
               (before utils/warnings.ml(440):15015-15055
                 "this expression should have type unit.")
              case int 4:
               (before utils/warnings.ml(441):15076-15104
                 "this match case is unused.")
              case int 5:
               (before utils/warnings.ml(442):15125-15154
                 "this sub-pattern is unused.")
              case int 6:
               (before utils/warnings.ml(452):15675-15712
                 "illegal backslash escape in string.")
              case int 7:
               (before utils/warnings.ml(456):15886-15928
                 "this optional argument cannot be erased.")
              case int 8:
               (before utils/warnings.ml(460):16134-16183
                 "this argument will not be used by the function.")
              case int 9:
               (before utils/warnings.ml(462):16220-16276
                 "this statement never returns (or has an unsound type.)")
              case int 10:
               (before utils/warnings.ml(465):16334-16428
                 "all the fields are explicitly listed in this record:\nthe 'with' clause is useless.")
              case int 11:
               (before utils/warnings.ml(470):16573-16675
                 "this pattern-matching is not exhaustive.\nAll clauses in this pattern-matching are guarded.")
              case int 12:
               (before utils/warnings.ml(474):16791-16853
                 "wildcard pattern given as argument to a constant constructor")
              case int 13:
               (before utils/warnings.ml(476):16880-16944
                 "unescaped end-of-line in a string constant (non-portable code)")
              case int 14:
               (before utils/warnings.ml(515):18603-18621 "unused rec flag.")
              case int 15:
               (before utils/warnings.ml(567):20952-20986
                 (after utils/warnings.ml(567):20952-20986
                   (apply (field 3 (global Stdlib__printf!))
                     [0: [11: "expected tailcall" 0a] "expected tailcall"])))
              case int 16:
               (before utils/warnings.ml(569):21024-21240
                 (after utils/warnings.ml(569):21024-21240
                   (apply (field 3 (global Stdlib__printf!))
                     [0:
                      [11:
                       "Code should not depend on the actual values of\nthis constructor's arguments. They are only for information\nand may change in future versions. "
                       [16: 0a]]
                      "Code should not depend on the actual values of\nthis constructor's arguments. They are only for information\nand may change in future versions. %t"]
                     ref_manual_explanation)))
              case int 17:
               (before utils/warnings.ml(574):21271-21372
                 "this match case is unreachable.\nConsider replacing it with a refutation case '<pat> -> .'")
              case int 18:
               (before utils/warnings.ml(601):22345-22516
                 "A potential assignment to a non-mutable value was detected \nin this source file.  Such assignments may generate incorrect code \nwhen using Flambda.")
              case int 19:
               (before utils/warnings.ml(612):22921-22984
                 "Type constraints do not apply to GADT cases of variant types.")
              case int 20:
               (before utils/warnings.ml(621):23408-23473
                 "option -unsafe used with a preprocessor returning a syntax tree")
              case tag 0:
               (let (s =a (field 0 param))
                 (stringswitch s
                  case "":
                   (before utils/warnings.ml(412):13756-13791
                     "this pattern-matching is fragile.")
                  default:
                   (before utils/warnings.ml(414):13821-13939
                     (after utils/warnings.ml(414):13821-13939
                       (apply (field 27 (global Stdlib!))
                         "this pattern-matching is fragile.\nIt will remain exhaustive when constructors are added to type "
                         (after utils/warnings.ml(415):13932-13939
                           (apply (field 27 (global Stdlib!)) s ".")))))))
              case tag 1:
               (let (ls =a (field 0 param))
                 (if ls
                   (let (*match* =a (field 1 ls))
                     (if *match*
                       (before utils/warnings.ml(423):14223-14318
                         (after utils/warnings.ml(423):14223-14318
                           (apply (field 27 (global Stdlib!)) "labels "
                             (after utils/warnings.ml(423):14235-14318
                               (apply (field 27 (global Stdlib!))
                                 (after utils/warnings.ml(423):14235-14256
                                   (apply (field 6 (global Stdlib__string!))
                                     ", " ls))
                                 " were omitted in the application of this function.")))))
                       (let (l =a (field 0 ls))
                         (before utils/warnings.ml(421):14126-14192
                           (after utils/warnings.ml(421):14126-14192
                             (apply (field 27 (global Stdlib!)) "label "
                               (after utils/warnings.ml(421):14137-14192
                                 (apply (field 27 (global Stdlib!)) l
                                   " was omitted in the application of this function."))))))))
                   (before utils/warnings.ml(419):14082-14094
                     (raise
                       (after utils/warnings.ml(419):14082-14094
                         (makeblock 0 (global Assert_failure!)
                           [0: "utils/warnings.ml" 419 25]))))))
              case tag 2:
               (let (*match* =a (field 0 param))
                 (if *match*
                   (let (slist =a (field 1 *match*) lab =a (field 0 *match*))
                     (if slist
                       (let (cname =a lab)
                         (before utils/warnings.ml(428):14440-14557
                           (after utils/warnings.ml(428):14440-14557
                             (apply (field 6 (global Stdlib__string!)) " "
                               (makeblock 0
                                 "the following methods are overridden by the class"
                                 (makeblock 0 cname
                                   (makeblock 0 ":\n " slist)))))))
                       (before utils/warnings.ml(426):14354-14393
                         (after utils/warnings.ml(426):14354-14393
                           (apply (field 27 (global Stdlib!)) "the method "
                             (after utils/warnings.ml(426):14370-14393
                               (apply (field 27 (global Stdlib!)) lab
                                 " is overridden.")))))))
                   (before utils/warnings.ml(431):14584-14596
                     (raise
                       (after utils/warnings.ml(431):14584-14596
                         (makeblock 0 (global Assert_failure!)
                           [0: "utils/warnings.ml" 431 26]))))))
              case tag 3:
               (let (s =a (field 0 param))
                 (stringswitch s
                  case "":
                   (before utils/warnings.ml(432):14621-14663
                     "this pattern-matching is not exhaustive.")
                  default:
                   (before utils/warnings.ml(434):14693-14801
                     (after utils/warnings.ml(434):14693-14801
                       (apply (field 27 (global Stdlib!))
                         "this pattern-matching is not exhaustive.\nHere is an example of a case that is not matched:\n"
                         s)))))
              case tag 4:
               (let (s =a (field 0 param))
                 (before utils/warnings.ml(437):14843-14986
                   (after utils/warnings.ml(437):14843-14986
                     (apply (field 27 (global Stdlib!))
                       "the following labels are not bound in this record pattern:\n"
                       (after utils/warnings.ml(437):14908-14986
                         (apply (field 27 (global Stdlib!)) s
                           "\nEither bind these labels explicitly or add '; _' to the pattern."))))))
              case tag 5:
               (let (*match* =a (field 0 param))
                 (if *match*
                   (let (slist =a (field 1 *match*) lab =a (field 0 *match*))
                     (if slist
                       (let (cname =a lab)
                         (before utils/warnings.ml(447):15390-15599
                           (after utils/warnings.ml(447):15390-15599
                             (apply (field 27 (global Stdlib!))
                               (after utils/warnings.ml(447):15390-15518
                                 (apply (field 6 (global Stdlib__string!))
                                   " "
                                   (makeblock 0
                                     "the following instance variables are overridden by the class"
                                     (makeblock 0 cname
                                       (makeblock 0 ":\n " slist)))))
                               "\nThe behaviour changed in ocaml 3.10 (previous behaviour was hiding.)"))))
                       (before utils/warnings.ml(444):15201-15332
                         (after utils/warnings.ml(444):15201-15332
                           (apply (field 27 (global Stdlib!))
                             "the instance variable "
                             (after utils/warnings.ml(444):15228-15332
                               (apply (field 27 (global Stdlib!)) lab
                                 (after utils/warnings.ml(444):15234-15332
                                   (apply (field 27 (global Stdlib!))
                                     " is overridden.\n"
                                     "The behaviour changed in ocaml 3.10 (previous behaviour was hiding.)")))))))))
                   (before utils/warnings.ml(451):15637-15649
                     (raise
                       (after utils/warnings.ml(451):15637-15649
                         (makeblock 0 (global Assert_failure!)
                           [0: "utils/warnings.ml" 451 37]))))))
              case tag 6:
               (let (l =a (field 0 param))
                 (before utils/warnings.ml(454):15752-15849
                   (after utils/warnings.ml(454):15752-15849
                     (apply (field 27 (global Stdlib!))
                       "the following private methods were made public implicitly:\n "
                       (after utils/warnings.ml(455):15824-15849
                         (apply (field 27 (global Stdlib!))
                           (after utils/warnings.ml(455):15824-15843
                             (apply (field 6 (global Stdlib__string!)) " " l))
                           "."))))))
              case tag 7:
               (let (m =a (field 0 param))
                 (before utils/warnings.ml(457):15964-16007
                   (after utils/warnings.ml(457):15964-16007
                     (apply (field 27 (global Stdlib!)) "the virtual method "
                       (after utils/warnings.ml(457):15986-16007
                         (apply (field 27 (global Stdlib!)) m
                           " is not declared."))))))
              case tag 8:
               (let (s =a (field 0 param))
                 (before utils/warnings.ml(458):16031-16053
                   (after utils/warnings.ml(458):16031-16053
                     (apply (field 27 (global Stdlib!)) s
                       " is not principal."))))
              case tag 9:
               (let (s =a (field 0 param))
                 (before utils/warnings.ml(459):16084-16110
                   (after utils/warnings.ml(459):16084-16110
                     (apply (field 27 (global Stdlib!)) s
                       " without principality."))))
              case tag 10:
               (let (s =a (field 0 param))
                 (before utils/warnings.ml(463):16299-16300 s))
              case tag 11:
               (let (modname =a (field 0 param))
                 (before utils/warnings.ml(468):16468-16539
                   (after utils/warnings.ml(468):16468-16539
                     (apply (field 27 (global Stdlib!))
                       "bad source file name: \""
                       (after utils/warnings.ml(468):16497-16539
                         (apply (field 27 (global Stdlib!)) modname
                           "\" is not a valid module name."))))))
              case tag 12: (exit 49)
              case tag 13: (exit 49)
              case tag 14:
               (let
                 (tc2 =a (field 3 param)
                  tc1 =a (field 2 param)
                  cname =a (field 1 param)
                  kind =a (field 0 param))
                 (before utils/warnings.ml(478):17004-17093
                   (after utils/warnings.ml(478):17004-17093
                     (apply (field 3 (global Stdlib__printf!))
                       [0:
                        [11:
                         "the "
                         [2:
                          0a
                          [12:
                           ' '
                           [2:
                            0a
                            [11:
                             " is defined in both types "
                             [2: 0a [11: " and " [2: 0a [12: '.' 0a]]]]]]]]]
                        "the %s %s is defined in both types %s and %s."]
                       kind cname tc1 tc2))))
              case tag 15:
               (let
                 (file2 =a (field 2 param)
                  file1 =a (field 1 param)
                  modname =a (field 0 param))
                 (before utils/warnings.ml(481):17150-17248
                   (after utils/warnings.ml(481):17150-17248
                     (apply (field 3 (global Stdlib__printf!))
                       [0:
                        [11:
                         "files "
                         [2:
                          0a
                          [11:
                           " and "
                           [2:
                            0a
                            [11: " both define a module named " [2: 0a 0a]]]]]]
                        "files %s and %s both define a module named %s"]
                       file1 file2 modname))))
              case tag 16:
               (let (v =a (field 0 param))
                 (before utils/warnings.ml(484):17283-17308
                   (after utils/warnings.ml(484):17283-17308
                     (apply (field 27 (global Stdlib!)) "unused value "
                       (after utils/warnings.ml(484):17301-17308
                         (apply (field 27 (global Stdlib!)) v "."))))))
              case tag 17:
               (let (s =a (field 0 param))
                 (before utils/warnings.ml(485):17330-17354
                   (after utils/warnings.ml(485):17330-17354
                     (apply (field 27 (global Stdlib!)) "unused open "
                       (after utils/warnings.ml(485):17347-17354
                         (apply (field 27 (global Stdlib!)) s "."))))))
              case tag 18:
               (let (s =a (field 0 param))
                 (before utils/warnings.ml(487):17440-17464
                   (after utils/warnings.ml(487):17440-17464
                     (apply (field 27 (global Stdlib!)) "unused type "
                       (after utils/warnings.ml(487):17457-17464
                         (apply (field 27 (global Stdlib!)) s "."))))))
              case tag 19:
               (let (s =a (field 0 param))
                 (before utils/warnings.ml(488):17491-17525
                   (after utils/warnings.ml(488):17491-17525
                     (apply (field 27 (global Stdlib!))
                       "unused for-loop index "
                       (after utils/warnings.ml(488):17518-17525
                         (apply (field 27 (global Stdlib!)) s "."))))))
              case tag 20:
               (let (s =a (field 0 param))
                 (before utils/warnings.ml(489):17551-17588
                   (after utils/warnings.ml(489):17551-17588
                     (apply (field 27 (global Stdlib!))
                       "unused ancestor variable "
                       (after utils/warnings.ml(489):17581-17588
                         (apply (field 27 (global Stdlib!)) s "."))))))
              case tag 21:
               (let (*match* =a (field 1 param) s =a (field 0 param))
                 (if *match*
                   (let (s =a s)
                     (before utils/warnings.ml(492):17710-17830
                       (after utils/warnings.ml(492):17710-17830
                         (apply (field 27 (global Stdlib!)) "constructor "
                           (after utils/warnings.ml(492):17727-17830
                             (apply (field 27 (global Stdlib!)) s
                               " is never used to build values.\n(However, this constructor appears in patterns.)"))))))
                   (let (*match* =a (field 2 param))
                     (if *match*
                       (let (s =a s)
                         (before utils/warnings.ml(496):17880-17991
                           (after utils/warnings.ml(496):17880-17991
                             (apply (field 27 (global Stdlib!))
                               "constructor "
                               (after utils/warnings.ml(496):17897-17991
                                 (apply (field 27 (global Stdlib!)) s
                                   " is never used to build values.\nIts type is exported as a private type."))))))
                       (before utils/warnings.ml(490):17633-17664
                         (after utils/warnings.ml(490):17633-17664
                           (apply (field 27 (global Stdlib!))
                             "unused constructor "
                             (after utils/warnings.ml(490):17657-17664
                               (apply (field 27 (global Stdlib!)) s ".")))))))))
              case tag 22:
               (let
                 (cu_privatize =a (field 3 param)
                  cu_pattern =a (field 2 param)
                  is_exception =a (field 1 param)
                  s =a (field 0 param))
                 (before utils/warnings.ml(500):18065-18573
                   (let
                     (kind =
                        (if is_exception
                          (before utils/warnings.ml(501):18104-18115
                            "exception")
                          (before utils/warnings.ml(501):18121-18144
                            "extension constructor")))
                     (before utils/warnings.ml(502):18153-18573
                       (let
                         (name =
                            (after utils/warnings.ml(502):18164-18178
                              (apply (field 27 (global Stdlib!)) kind
                                (after utils/warnings.ml(502):18171-18178
                                  (apply (field 27 (global Stdlib!)) " " s)))))
                         (before utils/warnings.ml(503):18187-18573
                           (let (*match* = cu_pattern *match* = cu_privatize)
                             (if *match*
                               (before utils/warnings.ml(506):18301-18414
                                 (after utils/warnings.ml(506):18301-18414
                                   (apply (field 27 (global Stdlib!)) name
                                     " is never used to build values.\n(However, this constructor appears in patterns.)")))
                               (if *match*
                                 (before utils/warnings.ml(510):18449-18564
                                   (after utils/warnings.ml(510):18449-18564
                                     (apply (field 27 (global Stdlib!)) name
                                       " is never used to build values.\nIt is exported or rebound as a private extension.")))
                                 (before utils/warnings.ml(504):18254-18270
                                   (after utils/warnings.ml(504):18254-18270
                                     (apply (field 27 (global Stdlib!))
                                       "unused " name))))))))))))
              case tag 23:
               (let (slist =a (field 1 param) ty =a (field 0 param))
                 (catch
                   (if slist
                     (let (*match* =a (field 1 slist))
                       (if *match* (exit 47)
                         (let (*match* =a (field 2 param))
                           (if *match* (exit 47)
                             (let (nm =a (field 0 slist))
                               (before utils/warnings.ml(517):18671-18825
                                 (after utils/warnings.ml(517):18671-18825
                                   (apply (field 27 (global Stdlib!)) nm
                                     (after utils/warnings.ml(517):18676-18825
                                       (apply (field 27 (global Stdlib!))
                                         " was selected from type "
                                         (after utils/warnings.ml(517):18705-18825
                                           (apply (field 27 (global Stdlib!))
                                             ty
                                             ".\nIt is not visible in the current scope, and will not \nbe selected if the type becomes unknown."))))))))))))
                     (exit 47))
                  with (47)
                   (let (*match* =a (field 2 param))
                     (if *match*
                       (let (ty =a ty)
                         (before utils/warnings.ml(522):18927-19131
                           (after utils/warnings.ml(522):18927-19131
                             (apply (field 27 (global Stdlib!))
                               "this record of type "
                               (after utils/warnings.ml(522):18951-19131
                                 (apply (field 27 (global Stdlib!)) ty
                                   (after utils/warnings.ml(522):18955-19131
                                     (apply (field 27 (global Stdlib!))
                                       " contains fields that are \nnot visible in the current scope: "
                                       (after utils/warnings.ml(524):19037-19131
                                         (apply (field 27 (global Stdlib!))
                                           (after utils/warnings.ml(524):19037-19060
                                             (apply
                                               (field 6
                                                 (global Stdlib__string!))
                                               " " slist))
                                           ".\nThey will not be selected if the type becomes unknown."))))))))))
                       (before utils/warnings.ml(520):18865-18877
                         (raise
                           (after utils/warnings.ml(520):18865-18877
                             (makeblock 0 (global Assert_failure!)
                               [0: "utils/warnings.ml" 520 39]))))))))
              case tag 24:
               (let (_slist =a (field 0 param))
                 (catch
                   (if _slist
                     (let (*match* =a (field 1 _slist))
                       (if *match* (exit 48)
                         (let (*match* =a (field 2 param))
                           (if *match* (exit 48)
                             (let
                               (expansion =a (field 3 param)
                                tl =a (field 1 param)
                                s =a (field 0 _slist))
                               (before utils/warnings.ml(527):19188-19340
                                 (after utils/warnings.ml(527):19188-19340
                                   (apply (field 27 (global Stdlib!)) s
                                     (after utils/warnings.ml(527):19192-19340
                                       (apply (field 27 (global Stdlib!))
                                         " belongs to several types: "
                                         (after utils/warnings.ml(527):19224-19340
                                           (apply (field 27 (global Stdlib!))
                                             (after utils/warnings.ml(527):19224-19244
                                               (apply
                                                 (field 6
                                                   (global Stdlib__string!))
                                                 " " tl))
                                             (after utils/warnings.ml(528):19253-19340
                                               (apply
                                                 (field 27 (global Stdlib!))
                                                 "\nThe first one was selected. Please disambiguate if this is wrong."
                                                 expansion))))))))))))))
                     (exit 48))
                  with (48)
                   (let (*match* =a (field 2 param) tl =a (field 1 param))
                     (if *match*
                       (let (expansion =a (field 3 param))
                         (before utils/warnings.ml(532):19452-19623
                           (after utils/warnings.ml(532):19452-19623
                             (apply (field 27 (global Stdlib!))
                               "these field labels belong to several types: "
                               (after utils/warnings.ml(533):19507-19623
                                 (apply (field 27 (global Stdlib!))
                                   (after utils/warnings.ml(533):19507-19527
                                     (apply
                                       (field 6 (global Stdlib__string!)) " "
                                       tl))
                                   (after utils/warnings.ml(534):19536-19623
                                     (apply (field 27 (global Stdlib!))
                                       "\nThe first one was selected. Please disambiguate if this is wrong."
                                       expansion))))))))
                       (before utils/warnings.ml(530):19381-19393
                         (raise
                           (after utils/warnings.ml(530):19381-19393
                             (makeblock 0 (global Assert_failure!)
                               [0: "utils/warnings.ml" 530 40]))))))))
              case tag 25:
               (let (s =a (field 0 param))
                 (before utils/warnings.ml(537):19658-19779
                   (after utils/warnings.ml(537):19658-19779
                     (apply (field 27 (global Stdlib!)) "this use of "
                       (after utils/warnings.ml(537):19675-19779
                         (apply (field 27 (global Stdlib!)) s
                           " relies on type-directed disambiguation,\nit will not compile with OCaml 4.00 or earlier."))))))
              case tag 26:
               (let (s =a (field 0 param))
                 (before utils/warnings.ml(540):19813-19851
                   (after utils/warnings.ml(540):19813-19851
                     (apply (field 27 (global Stdlib!)) "the label "
                       (after utils/warnings.ml(540):19828-19851
                         (apply (field 27 (global Stdlib!)) s
                           " is not optional."))))))
              case tag 27:
               (let (s =a (field 1 param) kind =a (field 0 param))
                 (before utils/warnings.ml(542):19898-20008
                   (after utils/warnings.ml(542):19898-20008
                     (apply (field 3 (global Stdlib__printf!))
                       [0:
                        [11:
                         "this open statement shadows the "
                         [2:
                          0a
                          [11:
                           " identifier "
                           [2: 0a [11: " (which is later used)" 0a]]]]]
                        "this open statement shadows the %s identifier %s (which is later used)"]
                       kind s))))
              case tag 28:
               (let (s =a (field 1 param) kind =a (field 0 param))
                 (before utils/warnings.ml(546):20062-20161
                   (after utils/warnings.ml(546):20062-20161
                     (apply (field 3 (global Stdlib__printf!))
                       [0:
                        [11:
                         "this open statement shadows the "
                         [2:
                          0a
                          [12: ' ' [2: 0a [11: " (which is later used)" 0a]]]]]
                        "this open statement shadows the %s %s (which is later used)"]
                       kind s))))
              case tag 29:
               (let (s =a (field 1 param) var =a (field 0 param))
                 (before utils/warnings.ml(550):20201-20260
                   (after utils/warnings.ml(550):20201-20260
                     (apply (field 3 (global Stdlib__printf!))
                       [0:
                        [11:
                         "illegal environment variable "
                         [2: 0a [11: " : " [2: 0a 0a]]]]
                        "illegal environment variable %s : %s"]
                       var s))))
              case tag 30:
               (let (s =a (field 1 param) a =a (field 0 param))
                 (before utils/warnings.ml(552):20299-20359
                   (after utils/warnings.ml(552):20299-20359
                     (apply (field 3 (global Stdlib__printf!))
                       [0:
                        [11:
                         "illegal payload for attribute '"
                         [2: 0a [11: "'.\n" [2: 0a 0a]]]]
                        "illegal payload for attribute '%s'.\n%s"]
                       a s))))
              case tag 31:
               (let (sl =a (field 0 param))
                 (before utils/warnings.ml(554):20406-20550
                   (after utils/warnings.ml(554):20406-20550
                     (apply (field 3 (global Stdlib__printf!))
                       [0:
                        [11:
                         "implicit elimination of optional argument"
                         [2: 0a [12: ' ' [2: 0a 0a]]]]
                        "implicit elimination of optional argument%s %s"]
                       (if
                         (==
                           (after utils/warnings.ml(555):20482-20496
                             (apply (field 0 (global Stdlib__list!)) sl))
                           1)
                         (before utils/warnings.ml(555):20506-20508 "")
                         (before utils/warnings.ml(555):20514-20517 "s"))
                       (after utils/warnings.ml(556):20527-20550
                         (apply (field 6 (global Stdlib__string!)) ", " sl))))))
              case tag 32:
               (let (*match* =a (field 1 param) name =a (field 0 param))
                 (if *match*
                   (let (name =a name msg =a (field 0 *match*))
                     (before utils/warnings.ml(560):20680-20775
                       (after utils/warnings.ml(560):20680-20775
                         (apply (field 3 (global Stdlib__printf!))
                           [0:
                            [11:
                             "no valid cmi file was found in path for module "
                             [2: 0a [11: ". " [2: 0a 0a]]]]
                            "no valid cmi file was found in path for module %s. %s"]
                           name msg))))
                   (before utils/warnings.ml(558):20588-20638
                     (after utils/warnings.ml(558):20588-20638
                       (apply (field 27 (global Stdlib!))
                         "no cmi file was found in path for module " name)))))
              case tag 33:
               (let (unattached =a (field 0 param))
                 (before utils/warnings.ml(564):20814-20922
                   (if unattached
                     (before utils/warnings.ml(564):20833-20877
                       "unattached documentation comment (ignored)")
                     (before utils/warnings.ml(565):20889-20922
                       "ambiguous documentation comment"))))
              case tag 34:
               (let (attr_name =a (field 0 param))
                 (before utils/warnings.ml(577):21416-21489
                   (after utils/warnings.ml(577):21416-21489
                     (apply (field 3 (global Stdlib__printf!))
                       [0:
                        [11:
                         "the "
                         [3:
                          0a
                          [11: " attribute cannot appear in this context" 0a]]]
                        "the %S attribute cannot appear in this context"]
                       attr_name))))
              case tag 35:
               (let (attr_name =a (field 0 param))
                 (before utils/warnings.ml(579):21534-21639
                   (after utils/warnings.ml(579):21534-21639
                     (apply (field 3 (global Stdlib__printf!))
                       [0:
                        [11:
                         "the "
                         [3:
                          0a
                          [11:
                           " attribute is used more than once on this expression"
                           0a]]]
                        "the %S attribute is used more than once on this expression"]
                       attr_name))))
              case tag 36:
               (let (reason =a (field 0 param))
                 (before utils/warnings.ml(583):21680-21721
                   (after utils/warnings.ml(583):21680-21721
                     (apply (field 3 (global Stdlib__printf!))
                       [0:
                        [11: "Cannot inline: " [2: 0a 0a]]
                        "Cannot inline: %s"]
                       reason))))
              case tag 37:
               (let (vars =a (field 0 param))
                 (before utils/warnings.ml(585):21758-22135
                   (let
                     (msg =
                        (let
                          (vars =
                             (after utils/warnings.ml(586):21787-21816
                               (apply (field 48 (global Stdlib__list!))
                                 (field 32 (global Stdlib__string!)) vars)))
                          (before utils/warnings.ml(587):21828-21973
                            (if vars
                              (let
                                (x =a (field 0 vars)
                                 *match* =a (field 1 vars))
                                (if *match*
                                  (before utils/warnings.ml(591):21936-21973
                                    (after utils/warnings.ml(591):21936-21973
                                      (apply (field 27 (global Stdlib!))
                                        "variables "
                                        (after utils/warnings.ml(591):21951-21973
                                          (apply
                                            (field 6
                                              (global Stdlib__string!))
                                            "," vars)))))
                                  (before utils/warnings.ml(589):21890-21905
                                    (after utils/warnings.ml(589):21890-21905
                                      (apply (field 27 (global Stdlib!))
                                        "variable " x)))))
                              (before utils/warnings.ml(588):21860-21872
                                (raise
                                  (after utils/warnings.ml(588):21860-21872
                                    (makeblock 0 (global Assert_failure!)
                                      [0: "utils/warnings.ml" 588 16]))))))))
                     (before utils/warnings.ml(592):21983-22135
                       (after utils/warnings.ml(592):21983-22135
                         (apply (field 3 (global Stdlib__printf!))
                           [0:
                            [11:
                             "Ambiguous or-pattern variables under guard;\n"
                             [2:
                              0a
                              [11:
                               " may match different arguments. " [16: 0a]]]]
                            "Ambiguous or-pattern variables under guard;\n%s may match different arguments. %t"]
                           msg ref_manual_explanation))))))
              case tag 38:
               (let (name =a (field 0 param))
                 (before utils/warnings.ml(597):22166-22299
                   (after utils/warnings.ml(597):22166-22299
                     (apply (field 3 (global Stdlib__printf!))
                       [0:
                        [11:
                         "no cmx file was found in path for module "
                         [2:
                          0a
                          [11:
                           ", and its interface was not compiled with -opaque"
                           0a]]]
                        "no cmx file was found in path for module %s, and its interface was not compiled with -opaque"]
                       name))))
              case tag 39:
               (let (s =a (field 0 param))
                 (before utils/warnings.ml(604):22540-22566
                   (after utils/warnings.ml(604):22540-22566
                     (apply (field 27 (global Stdlib!)) "unused module "
                       (after utils/warnings.ml(604):22559-22566
                         (apply (field 27 (global Stdlib!)) s "."))))))
              case tag 40:
               (let (t =a (field 0 param))
                 (before utils/warnings.ml(606):22610-22888
                   (after utils/warnings.ml(606):22610-22888
                     (apply (field 3 (global Stdlib__printf!))
                       [0:
                        [11:
                         "This primitive declaration uses type "
                         [2:
                          0a
                          [11:
                           ", which is unannotated and\nunboxable. The representation of such types may change in future\nversions. You should annotate the declaration of "
                           [2:
                            0a
                            [11:
                             " with ["
                             [17:
                              5a
                              [11:
                               "boxed]\nor [" [17: 5a [11: "unboxed]." 0a]]]]]]]]]
                        "This primitive declaration uses type %s, which is unannotated and\nunboxable. The representation of such types may change in future\nversions. You should annotate the declaration of %s with [@@boxed]\nor [@@unboxed]."]
                       t t))))
              case tag 41:
               (let (s =a (field 0 param))
                 (before utils/warnings.ml(614):23028-23372
                   (after utils/warnings.ml(614):23028-23372
                     (apply (field 27 (global Stdlib!))
                       "The printed interface differs from the inferred interface.\nThe inferred interface contained items which could not be printed\nproperly due to name collisions between identifiers."
                       (after utils/warnings.ml(617):23235-23372
                         (apply (field 27 (global Stdlib!)) s
                           "\nBeware that this warning is purely informational and will not catch\nall instances of erroneous printed interface."))))))
              case tag 42:
               (let (name =a (field 0 param))
                 (before utils/warnings.ml(623):23508-23687
                   (after utils/warnings.ml(623):23508-23687
                     (apply (field 3 (global Stdlib__printf!))
                       [0:
                        [11:
                         "This type declaration is defining a new '()' constructor\nwhich shadows the existing one.\nHint: Did you mean 'type "
                         [2: 0a [11: " = unit'?" 0a]]]
                        "This type declaration is defining a new '()' constructor\nwhich shadows the existing one.\nHint: Did you mean 'type %s = unit'?"]
                       name))))
              case tag 43:
               (let (s =a (field 0 param))
                 (before utils/warnings.ml(486):17381-17406
                   (after utils/warnings.ml(486):17381-17406
                     (apply (field 27 (global Stdlib!)) "unused open! "
                       (after utils/warnings.ml(486):17399-17406
                         (apply (field 27 (global Stdlib!)) s ".")))))))
            with (49)
             (let (v =a (field 0 param) v = v)
               (before utils/warnings.ml(472):16718-16746
                 (after utils/warnings.ml(472):16718-16746
                   (apply (field 27 (global Stdlib!)) "unused variable "
                     (after utils/warnings.ml(472):16739-16746
                       (apply (field 27 (global Stdlib!)) v ".")))))))))
     nerrors = (makemutable 0 (int) 0)
     report =
       (function w
         (funct-body utils/warnings.ml(638)<ghost>:23853-24102
           (before utils/warnings.ml(639):23859-24102
             (let
               (*match* =
                  (after utils/warnings.ml(639):23865-23876
                    (apply is_active w)))
               (if *match*
                 (before utils/warnings.ml(642):23922-24102
                   (seq
                     (if
                       (after utils/warnings.ml(642):23925-23935
                         (apply is_error w))
                       (before utils/warnings.ml(642):23941-23953
                         (+:=1 nerrors))
                       0a)
                     (before utils/warnings.ml(643):23960-24102
                       (makeblock 0 -891636250
                         (makeblock 0
                           (after utils/warnings.ml(644):23982-24006
                             (apply (field 32 (global Stdlib!))
                               (after utils/warnings.ml(644):23996-24006
                                 (apply number w))))
                           (after utils/warnings.ml(645):24027-24036
                             (apply message w))
                           (after utils/warnings.ml(646):24058-24068
                             (apply is_error w))
                           0a)))))
                 (before utils/warnings.ml(640):23895-23904 -1008610421a))))))
     report_alert =
       (function alert
         (funct-body utils/warnings.ml(650)<ghost>:24121-24939
           (before utils/warnings.ml(651):24141-24939
             (let
               (*match* =
                  (after utils/warnings.ml(651):24147-24168
                    (apply alert_is_active alert)))
               (if *match*
                 (before utils/warnings.ml(654):24215-24939
                   (let
                     (is_error =
                        (after utils/warnings.ml(654):24230-24250
                          (apply alert_is_error alert)))
                     (before utils/warnings.ml(655):24260-24939
                       (seq
                         (if is_error
                           (before utils/warnings.ml(655):24277-24289
                             (+:=1 nerrors))
                           0a)
                         (before utils/warnings.ml(656):24297-24939
                           (let
                             (message =
                                (after utils/warnings.ml(656):24311-24343
                                  (apply (field 51 (global Misc!))
                                    (field 1 alert))))
                             (before utils/warnings.ml(663):24597-24939
                               (let
                                 (sub_locs =
                                    (if
                                      (&& (not (field 2 (field 2 alert)))
                                        (not (field 2 (field 3 alert))))
                                      (before utils/warnings.ml(665):24689-24784
                                        (makeblock 0
                                          (makeblock 0 (field 2 alert)
                                            "Definition")
                                          (makeblock 0
                                            (makeblock 0 (field 3 alert)
                                              "Expected signature")
                                            0a)))
                                      (before utils/warnings.ml(670):24808-24810
                                        0a)))
                                 (before utils/warnings.ml(672):24826-24939
                                   (makeblock 0 -891636250
                                     (makeblock 0 (field 0 alert) message
                                       is_error sub_locs)))))))))))
                 (before utils/warnings.ml(652):24187-24196 -1008610421a))))))
     Errors = (makeblock 248 "Warnings.Errors" (caml_fresh_oo_id 0))
     reset_fatal =
       (function param
         (funct-body utils/warnings.ml(682)<ghost>:24977-24996
           (before utils/warnings.ml(683):24984-24996
             (setfield_imm 0 nerrors 0))))
     check_fatal =
       (function param
         (funct-body utils/warnings.ml(685)<ghost>:25014-25090
           (before utils/warnings.ml(686):25021-25089
             (if (> (field 0 nerrors) 0)
               (before utils/warnings.ml(686):25042-25089
                 (seq (setfield_imm 0 nerrors 0)
                   (before utils/warnings.ml(688):25070-25082
                     (raise
                       (after utils/warnings.ml(688):25076-25082 Errors)))))
               0a))))
     descriptions =
       [0:
        [0: 1 "Suspicious-looking start-of-comment mark."]
        [0:
         [0: 2 "Suspicious-looking end-of-comment mark."]
         [0:
          [0: 3 "Deprecated synonym for the 'deprecated' alert"]
          [0:
           [0:
            4
            "Fragile pattern matching: matching that will remain complete even\n    if additional constructors are added to one of the variant types\n    matched."]
           [0:
            [0:
             5
             "Partially applied function: expression whose result has function\n    type and is ignored."]
            [0:
             [0: 6 "Label omitted in function application."]
             [0:
              [0: 7 "Method overridden."]
              [0:
               [0: 8 "Partial match: missing cases in pattern-matching."]
               [0:
                [0: 9 "Missing fields in a record pattern."]
                [0:
                 [0:
                  10
                  "Expression on the left-hand side of a sequence that doesn't have type\n    \"unit\" (and that is not a function, see warning number 5)."]
                 [0:
                  [0:
                   11
                   "Redundant case in a pattern matching (unused match case)."]
                  [0:
                   [0: 12 "Redundant sub-pattern in a pattern-matching."]
                   [0:
                    [0: 13 "Instance variable overridden."]
                    [0:
                     [0: 14 "Illegal backslash escape in a string constant."]
                     [0:
                      [0: 15 "Private method made public implicitly."]
                      [0:
                       [0: 16 "Unerasable optional argument."]
                       [0:
                        [0: 17 "Undeclared virtual method."]
                        [0:
                         [0: 18 "Non-principal type."]
                         [0:
                          [0: 19 "Type without principality."]
                          [0:
                           [0: 20 "Unused function argument."]
                           [0:
                            [0: 21 "Non-returning statement."]
                            [0:
                             [0: 22 "Preprocessor warning."]
                             [0:
                              [0: 23 "Useless record \"with\" clause."]
                              [0:
                               [0:
                                24
                                "Bad module name: the source file name is not a valid OCaml module name."]
                               [0:
                                [0: 25 "Deprecated: now part of warning 8."]
                                [0:
                                 [0:
                                  26
                                  "Suspicious unused variable: unused variable that is bound\n    with \"let\" or \"as\", and doesn't start with an underscore (\"_\")\n    character."]
                                 [0:
                                  [0:
                                   27
                                   "Innocuous unused variable: unused variable that is not bound with\n    \"let\" nor \"as\", and doesn't start with an underscore (\"_\")\n    character."]
                                  [0:
                                   [0:
                                    28
                                    "Wildcard pattern given as argument to a constant constructor."]
                                   [0:
                                    [0:
                                     29
                                     "Unescaped end-of-line in a string constant (non-portable code)."]
                                    [0:
                                     [0:
                                      30
                                      "Two labels or constructors of the same name are defined in two\n    mutually recursive types."]
                                     [0:
                                      [0:
                                       31
                                       "A module is linked twice in the same executable."]
                                      [0:
                                       [0: 32 "Unused value declaration."]
                                       [0:
                                        [0: 33 "Unused open statement."]
                                        [0:
                                         [0: 34 "Unused type declaration."]
                                         [0:
                                          [0: 35 "Unused for-loop index."]
                                          [0:
                                           [0:
                                            36 "Unused ancestor variable."]
                                           [0:
                                            [0: 37 "Unused constructor."]
                                            [0:
                                             [0:
                                              38
                                              "Unused extension constructor."]
                                             [0:
                                              [0: 39 "Unused rec flag."]
                                              [0:
                                               [0:
                                                40
                                                "Constructor or label name used out of scope."]
                                               [0:
                                                [0:
                                                 41
                                                 "Ambiguous constructor or label name."]
                                                [0:
                                                 [0:
                                                  42
                                                  "Disambiguated constructor or label name (compatibility warning)."]
                                                 [0:
                                                  [0:
                                                   43
                                                   "Nonoptional label applied as optional."]
                                                  [0:
                                                   [0:
                                                    44
                                                    "Open statement shadows an already defined identifier."]
                                                   [0:
                                                    [0:
                                                     45
                                                     "Open statement shadows an already defined label or constructor."]
                                                    [0:
                                                     [0:
                                                      46
                                                      "Error in environment variable."]
                                                     [0:
                                                      [0:
                                                       47
                                                       "Illegal attribute payload."]
                                                      [0:
                                                       [0:
                                                        48
                                                        "Implicit elimination of optional arguments."]
                                                       [0:
                                                        [0:
                                                         49
                                                         "Absent cmi file when looking up module alias."]
                                                        [0:
                                                         [0:
                                                          50
                                                          "Unexpected documentation comment."]
                                                         [0:
                                                          [0:
                                                           51
                                                           "Warning on non-tail calls if @tailcall present."]
                                                          [0:
                                                           [0:
                                                            52
                                                            "Fragile constant pattern."]
                                                           [0:
                                                            [0:
                                                             53
                                                             "Attribute cannot appear in this context"]
                                                            [0:
                                                             [0:
                                                              54
                                                              "Attribute used more than once on an expression"]
                                                             [0:
                                                              [0:
                                                               55
                                                               "Inlining impossible"]
                                                              [0:
                                                               [0:
                                                                56
                                                                "Unreachable case in a pattern-matching (based on type information)."]
                                                               [0:
                                                                [0:
                                                                 57
                                                                 "Ambiguous or-pattern variables under guard"]
                                                                [0:
                                                                 [0:
                                                                  58
                                                                  "Missing cmx file"]
                                                                 [0:
                                                                  [0:
                                                                   59
                                                                   "Assignment to non-mutable value"]
                                                                  [0:
                                                                   [0:
                                                                    60
                                                                    "Unused module declaration"]
                                                                   [0:
                                                                    [0:
                                                                    61
                                                                    "Unboxable type in primitive declaration"]
                                                                    [0:
                                                                    [0:
                                                                    62
                                                                    "Type constraint on GADT type declaration"]
                                                                    [0:
                                                                    [0:
                                                                    63
                                                                    "Erroneous printed signature"]
                                                                    [0:
                                                                    [0:
                                                                    64
                                                                    "-unsafe used with a preprocessor returning a syntax tree"]
                                                                    [0:
                                                                    [0:
                                                                    65
                                                                    "Type declaration defining a new '()' constructor"]
                                                                    [0:
                                                                    [0:
                                                                    66
                                                                    "Unused open! statement"]
                                                                    0a]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
     help_warnings =
       (function param
         (funct-body utils/warnings.ml(774)<ghost>:28910-29388
           (before utils/warnings.ml(775):28917-29388
             (seq
               (after utils/warnings.ml(775):28917-28984
                 (apply (field 14 (global Stdlib__list!))
                   (function param
                     (funct-body utils/warnings.ml(775):28927-28971
                       (let (s =a (field 1 param) i =a (field 0 param))
                         (before utils/warnings.ml(775):28942-28970
                           (after utils/warnings.ml(775):28942-28970
                             (apply (field 1 (global Stdlib__printf!))
                               [0:
                                [4:
                                 3a [0: 1a 3] 0a
                                 [12: ' ' [2: 0a [12: '\n' 0a]]]]
                                "%3i %s\n"]
                               i s))))))
                   descriptions))
               (before utils/warnings.ml(776):28988-29388
                 (seq
                   (after utils/warnings.ml(776):28988-29020
                     (apply (field 45 (global Stdlib!)) "  A all warnings"))
                   (before utils/warnings.ml(777):29024-29388
                     (seq
                       (for i 'b' to 'z'
                         (before utils/warnings.ml(778):29070-29371
                           (let
                             (c =[int]
                                (after utils/warnings.ml(778):29078-29088
                                  (apply (field 0 (global Stdlib__char!)) i)))
                             (before utils/warnings.ml(779):29096-29371
                               (let
                                 (l =
                                    (after utils/warnings.ml(779):29102-29110
                                      (apply letter c)))
                                 (if l
                                   (let (*match* =a (field 1 l))
                                     (if *match*
                                       (before utils/warnings.ml(784):29243-29371
                                         (after utils/warnings.ml(784):29243-29371
                                           (apply
                                             (field 1
                                               (global Stdlib__printf!))
                                             [0:
                                              [11:
                                               "  "
                                               [0:
                                                [11:
                                                 " warnings "
                                                 [2: 0a [11: ".\n" 0a]]]]]
                                              "  %c warnings %s.\n"]
                                             (after utils/warnings.ml(785):29289-29313
                                               (apply
                                                 (field 5
                                                   (global Stdlib__char!))
                                                 c))
                                             (after utils/warnings.ml(786):29324-29371
                                               (apply
                                                 (field 6
                                                   (global Stdlib__string!))
                                                 ", "
                                                 (after utils/warnings.ml(786):29344-29370
                                                   (apply
                                                     (field 16
                                                       (global Stdlib__list!))
                                                     (field 9
                                                       (global Stdlib__int!))
                                                     l)))))))
                                       (let (n =a (field 0 l))
                                         (before utils/warnings.ml(782):29152-29223
                                           (after utils/warnings.ml(782):29152-29223
                                             (apply
                                               (field 1
                                                 (global Stdlib__printf!))
                                               [0:
                                                [11:
                                                 "  "
                                                 [0:
                                                  [11:
                                                   " Alias for warning "
                                                   [4:
                                                    3a 0a 0a [11: ".\n" 0a]]]]]
                                                "  %c Alias for warning %i.\n"]
                                               (after utils/warnings.ml(782):29197-29221
                                                 (apply
                                                   (field 5
                                                     (global Stdlib__char!))
                                                   c))
                                               n))))))
                                   (before utils/warnings.ml(780):29128-29130
                                     0a)))))))
                       (before utils/warnings.ml(788):29382-29388
                         (after utils/warnings.ml(788):29382-29388
                           (apply (field 98 (global Stdlib!)) 0))))))))))))
    (pseudo _none_(0)<ghost>:-1--1
      (makeblock 0 parse_options parse_alert_option without_warnings
        is_active is_error defaults_w defaults_warn_error report report_alert
        Errors check_fatal reset_fatal help_warnings backup restore mk_lazy))))
