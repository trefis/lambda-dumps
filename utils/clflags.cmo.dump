(setglobal Clflags!
  (let
    (Int_arg_helper =
       (module-defn(Int_arg_helper) utils/clflags.ml(18):1110-1337
         (apply (field 0 (global Arg_helper!))
           (let
             (Key =
                (module-defn(Key) utils/clflags.ml(19):1160-1243
                  (let
                    (include =a (field 0 (global Numbers!))
                     T =a (field 0 include)
                     equal =a (field 1 include)
                     hash =a (field 2 include)
                     compare =a (field 3 include)
                     output =a (field 4 include)
                     print =a (field 5 include)
                     Set =a (field 6 include)
                     Map =a (field 7 include)
                     Tbl =a (field 8 include)
                     zero_to_n =a (field 9 include)
                     of_string =
                       (function prim stub (caml_int_of_string prim)))
                    (pseudo utils/clflags.ml(19):1173-1243
                      (makeblock 0 T equal hash compare output print Set Map
                        Tbl zero_to_n of_string))))
              Value =
                (module-defn(Value) utils/clflags.ml(24):1247-1332
                  (let
                    (include =a (field 0 (global Numbers!))
                     T =a (field 0 include)
                     equal =a (field 1 include)
                     hash =a (field 2 include)
                     compare =a (field 3 include)
                     output =a (field 4 include)
                     print =a (field 5 include)
                     Set =a (field 6 include)
                     Map =a (field 7 include)
                     Tbl =a (field 8 include)
                     zero_to_n =a (field 9 include)
                     of_string =
                       (function prim stub (caml_int_of_string prim)))
                    (pseudo utils/clflags.ml(24):1262-1332
                      (makeblock 0 T equal hash compare output print Set Map
                        Tbl zero_to_n of_string)))))
             (pseudo utils/clflags.ml(18):1151-1336
               (makeblock 0
                 (makeblock 0 (field 10 Key)
                   (let (let =a (field 7 Key))
                     (makeblock 0 (field 0 let) (field 1 let) (field 2 let)
                       (field 3 let) (field 4 let) (field 5 let)
                       (field 6 let) (field 7 let) (field 8 let)
                       (field 9 let) (field 10 let) (field 11 let)
                       (field 12 let) (field 13 let) (field 14 let)
                       (field 15 let) (field 16 let) (field 17 let)
                       (field 18 let) (field 19 let) (field 20 let)
                       (field 21 let) (field 22 let) (field 23 let)
                       (field 24 let) (field 25 let) (field 26 let)
                       (field 27 let) (field 28 let) (field 29 let)
                       (field 30 let) (field 31 let) (field 32 let)
                       (field 33 let) (field 34 let) (field 35 let)
                       (field 36 let) (field 37 let))))
                 (makeblock 0 (field 10 Value)))))))
     Float_arg_helper =
       (module-defn(Float_arg_helper) utils/clflags.ml(29):1338-1571
         (apply (field 0 (global Arg_helper!))
           (let
             (Key =
                (module-defn(Key) utils/clflags.ml(30):1390-1473
                  (let
                    (include =a (field 0 (global Numbers!))
                     T =a (field 0 include)
                     equal =a (field 1 include)
                     hash =a (field 2 include)
                     compare =a (field 3 include)
                     output =a (field 4 include)
                     print =a (field 5 include)
                     Set =a (field 6 include)
                     Map =a (field 7 include)
                     Tbl =a (field 8 include)
                     zero_to_n =a (field 9 include)
                     of_string =
                       (function prim stub (caml_int_of_string prim)))
                    (pseudo utils/clflags.ml(30):1403-1473
                      (makeblock 0 T equal hash compare output print Set Map
                        Tbl zero_to_n of_string))))
              Value =
                (module-defn(Value) utils/clflags.ml(35):1477-1566
                  (let
                    (include =a (field 3 (global Numbers!))
                     T =a (field 0 include)
                     equal =a (field 1 include)
                     hash =a (field 2 include)
                     compare =a (field 3 include)
                     output =a (field 4 include)
                     print =a (field 5 include)
                     Set =a (field 6 include)
                     Map =a (field 7 include)
                     Tbl =a (field 8 include)
                     of_string =
                       (function prim stub (caml_float_of_string prim)))
                    (pseudo utils/clflags.ml(35):1492-1566
                      (makeblock 0 T equal hash compare output print Set Map
                        Tbl of_string)))))
             (pseudo utils/clflags.ml(29):1381-1570
               (makeblock 0
                 (makeblock 0 (field 10 Key)
                   (let (let =a (field 7 Key))
                     (makeblock 0 (field 0 let) (field 1 let) (field 2 let)
                       (field 3 let) (field 4 let) (field 5 let)
                       (field 6 let) (field 7 let) (field 8 let)
                       (field 9 let) (field 10 let) (field 11 let)
                       (field 12 let) (field 13 let) (field 14 let)
                       (field 15 let) (field 16 let) (field 17 let)
                       (field 18 let) (field 19 let) (field 20 let)
                       (field 21 let) (field 22 let) (field 23 let)
                       (field 24 let) (field 25 let) (field 26 let)
                       (field 27 let) (field 28 let) (field 29 let)
                       (field 30 let) (field 31 let) (field 32 let)
                       (field 33 let) (field 34 let) (field 35 let)
                       (field 36 let) (field 37 let))))
                 (makeblock 0 (field 9 Value)))))))
     objfiles = (makemutable 0 0a)
     ccobjs = (makemutable 0 0a)
     dllibs = (makemutable 0 0a)
     compile_only = (makemutable 0 0a)
     output_name = (makemutable 0 0a)
     include_dirs = (makemutable 0 0a)
     no_std_include = (makemutable 0 0a)
     print_types = (makemutable 0 0a)
     make_archive = (makemutable 0 0a)
     debug = (makemutable 0 0a)
     debug_full = (makemutable 0 0a)
     unsafe = (makemutable 0 0a)
     use_linscan = (makemutable 0 0a)
     link_everything = (makemutable 0 0a)
     custom_runtime = (makemutable 0 0a)
     no_check_prims = (makemutable 0 0a)
     bytecode_compatible_32 = (makemutable 0 0a)
     output_c_object = (makemutable 0 0a)
     output_complete_object = (makemutable 0 0a)
     all_ccopts = (makemutable 0 0a)
     classic = (makemutable 0 0a)
     nopervasives = (makemutable 0 0a)
     match_context_rows = (makemutable 0 (int) 32)
     preprocessor = (makemutable 0 0a)
     all_ppx = (makemutable 0 0a)
     absname = (makemutable 0 0a)
     annotations = (makemutable 0 0a)
     binary_annotations = (makemutable 0 0a)
     use_threads = (makemutable 0 0a)
     noassert = (makemutable 0 0a)
     verbose = (makemutable 0 0a)
     noversion = (makemutable 0 0a)
     noprompt = (makemutable 0 0a)
     nopromptcont = (makemutable 0 0a)
     init_file = (makemutable 0 0a)
     noinit = (makemutable 0 0a)
     open_modules = (makemutable 0 0a)
     use_prims = (makemutable 0 "")
     use_runtime = (makemutable 0 "")
     plugin = (makemutable 0 0a)
     principal = (makemutable 0 0a)
     real_paths = (makemutable 0 1a)
     recursive_types = (makemutable 0 0a)
     strict_sequence = (makemutable 0 0a)
     strict_formats = (makemutable 0 0a)
     applicative_functors = (makemutable 0 1a)
     make_runtime = (makemutable 0 0a)
     c_compiler = (makemutable 0 0a)
     no_auto_link = (makemutable 0 0a)
     dllpaths = (makemutable 0 0a)
     make_package = (makemutable 0 0a)
     for_package = (makemutable 0 0a)
     error_size = (makemutable 0 (int) 500)
     float_const_prop = (makemutable 0 1a)
     transparent_modules = (makemutable 0 0a)
     unique_ids = (makemutable 0 1a)
     dump_source = (makemutable 0 0a)
     dump_parsetree = (makemutable 0 0a)
     dump_typedtree = (makemutable 0 0a)
     dump_rawlambda = (makemutable 0 0a)
     dump_lambda = (makemutable 0 0a)
     dump_rawclambda = (makemutable 0 0a)
     dump_clambda = (makemutable 0 0a)
     dump_rawflambda = (makemutable 0 0a)
     dump_flambda = (makemutable 0 0a)
     dump_flambda_let = (makemutable 0 0a)
     dump_flambda_verbose = (makemutable 0 0a)
     dump_instr = (makemutable 0 0a)
     keep_camlprimc_file = (makemutable 0 0a)
     keep_asm_file = (makemutable 0 0a)
     optimize_for_speed = (makemutable 0 1a)
     opaque = (makemutable 0 0a)
     dump_cmm = (makemutable 0 0a)
     dump_selection = (makemutable 0 0a)
     dump_cse = (makemutable 0 0a)
     dump_live = (makemutable 0 0a)
     dump_avail = (makemutable 0 0a)
     dump_spill = (makemutable 0 0a)
     dump_split = (makemutable 0 0a)
     dump_interf = (makemutable 0 0a)
     dump_prefer = (makemutable 0 0a)
     dump_regalloc = (makemutable 0 0a)
     dump_reload = (makemutable 0 0a)
     dump_scheduling = (makemutable 0 0a)
     dump_linear = (makemutable 0 0a)
     dump_interval = (makemutable 0 0a)
     keep_startup_file = (makemutable 0 0a)
     dump_combine = (makemutable 0 0a)
     profile_columns = (makemutable 0 0a)
     debug_runavail = (makemutable 0 0a)
     native_code = (makemutable 0 0a)
     force_slash = (makemutable 0 0a)
     clambda_checks = (makemutable 0 0a)
     flambda_invariant_checks = (makemutable 0 (field 51 (global Config!)))
     dont_write_files = (makemutable 0 0a)
     insn_sched_default = 1a
     insn_sched = (makemutable 0 insn_sched_default)
     std_include_flag =
       (function prefix
         (funct-body utils/clflags.ml(149)<ghost>:7191-7287
           (before utils/clflags.ml(150):7202-7287
             (if (field 0 no_std_include)
               (before utils/clflags.ml(150):7226-7228 "")
               (before utils/clflags.ml(151):7236-7287
                 (after utils/clflags.ml(151):7236-7287
                   (apply (field 27 (global Stdlib!)) prefix
                     (after utils/clflags.ml(151):7246-7286
                       (apply (field 19 (global Stdlib__filename!))
                         (field 1 (global Config!)))))))))))
     std_include_dir =
       (function param
         (funct-body utils/clflags.ml(154)<ghost>:7312-7376
           (before utils/clflags.ml(155):7319-7376
             (if (field 0 no_std_include)
               (before utils/clflags.ml(155):7343-7345 0a)
               (before utils/clflags.ml(155):7351-7376
                 (makeblock 0 (field 1 (global Config!)) 0a))))))
     shared = (makemutable 0 0a)
     dlcode = (makemutable 0 1a)
     pic_code =
       (makemutable 0
         (let (*match* = (field 35 (global Config!)))
           (stringswitch *match*
            case "amd64": (before utils/clflags.ml(162):7559-7563 1a)
            default: (before utils/clflags.ml(163):7598-7603 0a))))
     runtime_variant = (makemutable 0 "")
     with_runtime = (makemutable 0 1a)
     keep_docs = (makemutable 0 0a)
     keep_locs = (makemutable 0 1a)
     unsafe_string =
       (if (field 58 (global Config!))
         (before utils/clflags.ml(171):7885-7894 (makemutable 0 0a))
         (before utils/clflags.ml(172):7902-7938
           (makemutable 0 (not (field 59 (global Config!))))))
     classic_inlining = (makemutable 0 0a)
     inlining_report = (makemutable 0 0a)
     afl_instrument = (makemutable 0 (field 63 (global Config!)))
     afl_inst_ratio = (makemutable 0 (int) 100)
     simplify_rounds = (makemutable 0 0a)
     default_simplify_rounds = (makemutable 0 (int) 1)
     rounds =
       (function param : int
         (funct-body utils/clflags.ml(183)<ghost>:8376-8463
           (before utils/clflags.ml(184):8383-8463
             (let (*match* = (field 0 simplify_rounds))
               (if *match*
                 (let (r =a (field 0 *match*))
                   (before utils/clflags.ml(186):8462-8463 r))
                 (before utils/clflags.ml(185):8423-8447
                   (field 0 default_simplify_rounds)))))))
     default_inline_threshold =[float]
       (if (field 50 (global Config!))
         (before utils/clflags.ml(188):8519-8522 10.)
         (before utils/clflags.ml(188):8528-8537 (/. 10. 8.)))
     inline_toplevel_multiplier =[int] 16
     default_inline_toplevel_threshold =[int]
       (int_of_float
         (*. (float_of_int inline_toplevel_multiplier)
           default_inline_threshold))
     default_inline_call_cost =[int] 5
     default_inline_alloc_cost =[int] 7
     default_inline_prim_cost =[int] 3
     default_inline_branch_cost =[int] 5
     default_inline_indirect_cost =[int] 4
     default_inline_branch_factor =[float] 0.1
     default_inline_lifting_benefit =[int] 1300
     default_inline_max_unroll =[int] 0
     default_inline_max_depth =[int] 1
     inline_threshold =
       (makemutable 0
         (after utils/clflags.ml(202):9042-9093
           (apply (field 0 Float_arg_helper) default_inline_threshold)))
     inline_toplevel_threshold =
       (makemutable 0
         (after utils/clflags.ml(204):9132-9190
           (apply (field 0 Int_arg_helper) default_inline_toplevel_threshold)))
     inline_call_cost =
       (makemutable 0
         (after utils/clflags.ml(205):9218-9267
           (apply (field 0 Int_arg_helper) default_inline_call_cost)))
     inline_alloc_cost =
       (makemutable 0
         (after utils/clflags.ml(206):9296-9346
           (apply (field 0 Int_arg_helper) default_inline_alloc_cost)))
     inline_prim_cost =
       (makemutable 0
         (after utils/clflags.ml(207):9374-9423
           (apply (field 0 Int_arg_helper) default_inline_prim_cost)))
     inline_branch_cost =
       (makemutable 0
         (after utils/clflags.ml(209):9455-9506
           (apply (field 0 Int_arg_helper) default_inline_branch_cost)))
     inline_indirect_cost =
       (makemutable 0
         (after utils/clflags.ml(211):9540-9593
           (apply (field 0 Int_arg_helper) default_inline_indirect_cost)))
     inline_branch_factor =
       (makemutable 0
         (after utils/clflags.ml(213):9627-9682
           (apply (field 0 Float_arg_helper) default_inline_branch_factor)))
     inline_lifting_benefit =
       (makemutable 0
         (after utils/clflags.ml(215):9718-9773
           (apply (field 0 Int_arg_helper) default_inline_lifting_benefit)))
     inline_max_unroll =
       (makemutable 0
         (after utils/clflags.ml(217):9804-9854
           (apply (field 0 Int_arg_helper) default_inline_max_unroll)))
     inline_max_depth =
       (makemutable 0
         (after utils/clflags.ml(219):9884-9933
           (apply (field 0 Int_arg_helper) default_inline_max_depth)))
     unbox_specialised_args = (makemutable 0 1a)
     unbox_free_vars_of_closures = (makemutable 0 1a)
     unbox_closures = (makemutable 0 0a)
     default_unbox_closures_factor =[int] 10
     unbox_closures_factor =
       (makemutable 0 (int) default_unbox_closures_factor)
     remove_unused_arguments = (makemutable 0 0a)
     set_int_arg =
       (function round arg default[int] value
         (funct-body utils/clflags.ml(244)<ghost>:10764-11126
           (before utils/clflags.ml(245):10820-11126
             (let
               (value =
                  (if value
                    (let (value =a (field 0 value))
                      (before utils/clflags.ml(248):10901-10906 value))
                    (before utils/clflags.ml(247):10873-10880 default)))
               (before utils/clflags.ml(250):10914-11126
                 (if round
                   (let (round =a (field 0 round))
                     (before utils/clflags.ml(255):11070-11126
                       (setfield_ptr 0 arg
                         (after utils/clflags.ml(255):11077-11126
                           (apply (field 2 Int_arg_helper) round value
                             (field 0 arg))))))
                   (before utils/clflags.ml(252):10947-11047
                     (setfield_ptr 0 arg
                       (after utils/clflags.ml(252):10954-11047
                         (apply (field 1 Int_arg_helper) value
                           (after utils/clflags.ml(253):11005-11047
                             (apply (field 3 Int_arg_helper) (field 0 arg)))))))))))))
     set_float_arg =
       (function round arg default[float] value
         (funct-body utils/clflags.ml(257)<ghost>:11146-11510
           (before utils/clflags.ml(258):11204-11510
             (let
               (value =[float]
                  (if value
                    (let (value =a (field 0 value))
                      (before utils/clflags.ml(261):11279-11284 value))
                    (before utils/clflags.ml(260):11251-11258 default)))
               (before utils/clflags.ml(263):11292-11510
                 (if round
                   (let (round =a (field 0 round))
                     (before utils/clflags.ml(268):11452-11510
                       (setfield_ptr 0 arg
                         (after utils/clflags.ml(268):11459-11510
                           (apply (field 2 Float_arg_helper) round value
                             (field 0 arg))))))
                   (before utils/clflags.ml(265):11325-11429
                     (setfield_ptr 0 arg
                       (after utils/clflags.ml(265):11332-11429
                         (apply (field 1 Float_arg_helper) value
                           (after utils/clflags.ml(266):11385-11429
                             (apply (field 3 Float_arg_helper) (field 0 arg)))))))))))))
     use_inlining_arguments_set =
       (function round arg
         (funct-body utils/clflags.ml(270)<ghost>:11543-12584
           (before utils/clflags.ml(271):11579-12584
             (let
               (set_int =
                  (after utils/clflags.ml(271):11593-11610
                    (apply set_int_arg round)))
               (before utils/clflags.ml(272):11616-12584
                 (let
                   (set_float =
                      (after utils/clflags.ml(272):11632-11651
                        (apply set_float_arg round)))
                   (before utils/clflags.ml(273):11657-12584
                     (seq
                       (after utils/clflags.ml(273):11657-11727
                         (apply set_int inline_call_cost
                           default_inline_call_cost (field 0 arg)))
                       (before utils/clflags.ml(274):11731-12584
                         (seq
                           (after utils/clflags.ml(274):11731-11804
                             (apply set_int inline_alloc_cost
                               default_inline_alloc_cost (field 1 arg)))
                           (before utils/clflags.ml(275):11808-12584
                             (seq
                               (after utils/clflags.ml(275):11808-11878
                                 (apply set_int inline_prim_cost
                                   default_inline_prim_cost (field 2 arg)))
                               (before utils/clflags.ml(276):11882-12584
                                 (seq
                                   (after utils/clflags.ml(276):11882-11962
                                     (apply set_int inline_branch_cost
                                       default_inline_branch_cost
                                       (field 3 arg)))
                                   (before utils/clflags.ml(278):11966-12584
                                     (seq
                                       (after utils/clflags.ml(278):11966-12052
                                         (apply set_int inline_indirect_cost
                                           default_inline_indirect_cost
                                           (field 4 arg)))
                                       (before utils/clflags.ml(280):12056-12584
                                         (seq
                                           (after utils/clflags.ml(280):12056-12148
                                             (apply set_int
                                               inline_lifting_benefit
                                               default_inline_lifting_benefit
                                               (field 5 arg)))
                                           (before utils/clflags.ml(282):12152-12584
                                             (seq
                                               (after utils/clflags.ml(282):12152-12240
                                                 (apply set_float
                                                   inline_branch_factor
                                                   default_inline_branch_factor
                                                   (field 6 arg)))
                                               (before utils/clflags.ml(284):12244-12584
                                                 (seq
                                                   (after utils/clflags.ml(284):12244-12318
                                                     (apply set_int
                                                       inline_max_depth
                                                       default_inline_max_depth
                                                       (field 7 arg)))
                                                   (before utils/clflags.ml(286):12322-12584
                                                     (seq
                                                       (after utils/clflags.ml(286):12322-12399
                                                         (apply set_int
                                                           inline_max_unroll
                                                           default_inline_max_unroll
                                                           (field 8 arg)))
                                                       (before utils/clflags.ml(288):12403-12584
                                                         (seq
                                                           (after utils/clflags.ml(288):12403-12479
                                                             (apply set_float
                                                               inline_threshold
                                                               default_inline_threshold
                                                               (field 9 arg)))
                                                           (before utils/clflags.ml(290):12483-12584
                                                             (after utils/clflags.ml(290):12483-12584
                                                               (apply set_int
                                                                 inline_toplevel_threshold
                                                                 default_inline_toplevel_threshold
                                                                 (field 10
                                                                   arg))))))))))))))))))))))))))))))
     o1_arguments = [0: 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a]
     classic_arguments =
       (makeblock 0 0a 0a 0a 0a 0a 0a 0a 0a 0a
         (makeblock 0 (float) (/. 10. 8.)) [0: 1])
     o2_arguments =
       (makeblock 0 (makeblock 0 (int) (* 2 default_inline_call_cost))
         (makeblock 0 (int) (* 2 default_inline_alloc_cost))
         (makeblock 0 (int) (* 2 default_inline_prim_cost))
         (makeblock 0 (int) (* 2 default_inline_branch_cost))
         (makeblock 0 (int) (* 2 default_inline_indirect_cost)) 0a 0a 
         [0: 2] 0a [0: 25.]
         (makeblock 0 (int) (* 25 inline_toplevel_multiplier)))
     o3_arguments =
       (makeblock 0 (makeblock 0 (int) (* 3 default_inline_call_cost))
         (makeblock 0 (int) (* 3 default_inline_alloc_cost))
         (makeblock 0 (int) (* 3 default_inline_prim_cost))
         (makeblock 0 (int) (* 3 default_inline_branch_cost))
         (makeblock 0 (int) (* 3 default_inline_indirect_cost)) 0a [0: 0.]
         [0: 3] [0: 1] [0: 50.]
         (makeblock 0 (int) (* 50 inline_toplevel_multiplier)))
     all_passes = (makemutable 0 0a)
     dumped_passes_list = (makemutable 0 0a)
     dumped_pass =
       (function s
         (funct-body utils/clflags.ml(356)<ghost>:14723-14793
           (before utils/clflags.ml(357):14729-14793
             (seq
               (if
                 (after utils/clflags.ml(357):14735-14759
                   (apply (field 31 (global Stdlib__list!)) s
                     (field 0 all_passes)))
                 0a
                 (raise
                   (after utils/clflags.ml(357):14729-14759
                     (makeblock 0 (global Assert_failure!)
                       [0: "utils/clflags.ml" 357 2]))))
               (before utils/clflags.ml(358):14763-14793
                 (after utils/clflags.ml(358):14763-14793
                   (apply (field 31 (global Stdlib__list!)) s
                     (field 0 dumped_passes_list))))))))
     set_dumped_pass =
       (function s enabled
         (funct-body utils/clflags.ml(360)<ghost>:14815-15103
           (before utils/clflags.ml(361):14829-15103
             (if
               (after utils/clflags.ml(361):14832-14856
                 (apply (field 31 (global Stdlib__list!)) s
                   (field 0 all_passes)))
               (before utils/clflags.ml(361):14862-15103
                 (let
                   (passes_without_s =
                      (after utils/clflags.ml(362):14895-14935
                        (apply (field 35 (global Stdlib__list!))
                          (after utils/clflags.ml(362):14907-14915
                            (apply
                              (function prim prim stub
                                (caml_string_notequal prim prim))
                              s))
                          (field 0 dumped_passes_list))))
                   (before utils/clflags.ml(363):14943-15097
                     (let
                       (dumped_passes =
                          (if enabled
                            (before utils/clflags.ml(365):14993-15014
                              (makeblock 0 s passes_without_s))
                            (before utils/clflags.ml(367):15034-15050
                              passes_without_s)))
                       (before utils/clflags.ml(369):15062-15097
                         (setfield_ptr 0 dumped_passes_list dumped_passes))))))
               0a))))
     dump_into_file = (makemutable 0 0a)
     color = (makemutable 0 0a)
     color_reader =
       (makeblock 0
         (function param
           (funct-body utils/clflags.ml(384):15344-15487
             (catch
               (stringswitch param
                case "always":
                 (before utils/clflags.ml(386):15409-15431 [0: 1a])
                case "auto":
                 (before utils/clflags.ml(385):15370-15390 [0: 0a])
                case "never":
                 (before utils/clflags.ml(387):15449-15470 [0: 2a])
                default: (exit 2))
              with (2) (before utils/clflags.ml(388):15482-15486 0a))))
         (function param
           (funct-body utils/clflags.ml(389):15499-15611
             (switch* param
              case int 0: (before utils/clflags.ml(390):15534-15540 "auto")
              case int 1: (before utils/clflags.ml(391):15568-15576 "always")
              case int 2: (before utils/clflags.ml(392):15603-15610 "never"))))
         "expected \"auto\", \"always\" or \"never\"" "OCAML_COLOR")
     error_style = (makemutable 0 0a)
     error_style_reader =
       (makeblock 0
         (function param
           (funct-body utils/clflags.ml(400):15783-15909
             (catch
               (stringswitch param
                case "contextual":
                 (before utils/clflags.ml(401):15815-15847 [0: 0a])
                case "short":
                 (before utils/clflags.ml(402):15865-15892 [0: 1a])
                default: (exit 3))
              with (3) (before utils/clflags.ml(403):15904-15908 0a))))
         (function param
           (funct-body utils/clflags.ml(404):15921-16021
             (if param (before utils/clflags.ml(406):16013-16020 "short")
               (before utils/clflags.ml(405):15968-15980 "contextual"))))
         "expected \"contextual\" or \"short\"" "OCAML_ERROR_STYLE")
     unboxed_types = (makemutable 0 0a)
     Compiler_pass =
       (module-defn(Compiler_pass) utils/clflags.ml(414):16186-16784
         (let
           (to_string =
              (function param
                (funct-body utils/clflags.ml(422):16462-16522
                  (if param
                    (before utils/clflags.ml(424):16514-16522 "typing")
                    (before utils/clflags.ml(423):16488-16497 "parsing"))))
            of_string =
              (function param
                (funct-body utils/clflags.ml(426):16542-16628
                  (catch
                    (stringswitch param
                     case "parsing":
                      (before utils/clflags.ml(427):16570-16582 [0: 0a])
                     case "typing":
                      (before utils/clflags.ml(428):16601-16612 [0: 1a])
                     default: (exit 4))
                   with (4) (before utils/clflags.ml(429):16624-16628 0a))))
            rank =
              (function param : int
                (funct-body utils/clflags.ml(431):16643-16688
                  (if param (before utils/clflags.ml(433):16687-16688 1)
                    (before utils/clflags.ml(432):16669-16670 0))))
            passes = [0: 0a [0: 1a 0a]]
            pass_names =
              (after utils/clflags.ml(439):16755-16780
                (apply (field 16 (global Stdlib__list!)) to_string passes)))
           (pseudo utils/clflags.ml(414):16209-16784
             (makeblock 0 to_string of_string rank passes pass_names))))
     stop_after = (makemutable 0 0a)
     should_stop_after =
       (function pass
         (funct-body utils/clflags.ml(444)<ghost>:16853-16970
           (before utils/clflags.ml(445):16862-16970
             (let (*match* = (field 0 stop_after))
               (if *match*
                 (let (stop =a (field 0 *match*))
                   (before utils/clflags.ml(447):16920-16970
                     (<=
                       (after utils/clflags.ml(447):16920-16943
                         (apply (field 2 Compiler_pass) stop))
                       (after utils/clflags.ml(447):16947-16970
                         (apply (field 2 Compiler_pass) pass)))))
                 (before utils/clflags.ml(446):16897-16902 0a))))))
     arg_spec = (makemutable 0 0a)
     arg_names =
       (makemutable 0
         (field 0 (field 39 (field 3 (field 11 (global Misc!))))))
     reset_arguments =
       (function param
         (funct-body utils/clflags.ml(454)<ghost>:17088-17142
           (before utils/clflags.ml(455):17095-17142
             (seq (setfield_ptr 0 arg_spec 0a)
               (before utils/clflags.ml(456):17113-17142
                 (setfield_ptr 0 arg_names
                   (field 0 (field 39 (field 3 (field 11 (global Misc!)))))))))))
     add_arguments =
       (function loc args
         (funct-body utils/clflags.ml(458)<ghost>:17162-17613
           (before utils/clflags.ml(459):17175-17613
             (after utils/clflags.ml(459):17175-17613
               (apply (field 14 (global Stdlib__list!))
                 (function arg
                   (funct-body utils/clflags.ml(459):17185-17608
                     (let (arg_name =a (field 0 arg))
                       (before utils/clflags.ml(460):17226-17604
                         (try
                           (let
                             (loc2 =
                                (after utils/clflags.ml(461):17247-17282
                                  (apply
                                    (field 26
                                      (field 39
                                        (field 3 (field 11 (global Misc!)))))
                                    arg_name (field 0 arg_names))))
                             (before utils/clflags.ml(462):17292-17485
                               (seq
                                 (after utils/clflags.ml(462):17292-17377
                                   (apply (field 2 (global Stdlib__printf!))
                                     [0:
                                      [11:
                                       "Warning: compiler argument "
                                       [2:
                                        0a [11: " is already defined:\n" 0a]]]
                                      "Warning: compiler argument %s is already defined:\n"]
                                     arg_name))
                                 (before utils/clflags.ml(464):17385-17485
                                   (seq
                                     (after utils/clflags.ml(464):17385-17432
                                       (apply
                                         (field 2 (global Stdlib__printf!))
                                         [0:
                                          [11:
                                           "   First definition: "
                                           [2: 0a [12: '\n' 0a]]]
                                          "   First definition: %s\n"]
                                         loc2))
                                     (before utils/clflags.ml(465):17440-17484
                                       (after utils/clflags.ml(465):17440-17484
                                         (apply
                                           (field 2 (global Stdlib__printf!))
                                           [0:
                                            [11:
                                             "   New definition: "
                                             [2: 0a [12: '\n' 0a]]]
                                            "   New definition: %s\n"]
                                           loc))))))))
                          with exn
                           (if (== exn (field 7 (global Stdlib!)))
                             (before utils/clflags.ml(467):17514-17604
                               (seq
                                 (setfield_ptr 0 arg_spec
                                   (after utils/clflags.ml(467):17526-17545
                                     (apply (field 36 (global Stdlib!))
                                       (field 0 arg_spec)
                                       (makeblock 0 arg 0a))))
                                 (before utils/clflags.ml(468):17553-17604
                                   (setfield_ptr 0 arg_names
                                     (after utils/clflags.ml(468):17566-17604
                                       (apply
                                         (field 3
                                           (field 39
                                             (field 3
                                               (field 11 (global Misc!)))))
                                         arg_name loc (field 0 arg_names)))))))
                             (reraise exn)))))))
                 args)))))
     print_arguments =
       (function usage
         (funct-body utils/clflags.ml(471)<ghost>:17635-17670
           (before utils/clflags.ml(472):17645-17670
             (after utils/clflags.ml(472):17645-17670
               (apply (field 8 (global Stdlib__arg!)) (field 0 arg_spec)
                 usage)))))
     parse_arguments =
       (function f msg
         (funct-body utils/clflags.ml(477)<ghost>:17861-18120
           (before utils/clflags.ml(478):17871-18120
             (try
               (let (argv = (makemutable 0 (caml_sys_argv 0a)))
                 (before utils/clflags.ml(480):17910-18011
                   (let
                     (current =
                        (makemutable 0 (int)
                          (field 0 (field 11 (global Stdlib__arg!)))))
                     (before utils/clflags.ml(481):17950-18011
                       (after utils/clflags.ml(481):17950-18011
                         (apply (field 4 (global Stdlib__arg!)) current argv
                           arg_spec f msg))))))
              with exn
               (let (tag =a (field 0 exn))
                 (if (== tag (field 7 (global Stdlib__arg!)))
                   (let (msg =a (field 1 exn))
                     (before utils/clflags.ml(483):18038-18069
                       (seq
                         (after utils/clflags.ml(483):18038-18061
                           (apply (field 2 (global Stdlib__printf!))
                             [0: [2: 0a 0a] "%s"] msg))
                         (before utils/clflags.ml(483):18063-18069
                           (after utils/clflags.ml(483):18063-18069
                             (apply (field 98 (global Stdlib!)) 2))))))
                   (let (tag =a (field 0 exn))
                     (if (== tag (field 6 (global Stdlib__arg!)))
                       (let (msg =a (field 1 exn))
                         (before utils/clflags.ml(484):18090-18120
                           (seq
                             (after utils/clflags.ml(484):18090-18112
                               (apply (field 1 (global Stdlib__printf!))
                                 [0: [2: 0a 0a] "%s"] msg))
                             (before utils/clflags.ml(484):18114-18120
                               (after utils/clflags.ml(484):18114-18120
                                 (apply (field 98 (global Stdlib!)) 0))))))
                       (reraise exn))))))))))
    (pseudo _none_(0)<ghost>:-1--1
      (makeblock 0
        (makeblock 0 (field 6 Int_arg_helper) (field 7 Int_arg_helper)
          (field 8 Int_arg_helper))
        (makeblock 0 (field 6 Float_arg_helper) (field 7 Float_arg_helper)
          (field 8 Float_arg_helper))
        classic_arguments o1_arguments o2_arguments o3_arguments
        use_inlining_arguments_set objfiles ccobjs dllibs compile_only
        output_name include_dirs no_std_include print_types make_archive
        debug debug_full unsafe use_linscan link_everything custom_runtime
        no_check_prims bytecode_compatible_32 output_c_object
        output_complete_object all_ccopts classic nopervasives
        match_context_rows open_modules preprocessor all_ppx absname
        annotations binary_annotations use_threads noassert verbose noprompt
        nopromptcont init_file noinit noversion use_prims use_runtime plugin
        principal real_paths recursive_types strict_sequence strict_formats
        applicative_functors make_runtime c_compiler no_auto_link dllpaths
        make_package for_package error_size float_const_prop
        transparent_modules unique_ids dump_source dump_parsetree
        dump_typedtree dump_rawlambda dump_lambda dump_rawclambda
        dump_clambda dump_rawflambda dump_flambda dump_flambda_let dump_instr
        keep_camlprimc_file keep_asm_file optimize_for_speed dump_cmm
        dump_selection dump_cse dump_live dump_avail debug_runavail
        dump_spill dump_split dump_interf dump_prefer dump_regalloc
        dump_reload dump_scheduling dump_linear dump_interval
        keep_startup_file dump_combine native_code default_inline_threshold
        inline_threshold inlining_report simplify_rounds
        default_simplify_rounds rounds default_inline_max_unroll
        inline_max_unroll default_inline_toplevel_threshold
        inline_toplevel_threshold default_inline_call_cost
        default_inline_alloc_cost default_inline_prim_cost
        default_inline_branch_cost default_inline_indirect_cost
        default_inline_lifting_benefit inline_call_cost inline_alloc_cost
        inline_prim_cost inline_branch_cost inline_indirect_cost
        inline_lifting_benefit default_inline_branch_factor
        inline_branch_factor dont_write_files std_include_flag
        std_include_dir shared dlcode pic_code runtime_variant with_runtime
        force_slash keep_docs keep_locs unsafe_string opaque profile_columns
        flambda_invariant_checks unbox_closures unbox_closures_factor
        default_unbox_closures_factor unbox_free_vars_of_closures
        unbox_specialised_args clambda_checks default_inline_max_depth
        inline_max_depth remove_unused_arguments dump_flambda_verbose
        classic_inlining afl_instrument afl_inst_ratio all_passes dumped_pass
        set_dumped_pass dump_into_file color color_reader error_style
        error_style_reader unboxed_types insn_sched insn_sched_default
        (makeblock 0 (field 1 Compiler_pass) (field 0 Compiler_pass)
          (field 3 Compiler_pass) (field 4 Compiler_pass))
        stop_after should_stop_after arg_spec add_arguments parse_arguments
        print_arguments reset_arguments))))
