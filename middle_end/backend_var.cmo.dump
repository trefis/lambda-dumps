(setglobal Backend_var!
  (let
    (include =a (global Ident!)
     equal =a (field 1 include)
     hash =a (field 2 include)
     output =a (field 3 include)
     print =a (field 4 include)
     print_with_scope =a (field 8 include)
     create_scoped =a (field 9 include)
     create_local =a (field 10 include)
     create_persistent =a (field 11 include)
     create_predef =a (field 12 include)
     rename =a (field 13 include)
     name =a (field 14 include)
     unique_name =a (field 15 include)
     unique_toplevel_name =a (field 16 include)
     persistent =a (field 17 include)
     same =a (field 18 include)
     compare =a (field 19 include)
     global =a (field 20 include)
     is_predef =a (field 21 include)
     scope =a (field 22 include)
     lowest_scope =a (field 23 include)
     highest_scope =a (field 24 include)
     reinit =a (field 25 include)
     empty =a (field 26 include)
     add =a (field 27 include)
     find_same =a (field 28 include)
     find_name =a (field 29 include)
     find_all =a (field 30 include)
     fold_name =a (field 31 include)
     fold_all =a (field 32 include)
     iter =a (field 33 include)
     remove =a (field 34 include)
     make_key_generator =a (field 35 include)
     Provenance =
       (module-defn(Provenance) middle_end/backend_var.ml(21):1078-1766
         (let
           (print =
              (function ppf param
                (funct-body middle_end/backend_var.ml(28)<ghost>:1219-1535
                  (let
                    (original_ident =a (field 2 param)
                     location =a (field 1 param)
                     module_path =a (field 0 param))
                    (before middle_end/backend_var.ml(29):1272-1535
                      (after middle_end/backend_var.ml(29):1272-1535
                        (apply (field 122 (global Stdlib__format!)) ppf
                          [0:
                           [18:
                            [1: [0: [11: "<hov 1>" 0a] "<hov 1>"]]
                            [12:
                             '('
                             [18:
                              [1: [0: [11: "<hov 1>" 0a] "<hov 1>"]]
                              [11:
                               "(module_path"
                               [17:
                                [0: "@ " 1 0]
                                [15:
                                 [12:
                                  ')'
                                  [17:
                                   0a
                                   [17:
                                    [0: "@ " 1 0]
                                    [18:
                                     [1: [0: [11: "<hov 1>" 0a] "<hov 1>"]]
                                     [11:
                                      "(location"
                                      [17:
                                       [0: "@ " 1 0]
                                       [15:
                                        [12:
                                         ')'
                                         [17:
                                          0a
                                          [17:
                                           [0: "@ " 1 0]
                                           [18:
                                            [1:
                                             [0:
                                              [11: "<hov 1>" 0a] "<hov 1>"]]
                                            [11:
                                             "(original_ident"
                                             [17:
                                              [0: "@ " 1 0]
                                              [15:
                                               [12:
                                                ')'
                                                [17:
                                                 0a [12: ')' [17: 0a 0a]]]]]]]]]]]]]]]]]]]]]]]]
                           "@[<hov 1>(@[<hov 1>(module_path@ %a)@]@ @[<hov 1>(location@ %a)@]@ @[<hov 1>(original_ident@ %a)@])@]"]
                          (field 8 (global Path!)) module_path
                          (field 9 (global Debuginfo!)) location
                          (field 4 (global Ident!)) original_ident))))))
            create =
              (function module_path location original_ident
                (funct-body middle_end/backend_var.ml(38)<ghost>:1550-1653
                  (before middle_end/backend_var.ml(39):1595-1653
                    (makeblock 0 module_path location original_ident))))
            module_path =
              (function t
                (funct-body middle_end/backend_var.ml(44)<ghost>:1673-1690
                  (before middle_end/backend_var.ml(44):1677-1690
                    (field 0 t))))
            location =
              (function t
                (funct-body middle_end/backend_var.ml(45)<ghost>:1706-1720
                  (before middle_end/backend_var.ml(45):1710-1720
                    (field 1 t))))
            original_ident =
              (function t
                (funct-body middle_end/backend_var.ml(46)<ghost>:1742-1762
                  (before middle_end/backend_var.ml(46):1746-1762
                    (field 2 t)))))
           (pseudo middle_end/backend_var.ml(21):1098-1766
             (makeblock 0 print create module_path location original_ident))))
     With_provenance =
       (module-defn(With_provenance) middle_end/backend_var.ml(49):1768-2767
         (let
           (create =
              (function provenance var
                (funct-body middle_end/backend_var.ml(57)<ghost>:1962-2104
                  (before middle_end/backend_var.ml(58):1984-2104
                    (if provenance
                      (let (provenance =a (field 0 provenance))
                        (before middle_end/backend_var.ml(60):2068-2104
                          (makeblock 1 var provenance)))
                      (before middle_end/backend_var.ml(59):2020-2042
                        (makeblock 0 var))))))
            var =
              (function t
                (funct-body middle_end/backend_var.ml(62)<ghost>:2116-2219
                  (before middle_end/backend_var.ml(63):2124-2219
                    (let (var =a (field 0 t))
                      (before middle_end/backend_var.ml(65):2216-2219 var)))))
            provenance =
              (function t
                (funct-body middle_end/backend_var.ml(67)<ghost>:2238-2359
                  (before middle_end/backend_var.ml(68):2246-2359
                    (switch* t
                     case tag 0:
                      (before middle_end/backend_var.ml(69):2289-2293 0a)
                     case tag 1:
                      (let (provenance =a (field 1 t))
                        (before middle_end/backend_var.ml(70):2344-2359
                          (makeblock 0 provenance)))))))
            name =
              (function t
                (funct-body middle_end/backend_var.ml(72)<ghost>:2372-2388
                  (before middle_end/backend_var.ml(72):2376-2388
                    (after middle_end/backend_var.ml(72):2376-2388
                      (apply name
                        (after middle_end/backend_var.ml(72):2381-2388
                          (apply var t)))))))
            rename =
              (function t
                (funct-body middle_end/backend_var.ml(74)<ghost>:2403-2565
                  (before middle_end/backend_var.ml(75):2411-2565
                    (let
                      (var =
                         (after middle_end/backend_var.ml(75):2421-2435
                           (apply rename
                             (after middle_end/backend_var.ml(75):2428-2435
                               (apply var t)))))
                      (before middle_end/backend_var.ml(76):2443-2565
                        (let
                          (*match* =
                             (after middle_end/backend_var.ml(76):2449-2461
                               (apply provenance t)))
                          (if *match*
                            (let (provenance =a (field 0 *match*))
                              (before middle_end/backend_var.ml(78):2529-2565
                                (makeblock 1 var provenance)))
                            (before middle_end/backend_var.ml(77):2481-2503
                              (makeblock 0 var)))))))))
            print =
              (function ppf t
                (funct-body middle_end/backend_var.ml(80)<ghost>:2579-2763
                  (before middle_end/backend_var.ml(81):2591-2763
                    (let
                      (*match* =
                         (after middle_end/backend_var.ml(81):2597-2609
                           (apply provenance t)))
                      (if *match*
                        (let (provenance =a (field 0 *match*))
                          (before middle_end/backend_var.ml(84):2678-2763
                            (after middle_end/backend_var.ml(84):2678-2763
                              (apply (field 122 (global Stdlib__format!)) ppf
                                [0:
                                 [15: [12: '[' [15: [12: ']' 0a]]]] "%a[%a]"]
                                print
                                (after middle_end/backend_var.ml(85):2720-2727
                                  (apply var t))
                                (field 0 Provenance) provenance))))
                        (before middle_end/backend_var.ml(82):2629-2646
                          (after middle_end/backend_var.ml(82):2629-2646
                            (apply print ppf
                              (after middle_end/backend_var.ml(82):2639-2646
                                (apply var t)))))))))))
           (pseudo middle_end/backend_var.ml(49):1793-2767
             (makeblock 0 create var provenance name rename print)))))
    (pseudo _none_(0)<ghost>:-1--1
      (makeblock 0 equal hash output print print_with_scope create_scoped
        create_local create_persistent create_predef rename name unique_name
        unique_toplevel_name persistent same compare global is_predef scope
        lowest_scope highest_scope reinit empty add find_same find_name
        find_all fold_name fold_all iter remove make_key_generator
        (makeblock 0 (field 1 Provenance) (field 2 Provenance)
          (field 3 Provenance) (field 4 Provenance) (field 0 Provenance))
        (makeblock 0 (field 5 With_provenance) (field 0 With_provenance)
          (field 1 With_provenance) (field 2 With_provenance)
          (field 3 With_provenance) (field 4 With_provenance))))))
