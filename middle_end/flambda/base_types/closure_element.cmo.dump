(setglobal Closure_element!
  (let
    (include =a (global Variable!)
     T =a (field 0 include)
     equal =a (field 1 include)
     hash =a (field 2 include)
     compare =a (field 3 include)
     output =a (field 4 include)
     print =a (field 5 include)
     Set =a (field 6 include)
     Map =a (field 7 include)
     Tbl =a (field 8 include)
     in_compilation_unit =a (field 12 include)
     unique_name =a (field 14 include)
     get_compilation_unit =a (field 15 include)
     output_full =a (field 21 include)
     wrap =
       (function t
         (funct-body middle_end/flambda/base_types/closure_element.ml(22)<ghost>:1265-1270
           (before middle_end/flambda/base_types/closure_element.ml(22):1269-1270
             t)))
     unwrap =
       (function t
         (funct-body middle_end/flambda/base_types/closure_element.ml(23)<ghost>:1282-1287
           (before middle_end/flambda/base_types/closure_element.ml(23):1286-1287
             t)))
     wrap_map =
       (function t
         (funct-body middle_end/flambda/base_types/closure_element.ml(25)<ghost>:1302-1307
           (before middle_end/flambda/base_types/closure_element.ml(25):1306-1307
             t)))
     unwrap_set =
       (function t
         (funct-body middle_end/flambda/base_types/closure_element.ml(26)<ghost>:1323-1328
           (before middle_end/flambda/base_types/closure_element.ml(26):1327-1328
             t))))
    (pseudo _none_(0)<ghost>:-1--1
      (makeblock 0 T equal hash compare output print Set Map Tbl wrap unwrap
        wrap_map unwrap_set in_compilation_unit get_compilation_unit
        unique_name output_full))))
