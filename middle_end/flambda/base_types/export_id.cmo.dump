(setglobal Export_id!
  (let
    (Id =
       (module-defn(Id) middle_end/flambda/base_types/export_id.ml(20):1238-1288
         (apply (field 0 (global Id_types!))
           (pseudo middle_end/flambda/base_types/export_id.ml(20):1277-1287
             (makeblock 0))))
     Unit_id =
       (module-defn(Unit_id) middle_end/flambda/base_types/export_id.ml(21):1289-1345
         (apply (apply (field 1 (global Id_types!)) Id)
           (let (let = (global Compilation_unit!))
             (makeblock 0 (field 1 let) (field 2 let) (field 3 let)
               (field 4 let) (field 5 let)))))
     include =
       (apply (field 1 (global Identifiable!))
         (makeblock 0 (field 0 Unit_id) (field 2 Unit_id) (field 1 Unit_id)
           (field 5 Unit_id) (field 6 Unit_id)))
     T =a (field 0 include)
     equal =a (field 1 include)
     hash =a (field 2 include)
     compare =a (field 3 include)
     output =a (field 4 include)
     print =a (field 5 include)
     Set =a (field 6 include)
     Map =a (field 7 include)
     Tbl =a (field 8 include)
     create = (field 7 Unit_id)
     get_compilation_unit = (field 8 Unit_id)
     name = (field 3 Unit_id))
    (pseudo _none_(0)<ghost>:-1--1
      (makeblock 0 T equal hash compare output print Set Map Tbl create name
        get_compilation_unit))))
