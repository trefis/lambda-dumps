(setglobal Inlining_cost!
  (let
    (prim_size =
       (function prim args : int
         (funct-body middle_end/flambda/inlining_cost.ml(22)<ghost>:1314-2691
           (before middle_end/flambda/inlining_cost.ml(23):1361-2691
             (catch
               (catch
                 (catch
                   (switch prim
                    case int 1: (exit 3)
                    case int 2: (exit 3)
                    case int 22:
                     (before middle_end/flambda/inlining_cost.ml(39):1892-1893
                       5)
                    case int 24:
                     (before middle_end/flambda/inlining_cost.ml(41):1935-1936
                       6)
                    case int 25:
                     (before middle_end/flambda/inlining_cost.ml(40):1914-1915
                       5)
                    case int 28: (exit 2)
                    case int 29: (exit 2)
                    case tag 1:
                     (before middle_end/flambda/inlining_cost.ml(24):1397-1417
                       (+ 5
                         (after middle_end/flambda/inlining_cost.ml(24):1401-1417
                           (apply (field 0 (global Stdlib__list!)) args))))
                    case tag 2:
                     (before middle_end/flambda/inlining_cost.ml(25):1434-1435
                       1)
                    case tag 3:
                     (let (init =a (field 2 prim) isptr =a (field 1 prim))
                       (before middle_end/flambda/inlining_cost.ml(27):1474-1683
                         (if (>= init 2)
                           (before middle_end/flambda/inlining_cost.ml(28):1525-1526
                             1)
                           (before middle_end/flambda/inlining_cost.ml(30):1615-1675
                             (if isptr
                               (before middle_end/flambda/inlining_cost.ml(31):1651-1652
                                 4)
                               (before middle_end/flambda/inlining_cost.ml(32):1674-1675
                                 1))))))
                    case tag 5:
                     (before middle_end/flambda/inlining_cost.ml(34):1705-1706
                       1)
                    case tag 6:
                     (before middle_end/flambda/inlining_cost.ml(35):1731-1732
                       1)
                    case tag 7:
                     (before middle_end/flambda/inlining_cost.ml(36):1753-1774
                       (+ 10
                         (after middle_end/flambda/inlining_cost.ml(36):1758-1774
                           (apply (field 0 (global Stdlib__list!)) args))))
                    case tag 8:
                     (let (p =a (field 0 prim))
                       (before middle_end/flambda/inlining_cost.ml(37):1791-1852
                         (+
                           (if (field 2 p)
                             (before middle_end/flambda/inlining_cost.ml(37):1823-1825
                               10)
                             (before middle_end/flambda/inlining_cost.ml(37):1831-1832
                               4))
                           (after middle_end/flambda/inlining_cost.ml(37):1836-1852
                             (apply (field 0 (global Stdlib__list!)) args)))))
                    case tag 9:
                     (before middle_end/flambda/inlining_cost.ml(38):1869-1870
                       4)
                    case tag 16:
                     (before middle_end/flambda/inlining_cost.ml(43):1990-2010
                       (+ 5
                         (after middle_end/flambda/inlining_cost.ml(43):1994-2010
                           (apply (field 0 (global Stdlib__list!)) args))))
                    case tag 18:
                     (let (*match* =a (field 0 prim))
                       (if *match*
                         (before middle_end/flambda/inlining_cost.ml(45):2065-2066
                           2)
                         (before middle_end/flambda/inlining_cost.ml(44):2041-2042
                           6)))
                    case tag 19:
                     (let (*match* =a (field 0 prim))
                       (if *match*
                         (before middle_end/flambda/inlining_cost.ml(47):2118-2119
                           2)
                         (before middle_end/flambda/inlining_cost.ml(46):2095-2097
                           12)))
                    case tag 20:
                     (let (*match* =a (field 0 prim))
                       (if *match*
                         (before middle_end/flambda/inlining_cost.ml(49):2171-2172
                           4)
                         (before middle_end/flambda/inlining_cost.ml(48):2148-2150
                           16)))
                    case tag 21:
                     (let (*match* =a (field 0 prim))
                       (if *match*
                         (before middle_end/flambda/inlining_cost.ml(51):2224-2225
                           8)
                         (before middle_end/flambda/inlining_cost.ml(50):2201-2203
                           18)))
                    case tag 22:
                     (let (*match* =a (field 0 prim))
                       (if *match*
                         (before middle_end/flambda/inlining_cost.ml(53):2277-2279
                           10)
                         (before middle_end/flambda/inlining_cost.ml(52):2254-2256
                           22)))
                    case tag 39:
                     (let (ndims =a (field 1 prim))
                       (before middle_end/flambda/inlining_cost.ml(54):2317-2330
                         (+ 4 (* ndims 6))))
                    case tag 40:
                     (let (ndims =a (field 1 prim))
                       (before middle_end/flambda/inlining_cost.ml(55):2368-2381
                         (+ 4 (* ndims 6))))
                    default: (exit 4))
                  with (4)
                   (before middle_end/flambda/inlining_cost.ml(61):2690-2691
                     2))
                with (2)
                 (before middle_end/flambda/inlining_cost.ml(42):1968-1969 6))
              with (3)
               (before middle_end/flambda/inlining_cost.ml(57):2412-2548
                 (after middle_end/flambda/inlining_cost.ml(57):2412-2548
                   (apply (field 0 (global Misc!))
                     "Psequand and Psequor are not allowed in Prim expressions; translate out instead (cf. closure_conversion.ml)")))))))
     direct_call_size =[int] 4
     project_size =[int] 1
     lambda_smaller' =
       (function lam threshold[int]
         (funct-body middle_end/flambda/inlining_cost.ml(70)<ghost>:2925-5362
           (before middle_end/flambda/inlining_cost.ml(71):2949-5362
             (let (size = (makemutable 0 (int) 0))
               (before middle_end/flambda/inlining_cost.ml(72):2971-5362
                 (letrec
                   (lambda_size
                      (function lam
                        (funct-body middle_end/flambda/inlining_cost.ml(72)<ghost>:2991-4594
                          (before middle_end/flambda/inlining_cost.ml(73):3015-4594
                            (seq
                              (if
                                (after middle_end/flambda/inlining_cost.ml(73):3018-3035
                                  (apply
                                    (field 3
                                      (global Int_replace_polymorphic_compare!))
                                    (field 0 size) threshold))
                                (before middle_end/flambda/inlining_cost.ml(73):3041-3051
                                  (raise
                                    (after middle_end/flambda/inlining_cost.ml(73):3047-3051
                                      (field 2 (global Stdlib!)))))
                                0a)
                              (before middle_end/flambda/inlining_cost.ml(74):3057-4594
                                (switch* lam
                                 case int 0:
                                  (before middle_end/flambda/inlining_cost.ml(83):3369-3371
                                    0a)
                                 case tag 0:
                                  (before middle_end/flambda/inlining_cost.ml(75):3087-3089
                                    0a)
                                 case tag 1:
                                  (let
                                    (*match* =a (field 0 lam)
                                     body =a (field 2 *match*)
                                     defining_expr =a (field 1 *match*))
                                    (before middle_end/flambda/inlining_cost.ml(85):3418-3473
                                      (seq
                                        (after middle_end/flambda/inlining_cost.ml(85):3418-3449
                                          (apply lambda_named_size
                                            defining_expr))
                                        (before middle_end/flambda/inlining_cost.ml(86):3457-3473
                                          (after middle_end/flambda/inlining_cost.ml(86):3457-3473
                                            (apply lambda_size body))))))
                                 case tag 2:
                                  (let
                                    (*match* =a (field 0 lam)
                                     body =a (field 3 *match*))
                                    (before middle_end/flambda/inlining_cost.ml(87):3504-3520
                                      (after middle_end/flambda/inlining_cost.ml(87):3504-3520
                                        (apply lambda_size body))))
                                 case tag 3:
                                  (let
                                    (body =a (field 1 lam)
                                     bindings =a (field 0 lam))
                                    (before middle_end/flambda/inlining_cost.ml(89):3561-3643
                                      (seq
                                        (after middle_end/flambda/inlining_cost.ml(89):3561-3619
                                          (apply
                                            (field 14 (global Stdlib__list!))
                                            (function param
                                              (funct-body middle_end/flambda/inlining_cost.ml(89):3571-3610
                                                (let (lam =a (field 1 param))
                                                  (before middle_end/flambda/inlining_cost.ml(89):3588-3609
                                                    (after middle_end/flambda/inlining_cost.ml(89):3588-3609
                                                      (apply
                                                        lambda_named_size
                                                        lam))))))
                                            bindings))
                                        (before middle_end/flambda/inlining_cost.ml(90):3627-3643
                                          (after middle_end/flambda/inlining_cost.ml(90):3627-3643
                                            (apply lambda_size body))))))
                                 case tag 4:
                                  (let
                                    (*match* =a (field 0 lam)
                                     direct =a (field 2 *match*))
                                    (before middle_end/flambda/inlining_cost.ml(77):3151-3278
                                      (let
                                        (call_cost =[int]
                                           (if direct
                                             (before middle_end/flambda/inlining_cost.ml(78):3221-3237
                                               direct_call_size)
                                             (before middle_end/flambda/inlining_cost.ml(78):3205-3206
                                               6)))
                                        (before middle_end/flambda/inlining_cost.ml(80):3253-3278
                                          (setfield_imm 0 size
                                            (+ (field 0 size) call_cost))))))
                                 case tag 5:
                                  (before middle_end/flambda/inlining_cost.ml(82):3323-3340
                                    (setfield_imm 0 size
                                      (+ (field 0 size) 8)))
                                 case tag 6:
                                  (before middle_end/flambda/inlining_cost.ml(81):3297-3306
                                    (+:=1 size))
                                 case tag 7:
                                  (let
                                    (ifnot =a (field 2 lam)
                                     ifso =a (field 1 lam))
                                    (before middle_end/flambda/inlining_cost.ml(109):4379-4439
                                      (seq
                                        (setfield_imm 0 size
                                          (+ (field 0 size) 2))
                                        (before middle_end/flambda/inlining_cost.ml(110):4404-4439
                                          (seq
                                            (after middle_end/flambda/inlining_cost.ml(110):4404-4420
                                              (apply lambda_size ifso))
                                            (before middle_end/flambda/inlining_cost.ml(110):4422-4439
                                              (after middle_end/flambda/inlining_cost.ml(110):4422-4439
                                                (apply lambda_size ifnot))))))))
                                 case tag 8:
                                  (let (sw =a (field 1 lam))
                                    (before middle_end/flambda/inlining_cost.ml(92):3674-3936
                                      (let
                                        (aux =
                                           (function param
                                             (funct-body middle_end/flambda/inlining_cost.ml(92):3684-3731
                                               (catch
                                                 (if param
                                                   (let
                                                     (*match* =a
                                                        (field 1 param))
                                                     (if *match*
                                                       (before middle_end/flambda/inlining_cost.ml(92):3704-3721
                                                         (setfield_imm 0 size
                                                           (+ (field 0 size)
                                                             5)))
                                                       (exit 11)))
                                                   (exit 11))
                                                with (11)
                                                 (before middle_end/flambda/inlining_cost.ml(92):3729-3731
                                                   0a)))))
                                        (before middle_end/flambda/inlining_cost.ml(93):3741-3936
                                          (seq
                                            (after middle_end/flambda/inlining_cost.ml(93):3741-3754
                                              (apply aux (field 1 sw)))
                                            (before middle_end/flambda/inlining_cost.ml(93):3756-3936
                                              (seq
                                                (after middle_end/flambda/inlining_cost.ml(93):3756-3769
                                                  (apply aux (field 3 sw)))
                                                (before middle_end/flambda/inlining_cost.ml(94):3777-3936
                                                  (seq
                                                    (after middle_end/flambda/inlining_cost.ml(94):3777-3830
                                                      (apply
                                                        (field 14
                                                          (global Stdlib__list!))
                                                        (function param
                                                          (funct-body middle_end/flambda/inlining_cost.ml(94):3787-3820
                                                            (let
                                                              (lam =a
                                                                 (field 1
                                                                   param))
                                                              (before middle_end/flambda/inlining_cost.ml(94):3804-3819
                                                                (after middle_end/flambda/inlining_cost.ml(94):3804-3819
                                                                  (apply
                                                                    lambda_size
                                                                    lam))))))
                                                        (field 1 sw)))
                                                    (before middle_end/flambda/inlining_cost.ml(95):3838-3936
                                                      (seq
                                                        (after middle_end/flambda/inlining_cost.ml(95):3838-3891
                                                          (apply
                                                            (field 14
                                                              (global Stdlib__list!))
                                                            (function param
                                                              (funct-body middle_end/flambda/inlining_cost.ml(95):3848-3881
                                                                (let
                                                                  (lam =a
                                                                    (field 1
                                                                    param))
                                                                  (before middle_end/flambda/inlining_cost.ml(95):3865-3880
                                                                    (after middle_end/flambda/inlining_cost.ml(95):3865-3880
                                                                    (apply
                                                                    lambda_size
                                                                    lam))))))
                                                            (field 3 sw)))
                                                        (before middle_end/flambda/inlining_cost.ml(96):3899-3936
                                                          (after middle_end/flambda/inlining_cost.ml(96):3899-3936
                                                            (apply
                                                              (field 8
                                                                (global Stdlib__option!))
                                                              lambda_size
                                                              (field 4 sw)))))))))))))))
                                 case tag 9:
                                  (let
                                    (def =a (field 2 lam)
                                     sw =a (field 1 lam))
                                    (before middle_end/flambda/inlining_cost.ml(98):3979-4107
                                      (seq
                                        (after middle_end/flambda/inlining_cost.ml(98):3979-4072
                                          (apply
                                            (field 14 (global Stdlib__list!))
                                            (function param
                                              (funct-body middle_end/flambda/inlining_cost.ml(98):3989-4061
                                                (let (lam =a (field 1 param))
                                                  (before middle_end/flambda/inlining_cost.ml(99):4016-4060
                                                    (seq
                                                      (setfield_imm 0 size
                                                        (+ (field 0 size) 2))
                                                      (before middle_end/flambda/inlining_cost.ml(100):4045-4060
                                                        (after middle_end/flambda/inlining_cost.ml(100):4045-4060
                                                          (apply lambda_size
                                                            lam))))))))
                                            sw))
                                        (before middle_end/flambda/inlining_cost.ml(102):4080-4107
                                          (after middle_end/flambda/inlining_cost.ml(102):4080-4107
                                            (apply
                                              (field 8
                                                (global Stdlib__option!))
                                              lambda_size def))))))
                                 case tag 10:
                                  (before middle_end/flambda/inlining_cost.ml(103):4132-4134
                                    0a)
                                 case tag 11:
                                  (let
                                    (handler =a (field 3 lam)
                                     body =a (field 2 lam))
                                    (before middle_end/flambda/inlining_cost.ml(105):4185-4233
                                      (seq (+:=1 size)
                                        (before middle_end/flambda/inlining_cost.ml(105):4196-4233
                                          (seq
                                            (after middle_end/flambda/inlining_cost.ml(105):4196-4212
                                              (apply lambda_size body))
                                            (before middle_end/flambda/inlining_cost.ml(105):4214-4233
                                              (after middle_end/flambda/inlining_cost.ml(105):4214-4233
                                                (apply lambda_size handler))))))))
                                 case tag 12:
                                  (let
                                    (handler =a (field 2 lam)
                                     body =a (field 0 lam))
                                    (before middle_end/flambda/inlining_cost.ml(107):4277-4333
                                      (seq
                                        (setfield_imm 0 size
                                          (+ (field 0 size) 8))
                                        (before middle_end/flambda/inlining_cost.ml(107):4296-4333
                                          (seq
                                            (after middle_end/flambda/inlining_cost.ml(107):4296-4312
                                              (apply lambda_size body))
                                            (before middle_end/flambda/inlining_cost.ml(107):4314-4333
                                              (after middle_end/flambda/inlining_cost.ml(107):4314-4333
                                                (apply lambda_size handler))))))))
                                 case tag 13:
                                  (let
                                    (body =a (field 1 lam)
                                     cond =a (field 0 lam))
                                    (before middle_end/flambda/inlining_cost.ml(112):4474-4527
                                      (seq
                                        (setfield_imm 0 size
                                          (+ (field 0 size) 2))
                                        (before middle_end/flambda/inlining_cost.ml(112):4493-4527
                                          (seq
                                            (after middle_end/flambda/inlining_cost.ml(112):4493-4509
                                              (apply lambda_size cond))
                                            (before middle_end/flambda/inlining_cost.ml(112):4511-4527
                                              (after middle_end/flambda/inlining_cost.ml(112):4511-4527
                                                (apply lambda_size body))))))))
                                 case tag 14:
                                  (let
                                    (*match* =a (field 0 lam)
                                     body =a (field 4 *match*))
                                    (before middle_end/flambda/inlining_cost.ml(114):4559-4594
                                      (seq
                                        (setfield_imm 0 size
                                          (+ (field 0 size) 4))
                                        (before middle_end/flambda/inlining_cost.ml(114):4578-4594
                                          (after middle_end/flambda/inlining_cost.ml(114):4578-4594
                                            (apply lambda_size body))))))))))))
                     lambda_named_size
                       (function named
                         (funct-body middle_end/flambda/inlining_cost.ml(115)<ghost>:4619-5250
                           (before middle_end/flambda/inlining_cost.ml(116):4649-5250
                             (seq
                               (if
                                 (after middle_end/flambda/inlining_cost.ml(116):4652-4669
                                   (apply
                                     (field 3
                                       (global Int_replace_polymorphic_compare!))
                                     (field 0 size) threshold))
                                 (before middle_end/flambda/inlining_cost.ml(116):4675-4685
                                   (raise
                                     (after middle_end/flambda/inlining_cost.ml(116):4681-4685
                                       (field 2 (global Stdlib!)))))
                                 0a)
                               (before middle_end/flambda/inlining_cost.ml(117):4691-5250
                                 (catch
                                   (catch
                                     (catch
                                       (switch* named
                                        case tag 0: (exit 12)
                                        case tag 1: (exit 13)
                                        case tag 2: (exit 13)
                                        case tag 3: (exit 12)
                                        case tag 4:
                                         (before middle_end/flambda/inlining_cost.ml(120):4822-4831
                                           (+:=1 size))
                                        case tag 5:
                                         (let
                                           (*match* =a (field 0 named)
                                            ffuns =a (field 0 *match*))
                                           (before middle_end/flambda/inlining_cost.ml(122):4892-5009
                                             (after middle_end/flambda/inlining_cost.ml(122):4892-5009
                                               (apply
                                                 (field 11
                                                   (field 7
                                                     (global Variable!)))
                                                 (function param ffun
                                                   (funct-body middle_end/flambda/inlining_cost.ml(122):4910-4990
                                                     (before middle_end/flambda/inlining_cost.ml(123):4968-4989
                                                       (after middle_end/flambda/inlining_cost.ml(123):4968-4989
                                                         (apply lambda_size
                                                           (field 2 ffun))))))
                                                 (field 3 ffuns)))))
                                        case tag 6: (exit 14)
                                        case tag 7:
                                         (before middle_end/flambda/inlining_cost.ml(128):5133-5142
                                           (+:=1 size))
                                        case tag 8: (exit 14)
                                        case tag 9:
                                         (let
                                           (args =a (field 1 named)
                                            prim =a (field 0 named))
                                           (before middle_end/flambda/inlining_cost.ml(130):5179-5214
                                             (setfield_imm 0 size
                                               (+ (field 0 size)
                                                 (after middle_end/flambda/inlining_cost.ml(130):5195-5214
                                                   (apply prim_size prim
                                                     args))))))
                                        case tag 10:
                                         (let (expr =a (field 0 named))
                                           (before middle_end/flambda/inlining_cost.ml(131):5234-5250
                                             (after middle_end/flambda/inlining_cost.ml(131):5234-5250
                                               (apply lambda_size expr)))))
                                      with (12)
                                       (before middle_end/flambda/inlining_cost.ml(118):4743-4745
                                         0a))
                                    with (13)
                                     (before middle_end/flambda/inlining_cost.ml(119):4783-4792
                                       (+:=1 size)))
                                  with (14)
                                   (before middle_end/flambda/inlining_cost.ml(126):5059-5087
                                     (setfield_imm 0 size
                                       (+ (field 0 size) project_size))))))))))
                   (before middle_end/flambda/inlining_cost.ml(133):5258-5362
                     (try
                       (seq
                         (after middle_end/flambda/inlining_cost.ml(134):5266-5281
                           (apply lambda_size lam))
                         (before middle_end/flambda/inlining_cost.ml(135):5287-5338
                           (if
                             (after middle_end/flambda/inlining_cost.ml(135):5290-5308
                               (apply
                                 (field 4
                                   (global Int_replace_polymorphic_compare!))
                                 (field 0 size) threshold))
                             (before middle_end/flambda/inlining_cost.ml(135):5314-5324
                               (makeblock 0 (int) (field 0 size)))
                             (before middle_end/flambda/inlining_cost.ml(136):5334-5338
                               0a))))
                      with exn
                       (if (== exn (field 2 (global Stdlib!)))
                         (before middle_end/flambda/inlining_cost.ml(138):5358-5362
                           0a)
                         (reraise exn))))))))))
     lambda_size =
       (function lam : int
         (funct-body middle_end/flambda/inlining_cost.ml(140)<ghost>:5380-5584
           (before middle_end/flambda/inlining_cost.ml(141):5388-5584
             (let
               (*match* =
                  (after middle_end/flambda/inlining_cost.ml(141):5394-5427
                    (apply lambda_smaller' lam (field 18 (global Stdlib!)))))
               (if *match*
                 (let (size =a (field 0 *match*))
                   (before middle_end/flambda/inlining_cost.ml(143):5456-5460
                     size))
                 (before middle_end/flambda/inlining_cost.ml(147):5572-5584
                   (raise
                     (after middle_end/flambda/inlining_cost.ml(147):5572-5584
                       (makeblock 0 (global Assert_failure!)
                         [0: "middle_end/flambda/inlining_cost.ml" 147 6])))))))))
     Threshold =
       (module-defn(Threshold) middle_end/flambda/inlining_cost.ml(149):5586-6656
         (let
           (add =
              (function t1 t2
                (funct-body middle_end/flambda/inlining_cost.ml(155)<ghost>:5696-5900
                  (before middle_end/flambda/inlining_cost.ml(156):5708-5900
                    (let (*match* = t1 *match* = t2)
                      (if *match*
                        (if *match*
                          (let
                            (i2 =a (field 0 *match*) i1 =a (field 0 *match*))
                            (before middle_end/flambda/inlining_cost.ml(160):5862-5900
                              (makeblock 0 (int) (+ i1 i2))))
                          (let (t =a *match*)
                            (before middle_end/flambda/inlining_cost.ml(158):5778-5779
                              t)))
                        (let (t =a *match*)
                          (before middle_end/flambda/inlining_cost.ml(157):5751-5752
                            t)))))))
            sub =
              (function t1 t2
                (funct-body middle_end/flambda/inlining_cost.ml(162)<ghost>:5912-6169
                  (before middle_end/flambda/inlining_cost.ml(163):5924-6169
                    (let (*match* = t1 *match* = t2)
                      (if *match*
                        (if *match*
                          (let
                            (i2 =a (field 0 *match*) i1 =a (field 0 *match*))
                            (before middle_end/flambda/inlining_cost.ml(167):6089-6169
                              (if
                                (after middle_end/flambda/inlining_cost.ml(167):6092-6099
                                  (apply
                                    (field 3
                                      (global Int_replace_polymorphic_compare!))
                                    i1 i2))
                                (before middle_end/flambda/inlining_cost.ml(167):6105-6143
                                  (makeblock 0 (int) (- i1 i2)))
                                (before middle_end/flambda/inlining_cost.ml(168):6157-6169
                                  0a))))
                          (let (t =a *match*)
                            (before middle_end/flambda/inlining_cost.ml(165):6005-6006
                              t)))
                        (before middle_end/flambda/inlining_cost.ml(164):5967-5979
                          0a))))))
            min =
              (function t1 t2
                (funct-body middle_end/flambda/inlining_cost.ml(170)<ghost>:6181-6407
                  (before middle_end/flambda/inlining_cost.ml(171):6193-6407
                    (let (*match* = t1 *match* = t2)
                      (if *match*
                        (if *match*
                          (let
                            (i2 =a (field 0 *match*) i1 =a (field 0 *match*))
                            (before middle_end/flambda/inlining_cost.ml(175):6367-6407
                              (makeblock 0 (int)
                                (after middle_end/flambda/inlining_cost.ml(175):6396-6407
                                  (apply (field 15 (global Stdlib!)) i1 i2)))))
                          (before middle_end/flambda/inlining_cost.ml(173):6274-6286
                            0a))
                        (before middle_end/flambda/inlining_cost.ml(172):6236-6248
                          0a))))))
            equal =
              (function t1 t2
                (funct-body middle_end/flambda/inlining_cost.ml(177)<ghost>:6421-6651
                  (before middle_end/flambda/inlining_cost.ml(178):6433-6651
                    (let (*match* = t1 *match* = t2)
                      (catch
                        (if *match*
                          (let (i1 =a (field 0 *match*))
                            (if *match*
                              (let (i2 =a (field 0 *match*))
                                (before middle_end/flambda/inlining_cost.ml(181):6572-6579
                                  (after middle_end/flambda/inlining_cost.ml(181):6572-6579
                                    (apply
                                      (field 0
                                        (global Int_replace_polymorphic_compare!))
                                      i1 i2))))
                              (exit 18)))
                          (if *match* (exit 18)
                            (before middle_end/flambda/inlining_cost.ml(179):6487-6491
                              1a)))
                       with (18)
                        (before middle_end/flambda/inlining_cost.ml(183):6646-6651
                          0a)))))))
           (pseudo middle_end/flambda/inlining_cost.ml(149):5605-6656
             (makeblock 0 add sub min equal))))
     can_try_inlining =
       (function lam inlining_threshold number_of_arguments[int]
         size_from_approximation
         (funct-body middle_end/flambda/inlining_cost.ml(187)<ghost>:6679-7427
           (before middle_end/flambda/inlining_cost.ml(189):6758-7427
             (if inlining_threshold
               (let (inlining_threshold =a (field 0 inlining_threshold))
                 (before middle_end/flambda/inlining_cost.ml(192):6910-7427
                   (let (bonus =[int] number_of_arguments)
                     (before middle_end/flambda/inlining_cost.ml(197):7053-7427
                       (let
                         (size =
                            (let (than =[int] (+ inlining_threshold bonus))
                              (before middle_end/flambda/inlining_cost.ml(199):7117-7255
                                (if size_from_approximation
                                  (let
                                    (size =a
                                       (field 0 size_from_approximation))
                                    (before middle_end/flambda/inlining_cost.ml(200):7173-7213
                                      (if
                                        (after middle_end/flambda/inlining_cost.ml(200):7176-7188
                                          (apply
                                            (field 4
                                              (global Int_replace_polymorphic_compare!))
                                            size than))
                                        (before middle_end/flambda/inlining_cost.ml(200):7194-7203
                                          (makeblock 0 (int) size))
                                        (before middle_end/flambda/inlining_cost.ml(200):7209-7213
                                          0a))))
                                  (before middle_end/flambda/inlining_cost.ml(201):7230-7255
                                    (after middle_end/flambda/inlining_cost.ml(201):7230-7255
                                      (apply lambda_smaller' lam than)))))))
                         (before middle_end/flambda/inlining_cost.ml(203):7267-7427
                           (if size
                             (let (size =a (field 0 size))
                               (before middle_end/flambda/inlining_cost.ml(206):7345-7427
                                 (makeblock 0 (int)
                                   (+ (- inlining_threshold size) bonus))))
                             (before middle_end/flambda/inlining_cost.ml(204):7297-7319
                               0a))))))))
               (before middle_end/flambda/inlining_cost.ml(190):6818-6840 0a)))))
     lambda_smaller =
       (function lam than[int]
         (funct-body middle_end/flambda/inlining_cost.ml(209)<ghost>:7448-7535
           (before middle_end/flambda/inlining_cost.ml(210):7462-7535
             (let
               (*match* =
                  (after middle_end/flambda/inlining_cost.ml(210):7468-7493
                    (apply lambda_smaller' lam than)))
               (if *match*
                 (before middle_end/flambda/inlining_cost.ml(211):7513-7517
                   1a)
                 (before middle_end/flambda/inlining_cost.ml(212):7530-7535
                   0a))))))
     can_inline =
       (function lam inlining_threshold bonus[int]
         (funct-body middle_end/flambda/inlining_cost.ml(214)<ghost>:7552-7789
           (before middle_end/flambda/inlining_cost.ml(215):7586-7789
             (if inlining_threshold
               (let (inlining_threshold =a (field 0 inlining_threshold))
                 (before middle_end/flambda/inlining_cost.ml(218):7722-7789
                   (after middle_end/flambda/inlining_cost.ml(218):7722-7789
                     (apply lambda_smaller lam (+ inlining_threshold bonus)))))
               (before middle_end/flambda/inlining_cost.ml(216):7646-7651 0a)))))
     cost =
       (function flag round[int] : int
         (funct-body middle_end/flambda/inlining_cost.ml(222)<ghost>:7800-7892
           (before middle_end/flambda/inlining_cost.ml(223):7850-7892
             (after middle_end/flambda/inlining_cost.ml(223):7850-7892
               (apply (field 2 (field 0 (global Clflags!))) round flag)))))
     benefit_factor =[int] 1
     Benefit =
       (module-defn(Benefit) middle_end/flambda/inlining_cost.ml(227):7918-13788
         (let
           (zero = [0: 0 0 0 0 0 0]
            remove_call =
              (function t
                (funct-body middle_end/flambda/inlining_cost.ml(248)<ghost>:8433-8480
                  (before middle_end/flambda/inlining_cost.ml(248):8437-8480
                    (let (init = t)
                      (makeblock 0 (int,int,int,int,int,int)
                        (+ (field 0 t) 1) (field 1 init) (field 2 init)
                        (field 3 init) (field 4 init) (field 5 init))))))
            remove_alloc =
              (function t
                (funct-body middle_end/flambda/inlining_cost.ml(249)<ghost>:8500-8549
                  (before middle_end/flambda/inlining_cost.ml(249):8504-8549
                    (let (init = t)
                      (makeblock 0 (int,int,int,int,int,int) (field 0 init)
                        (+ (field 1 t) 1) (field 2 init) (field 3 init)
                        (field 4 init) (field 5 init))))))
            remove_prim =
              (function t
                (funct-body middle_end/flambda/inlining_cost.ml(250)<ghost>:8568-8615
                  (before middle_end/flambda/inlining_cost.ml(250):8572-8615
                    (let (init = t)
                      (makeblock 0 (int,int,int,int,int,int) (field 0 init)
                        (field 1 init) (+ (field 2 t) 1) (field 3 init)
                        (field 4 init) (field 5 init))))))
            remove_prims =
              (function t n[int]
                (funct-body middle_end/flambda/inlining_cost.ml(251)<ghost>:8635-8684
                  (before middle_end/flambda/inlining_cost.ml(251):8641-8684
                    (let (init = t)
                      (makeblock 0 (int,int,int,int,int,int) (field 0 init)
                        (field 1 init) (+ (field 2 t) n) (field 3 init)
                        (field 4 init) (field 5 init))))))
            remove_branch =
              (function t
                (funct-body middle_end/flambda/inlining_cost.ml(252)<ghost>:8705-8756
                  (before middle_end/flambda/inlining_cost.ml(252):8709-8756
                    (let (init = t)
                      (makeblock 0 (int,int,int,int,int,int) (field 0 init)
                        (field 1 init) (field 2 init) (+ (field 3 t) 1)
                        (field 4 init) (field 5 init))))))
            direct_call_of_indirect =
              (function t
                (funct-body middle_end/flambda/inlining_cost.ml(253)<ghost>:8787-8862
                  (before middle_end/flambda/inlining_cost.ml(254):8795-8862
                    (let (init = t)
                      (makeblock 0 (int,int,int,int,int,int) (field 0 init)
                        (field 1 init) (field 2 init) (field 3 init)
                        (+ (field 4 t) 1) (field 5 init))))))
            requested_inline =
              (function t size_of
                (funct-body middle_end/flambda/inlining_cost.ml(255)<ghost>:8886-8997
                  (before middle_end/flambda/inlining_cost.ml(256):8903-8997
                    (let
                      (size =[int]
                         (after middle_end/flambda/inlining_cost.ml(256):8914-8933
                           (apply lambda_size size_of)))
                      (before middle_end/flambda/inlining_cost.ml(257):8941-8997
                        (let (init = t)
                          (makeblock 0 (int,int,int,int,int,int)
                            (field 0 init) (field 1 init) (field 2 init)
                            (field 3 init) (field 4 init)
                            (+ (field 5 t) size))))))))
            remove_code_helper =
              (function b flam
                (funct-body middle_end/flambda/inlining_cost.ml(259)<ghost>:9024-9373
                  (before middle_end/flambda/inlining_cost.ml(260):9051-9373
                    (catch
                      (catch
                        (switch flam
                         case int 0: (exit 23)
                         case tag 0: (exit 23)
                         case tag 1: (exit 23)
                         case tag 2: (exit 23)
                         case tag 3: (exit 23)
                         case tag 4: (exit 22)
                         case tag 5: (exit 22)
                         case tag 6:
                          (before middle_end/flambda/inlining_cost.ml(261):9085-9104
                            (setfield_ptr 0 b
                              (after middle_end/flambda/inlining_cost.ml(261):9090-9104
                                (apply remove_prim (field 0 b)))))
                         case tag 11: (exit 23)
                         default:
                          (before middle_end/flambda/inlining_cost.ml(263):9210-9231
                            (setfield_ptr 0 b
                              (after middle_end/flambda/inlining_cost.ml(263):9215-9231
                                (apply remove_branch (field 0 b))))))
                       with (22)
                        (before middle_end/flambda/inlining_cost.ml(264):9258-9277
                          (setfield_ptr 0 b
                            (after middle_end/flambda/inlining_cost.ml(264):9263-9277
                              (apply remove_call (field 0 b))))))
                     with (23)
                      (before middle_end/flambda/inlining_cost.ml(266):9371-9373
                        0a)))))
            remove_code_helper_named =
              (function b named
                (funct-body middle_end/flambda/inlining_cost.ml(268)<ghost>:9406-9900
                  (before middle_end/flambda/inlining_cost.ml(269):9438-9900
                    (catch
                      (catch
                        (switch named
                         case tag 4: (exit 25)
                         case tag 5: (exit 24)
                         case tag 6: (exit 25)
                         case tag 7: (exit 25)
                         case tag 8: (exit 25)
                         case tag 9:
                          (let (*match* =a (field 0 named))
                            (catch
                              (catch
                                (switch *match*
                                 case tag 1: (exit 27)
                                 case tag 7: (exit 27)
                                 case tag 16: (exit 27)
                                 default: (exit 28))
                               with (28) (exit 25))
                             with (27) (exit 24)))
                         default:
                          (before middle_end/flambda/inlining_cost.ml(278):9898-9900
                            0a))
                       with (24)
                        (before middle_end/flambda/inlining_cost.ml(272):9552-9572
                          (setfield_ptr 0 b
                            (after middle_end/flambda/inlining_cost.ml(272):9557-9572
                              (apply remove_alloc (field 0 b))))))
                     with (25)
                      (before middle_end/flambda/inlining_cost.ml(277):9804-9823
                        (setfield_ptr 0 b
                          (after middle_end/flambda/inlining_cost.ml(277):9809-9823
                            (apply remove_prim (field 0 b)))))))))
            remove_code =
              (function lam b
                (funct-body middle_end/flambda/inlining_cost.ml(280)<ghost>:9920-10054
                  (before middle_end/flambda/inlining_cost.ml(281):9932-10054
                    (let (b = (makemutable 0 b))
                      (before middle_end/flambda/inlining_cost.ml(282):9953-10054
                        (seq
                          (after middle_end/flambda/inlining_cost.ml(282):9953-10046
                            (apply (field 7 (global Flambda_iterators!))
                              (after middle_end/flambda/inlining_cost.ml(282):9985-10007
                                (apply remove_code_helper b))
                              (after middle_end/flambda/inlining_cost.ml(283):10014-10042
                                (apply remove_code_helper_named b))
                              lam))
                          (before middle_end/flambda/inlining_cost.ml(284):10052-10054
                            (field 0 b))))))))
            remove_code_named =
              (function lam b
                (funct-body middle_end/flambda/inlining_cost.ml(286)<ghost>:10080-10220
                  (before middle_end/flambda/inlining_cost.ml(287):10092-10220
                    (let (b = (makemutable 0 b))
                      (before middle_end/flambda/inlining_cost.ml(288):10113-10220
                        (seq
                          (after middle_end/flambda/inlining_cost.ml(288):10113-10212
                            (apply (field 8 (global Flambda_iterators!))
                              (after middle_end/flambda/inlining_cost.ml(288):10151-10173
                                (apply remove_code_helper b))
                              (after middle_end/flambda/inlining_cost.ml(289):10180-10208
                                (apply remove_code_helper_named b))
                              lam))
                          (before middle_end/flambda/inlining_cost.ml(290):10218-10220
                            (field 0 b))))))))
            remove_projection =
              (function _proj b
                (funct-body middle_end/flambda/inlining_cost.ml(292)<ghost>:10246-10406
                  (before middle_end/flambda/inlining_cost.ml(295):10393-10406
                    (after middle_end/flambda/inlining_cost.ml(295):10393-10406
                      (apply remove_prim b)))))
            print =
              (function ppf b
                (funct-body middle_end/flambda/inlining_cost.ml(297)<ghost>:10420-10745
                  (before middle_end/flambda/inlining_cost.ml(298):10432-10745
                    (after middle_end/flambda/inlining_cost.ml(298):10432-10745
                      (apply (field 122 (global Stdlib__format!)) ppf
                        [0:
                         [18:
                          [1: [0: 0a ""]]
                          [11:
                           "remove_call: "
                           [4:
                            3a 0a 0a
                            [17:
                             [0: "@ " 1 0]
                             [11:
                              "remove_alloc: "
                              [4:
                               3a 0a 0a
                               [17:
                                [0: "@ " 1 0]
                                [11:
                                 "remove_prim: "
                                 [4:
                                  3a 0a 0a
                                  [17:
                                   [0: "@ " 1 0]
                                   [11:
                                    "remove_branch: "
                                    [4:
                                     3a 0a 0a
                                     [17:
                                      [0: "@ " 1 0]
                                      [11:
                                       "direct: "
                                       [4:
                                        3a 0a 0a
                                        [17:
                                         [0: "@ " 1 0]
                                         [11:
                                          "requested: "
                                          [4: 3a 0a 0a [17: 0a 0a]]]]]]]]]]]]]]]]]]]
                         "@[remove_call: %i@ remove_alloc: %i@ remove_prim: %i@ remove_branch: %i@ direct: %i@ requested: %i@]"]
                        (field 0 b) (field 1 b) (field 2 b) (field 3 b)
                        (field 4 b) (field 5 b))))))
            evaluate =
              (function t round[int] : int
                (funct-body middle_end/flambda/inlining_cost.ml(308)<ghost>:10762-11181
                  (before middle_end/flambda/inlining_cost.ml(309):10783-11181
                    (+
                      (* benefit_factor
                        (+
                          (+
                            (+
                              (+
                                (* (field 0 t)
                                  (after middle_end/flambda/inlining_cost.ml(310):10823-10862
                                    (apply cost
                                      (field 0 (field 111 (global Clflags!)))
                                      round)))
                                (* (field 1 t)
                                  (after middle_end/flambda/inlining_cost.ml(311):10889-10929
                                    (apply cost
                                      (field 0 (field 112 (global Clflags!)))
                                      round))))
                              (* (field 2 t)
                                (after middle_end/flambda/inlining_cost.ml(312):10955-10994
                                  (apply cost
                                    (field 0 (field 113 (global Clflags!)))
                                    round))))
                            (* (field 3 t)
                              (after middle_end/flambda/inlining_cost.ml(313):11022-11063
                                (apply cost
                                  (field 0 (field 114 (global Clflags!)))
                                  round))))
                          (* (field 4 t)
                            (after middle_end/flambda/inlining_cost.ml(315):11111-11154
                              (apply cost
                                (field 0 (field 115 (global Clflags!)))
                                round)))))
                      (field 5 t)))))
            + =
              (function t1 t2
                (funct-body middle_end/flambda/inlining_cost.ml(318)<ghost>:11193-11578
                  (before middle_end/flambda/inlining_cost.ml(318):11201-11578
                    (makeblock 0 (int,int,int,int,int,int)
                      (+ (field 0 t1) (field 0 t2))
                      (+ (field 1 t1) (field 1 t2))
                      (+ (field 2 t1) (field 2 t2))
                      (+ (field 3 t1) (field 3 t2))
                      (+ (field 4 t1) (field 4 t2))
                      (+ (field 5 t1) (field 5 t2))))))
            - =
              (function t1 t2
                (funct-body middle_end/flambda/inlining_cost.ml(328)<ghost>:11590-11975
                  (before middle_end/flambda/inlining_cost.ml(328):11598-11975
                    (makeblock 0 (int,int,int,int,int,int)
                      (- (field 0 t1) (field 0 t2))
                      (- (field 1 t1) (field 1 t2))
                      (- (field 2 t1) (field 2 t2))
                      (- (field 3 t1) (field 3 t2))
                      (- (field 4 t1) (field 4 t2))
                      (- (field 5 t1) (field 5 t2))))))
            max =
              (function round[int] t1 t2
                (funct-body middle_end/flambda/inlining_cost.ml(338)<ghost>:11987-12102
                  (before middle_end/flambda/inlining_cost.ml(339):12006-12102
                    (let
                      (c1 =[int]
                         (after middle_end/flambda/inlining_cost.ml(339):12015-12033
                           (apply evaluate t1 round)))
                      (before middle_end/flambda/inlining_cost.ml(340):12041-12102
                        (let
                          (c2 =[int]
                             (after middle_end/flambda/inlining_cost.ml(340):12050-12068
                               (apply evaluate t2 round)))
                          (before middle_end/flambda/inlining_cost.ml(341):12076-12102
                            (if
                              (after middle_end/flambda/inlining_cost.ml(341):12079-12086
                                (apply
                                  (field 3
                                    (global Int_replace_polymorphic_compare!))
                                  c1 c2))
                              (before middle_end/flambda/inlining_cost.ml(341):12092-12094
                                t1)
                              (before middle_end/flambda/inlining_cost.ml(341):12100-12102
                                t2)))))))))
            add_code =
              (function lam b
                (funct-body middle_end/flambda/inlining_cost.ml(343)<ghost>:12119-12157
                  (before middle_end/flambda/inlining_cost.ml(344):12131-12157
                    (after middle_end/flambda/inlining_cost.ml(344):12131-12157
                      (apply - b
                        (after middle_end/flambda/inlining_cost.ml(344):12135-12157
                          (apply remove_code lam zero)))))))
            add_code_named =
              (function lam b
                (funct-body middle_end/flambda/inlining_cost.ml(346)<ghost>:12180-12224
                  (before middle_end/flambda/inlining_cost.ml(347):12192-12224
                    (after middle_end/flambda/inlining_cost.ml(347):12192-12224
                      (apply - b
                        (after middle_end/flambda/inlining_cost.ml(347):12196-12224
                          (apply remove_code_named lam zero)))))))
            add_projection =
              (function proj b
                (funct-body middle_end/flambda/inlining_cost.ml(349)<ghost>:12247-12293
                  (before middle_end/flambda/inlining_cost.ml(350):12260-12293
                    (after middle_end/flambda/inlining_cost.ml(350):12260-12293
                      (apply - b
                        (after middle_end/flambda/inlining_cost.ml(350):12264-12293
                          (apply remove_projection proj zero)))))))
            benefit_table =
              (makeblock 0
                (makeblock 0 "Calls"
                  (function b : int
                    (funct-body middle_end/flambda/inlining_cost.ml(355):12372-12396
                      (before middle_end/flambda/inlining_cost.ml(355):12382-12395
                        (field 0 b)))))
                (makeblock 0
                  (makeblock 0 "Allocs"
                    (function b : int
                      (funct-body middle_end/flambda/inlining_cost.ml(356):12414-12439
                        (before middle_end/flambda/inlining_cost.ml(356):12424-12438
                          (field 1 b)))))
                  (makeblock 0
                    (makeblock 0 "Prims"
                      (function b : int
                        (funct-body middle_end/flambda/inlining_cost.ml(357):12456-12480
                          (before middle_end/flambda/inlining_cost.ml(357):12466-12479
                            (field 2 b)))))
                    (makeblock 0
                      (makeblock 0 "Branches"
                        (function b : int
                          (funct-body middle_end/flambda/inlining_cost.ml(358):12500-12526
                            (before middle_end/flambda/inlining_cost.ml(358):12510-12525
                              (field 3 b)))))
                      (makeblock 0
                        (makeblock 0 "Indirect calls"
                          (function b : int
                            (funct-body middle_end/flambda/inlining_cost.ml(359):12552-12588
                              (before middle_end/flambda/inlining_cost.ml(359):12562-12587
                                (field 4 b)))))
                        0a)))))
            benefits_table =
              (makemutable 246
                (function param
                  (after middle_end/flambda/inlining_cost.ml(363):12629-12756
                    (apply (field 16 (global Stdlib__list!))
                      (function param
                        (funct-body middle_end/flambda/inlining_cost.ml(365):12658-12726
                          (let
                            (accessor =a (field 1 param)
                             header =a (field 0 param))
                            (before middle_end/flambda/inlining_cost.ml(365):12685-12725
                              (makeblock 0 (*,*,int) header accessor
                                (string.length header))))))
                      benefit_table))))
            table_line =
              (makemutable 246
                (function param
                  (let
                    (benefits_table =
                       (after middle_end/flambda/inlining_cost.ml(371):12819-12844
                         (let
                           (lzarg = benefits_table
                            tag =a (caml_obj_tag lzarg))
                           (if (== tag 250) (field 0 lzarg)
                             (if (== tag 246)
                               (apply (field 1 (global CamlinternalLazy!))
                                 lzarg)
                               lzarg)))))
                    (before middle_end/flambda/inlining_cost.ml(372):12854-12991
                      (let
                        (dashes =
                           (after middle_end/flambda/inlining_cost.ml(373):12875-12935
                             (apply (field 16 (global Stdlib__list!))
                               (function param
                                 (funct-body middle_end/flambda/inlining_cost.ml(373):12884-12920
                                   (let (n =a (field 2 param))
                                     (before middle_end/flambda/inlining_cost.ml(373):12902-12919
                                       (after middle_end/flambda/inlining_cost.ml(373):12902-12919
                                         (apply
                                           (field 0 (global Stdlib__string!))
                                           n '-'))))))
                               benefits_table)))
                        (before middle_end/flambda/inlining_cost.ml(375):12951-12991
                          (after middle_end/flambda/inlining_cost.ml(375):12951-12991
                            (apply (field 27 (global Stdlib!)) "|-"
                              (after middle_end/flambda/inlining_cost.ml(375):12958-12991
                                (apply (field 27 (global Stdlib!))
                                  (after middle_end/flambda/inlining_cost.ml(375):12958-12984
                                    (apply (field 6 (global Stdlib__string!))
                                      "-+-" dashes))
                                  "-|"))))))))))
            table_headers =
              (makemutable 246
                (function param
                  (let
                    (benefits_table =
                       (after middle_end/flambda/inlining_cost.ml(380):13065-13090
                         (let
                           (lzarg = benefits_table
                            tag =a (caml_obj_tag lzarg))
                           (if (== tag 250) (field 0 lzarg)
                             (if (== tag 246)
                               (apply (field 1 (global CamlinternalLazy!))
                                 lzarg)
                               lzarg)))))
                    (before middle_end/flambda/inlining_cost.ml(381):13100-13215
                      (let
                        (headers =
                           (after middle_end/flambda/inlining_cost.ml(381):13114-13164
                             (apply (field 16 (global Stdlib__list!))
                               (function param
                                 (funct-body middle_end/flambda/inlining_cost.ml(381):13123-13149
                                   (let (head =a (field 0 param))
                                     (before middle_end/flambda/inlining_cost.ml(381):13144-13148
                                       head))))
                               benefits_table)))
                        (before middle_end/flambda/inlining_cost.ml(382):13174-13215
                          (after middle_end/flambda/inlining_cost.ml(382):13174-13215
                            (apply (field 27 (global Stdlib!)) "| "
                              (after middle_end/flambda/inlining_cost.ml(382):13181-13215
                                (apply (field 27 (global Stdlib!))
                                  (after middle_end/flambda/inlining_cost.ml(382):13181-13208
                                    (apply (field 6 (global Stdlib__string!))
                                      " | " headers))
                                  " |"))))))))))
            print_table_values =
              (function ppf b
                (funct-body middle_end/flambda/inlining_cost.ml(385)<ghost>:13250-13481
                  (before middle_end/flambda/inlining_cost.ml(386):13262-13481
                    (letrec
                      (loop
                         (function ppf param
                           (funct-body middle_end/flambda/inlining_cost.ml(386)<ghost>:13275-13433
                             (if param
                               (let
                                 (rest =a (field 1 param)
                                  *match* =a (field 0 param)
                                  width =a (field 2 *match*)
                                  accessor =a (field 1 *match*))
                                 (before middle_end/flambda/inlining_cost.ml(389):13375-13433
                                   (after middle_end/flambda/inlining_cost.ml(389):13375-13433
                                     (apply
                                       (field 122 (global Stdlib__format!))
                                       ppf
                                       [0:
                                        [11:
                                         "| "
                                         [4:
                                          0a [1: 1a] 0a [12: ' ' [15: 0a]]]]
                                        "| %*d %a"]
                                       width
                                       (after middle_end/flambda/inlining_cost.ml(389):13411-13423
                                         (apply accessor b))
                                       loop rest))))
                               (before middle_end/flambda/inlining_cost.ml(387):13304-13326
                                 (after middle_end/flambda/inlining_cost.ml(387):13304-13326
                                   (apply
                                     (field 122 (global Stdlib__format!)) ppf
                                     [0: [12: '|' 0a] "|"])))))))
                      (before middle_end/flambda/inlining_cost.ml(391):13445-13481
                        (after middle_end/flambda/inlining_cost.ml(391):13445-13481
                          (apply loop ppf
                            (after middle_end/flambda/inlining_cost.ml(391):13454-13481
                              (let
                                (lzarg = benefits_table
                                 tag =a (caml_obj_tag lzarg))
                                (if (== tag 250) (field 0 lzarg)
                                  (if (== tag 246)
                                    (apply
                                      (field 1 (global CamlinternalLazy!))
                                      lzarg)
                                    lzarg)))))))))))
            print_table =
              (function ppf b
                (funct-body middle_end/flambda/inlining_cost.ml(393)<ghost>:13501-13784
                  (before middle_end/flambda/inlining_cost.ml(394):13513-13784
                    (let
                      (table_line =
                         (after middle_end/flambda/inlining_cost.ml(394):13530-13551
                           (let
                             (lzarg = table_line tag =a (caml_obj_tag lzarg))
                             (if (== tag 250) (field 0 lzarg)
                               (if (== tag 246)
                                 (apply (field 1 (global CamlinternalLazy!))
                                   lzarg)
                                 lzarg)))))
                      (before middle_end/flambda/inlining_cost.ml(395):13559-13784
                        (let
                          (table_headers =
                             (after middle_end/flambda/inlining_cost.ml(395):13579-13603
                               (let
                                 (lzarg = table_headers
                                  tag =a (caml_obj_tag lzarg))
                                 (if (== tag 250) (field 0 lzarg)
                                   (if (== tag 246)
                                     (apply
                                       (field 1 (global CamlinternalLazy!))
                                       lzarg)
                                     lzarg)))))
                          (before middle_end/flambda/inlining_cost.ml(396):13611-13784
                            (after middle_end/flambda/inlining_cost.ml(396):13611-13784
                              (apply (field 122 (global Stdlib__format!)) ppf
                                [0:
                                 [18:
                                  [1: [0: [11: "<v>" 0a] "<v>"]]
                                  [18:
                                   [1: [0: [11: "<h>" 0a] "<h>"]]
                                   [2:
                                    0a
                                    [17:
                                     0a
                                     [17:
                                      [0: "@;" 1 0]
                                      [18:
                                       [1: [0: [11: "<h>" 0a] "<h>"]]
                                       [2:
                                        0a
                                        [17:
                                         0a
                                         [17:
                                          [0: "@;" 1 0]
                                          [18:
                                           [1: [0: [11: "<h>" 0a] "<h>"]]
                                           [2:
                                            0a
                                            [17:
                                             0a
                                             [17:
                                              [0: "@;" 1 0]
                                              [18:
                                               [1: [0: [11: "<h>" 0a] "<h>"]]
                                               [15:
                                                [17:
                                                 0a
                                                 [17:
                                                  [0: "@;" 1 0]
                                                  [18:
                                                   [1:
                                                    [0: [11: "<h>" 0a] "<h>"]]
                                                   [2:
                                                    0a [17: 0a [17: 0a 0a]]]]]]]]]]]]]]]]]]]]]
                                 "@[<v>@[<h>%s@]@;@[<h>%s@]@;@[<h>%s@]@;@[<h>%a@]@;@[<h>%s@]@]"]
                                table_line table_headers table_line
                                print_table_values b table_line))))))))))
           (pseudo middle_end/flambda/inlining_cost.ml(227):7935-13788
             (makeblock 0 zero remove_call remove_alloc remove_prim
               remove_prims remove_branch direct_call_of_indirect
               requested_inline remove_code_helper remove_code_helper_named
               remove_code remove_code_named remove_projection print evaluate
               + - max add_code add_code_named add_projection benefit_table
               benefits_table table_line table_headers print_table_values
               print_table))))
     Whether_sufficient_benefit =
       (module-defn(Whether_sufficient_benefit) middle_end/flambda/inlining_cost.ml(403):13790-20376
         (let
           (create =
              (function original toplevel branch_depth[int] lam benefit
                lifting round[int]
                (funct-body middle_end/flambda/inlining_cost.ml(416)<ghost>:14066-14381
                  (before middle_end/flambda/inlining_cost.ml(417):14135-14381
                    (let
                      (evaluated_benefit =[int]
                         (after middle_end/flambda/inlining_cost.ml(417):14159-14190
                           (apply (field 14 Benefit) benefit round)))
                      (before middle_end/flambda/inlining_cost.ml(418):14198-14381
                        (makeblock 0 (int,*,*,int,*,int,int,int,*) round
                          benefit toplevel branch_depth lifting
                          (after middle_end/flambda/inlining_cost.ml(419):14271-14291
                            (apply lambda_size original))
                          (after middle_end/flambda/inlining_cost.ml(420):14310-14325
                            (apply lambda_size lam))
                          evaluated_benefit 0a))))))
            create_estimate =
              (function original_size[int] toplevel branch_depth[int]
                new_size[int] benefit lifting round[int]
                (funct-body middle_end/flambda/inlining_cost.ml(425)<ghost>:14405-14679
                  (before middle_end/flambda/inlining_cost.ml(427):14493-14679
                    (let
                      (evaluated_benefit =[int]
                         (after middle_end/flambda/inlining_cost.ml(427):14517-14548
                           (apply (field 14 Benefit) benefit round)))
                      (before middle_end/flambda/inlining_cost.ml(428):14556-14679
                        (makeblock 0 (int,*,*,int,*,int,int,int,*) round
                          benefit toplevel branch_depth lifting original_size
                          new_size evaluated_benefit 1a))))))
            is_nan =
              (function f[float]
                (funct-body middle_end/flambda/inlining_cost.ml(432)<ghost>:14694-14820
                  (before middle_end/flambda/inlining_cost.ml(433):14702-14820
                    (let
                      (*match* =
                         (after middle_end/flambda/inlining_cost.ml(433):14708-14730
                           (caml_classify_float f)))
                      (if (>= *match* 4)
                        (before middle_end/flambda/inlining_cost.ml(434):14752-14756
                          1a)
                        (before middle_end/flambda/inlining_cost.ml(435):14815-14820
                          0a))))))
            correct_branch_factor =
              (function f[float]
                (funct-body middle_end/flambda/inlining_cost.ml(437)<ghost>:14850-14907
                  (before middle_end/flambda/inlining_cost.ml(438):14858-14907
                    (&&
                      (not
                        (after middle_end/flambda/inlining_cost.ml(438):14863-14873
                          (apply is_nan f)))
                      (after middle_end/flambda/inlining_cost.ml(439):14882-14907
                        (apply
                          (field 5 (global Int_replace_polymorphic_compare!))
                          (after middle_end/flambda/inlining_cost.ml(439):14883-14901
                            (apply (field 18 (global Stdlib__float!)) f 0.))
                          0))))))
            estimated_benefit =
              (function t : float
                (funct-body middle_end/flambda/inlining_cost.ml(441)<ghost>:14933-16561
                  (before middle_end/flambda/inlining_cost.ml(442):14941-16561
                    (if
                      (&& (field 2 t)
                        (&& (field 4 t)
                          (after middle_end/flambda/inlining_cost.ml(442):14971-14989
                            (apply
                              (field 0
                                (global Int_replace_polymorphic_compare!))
                              (field 3 t) 0))))
                      (before middle_end/flambda/inlining_cost.ml(442):14995-15179
                        (let
                          (lifting_benefit =[int]
                             (after middle_end/flambda/inlining_cost.ml(444):15037-15108
                               (apply (field 2 (field 0 (global Clflags!)))
                                 (field 0 t)
                                 (field 0 (field 116 (global Clflags!))))))
                          (before middle_end/flambda/inlining_cost.ml(446):15126-15171
                            (float_of_int (+ (field 7 t) lifting_benefit)))))
                      (before middle_end/flambda/inlining_cost.ml(447):15185-16561
                        (let
                          (branch_taken_estimated_probability =[float]
                             (let
                               (inline_branch_factor =[float]
                                  (let
                                    (factor =[float]
                                       (after middle_end/flambda/inlining_cost.ml(461):15973-16058
                                         (apply
                                           (field 2
                                             (field 1 (global Clflags!)))
                                           (field 0 t)
                                           (field 0
                                             (field 118 (global Clflags!))))))
                                    (before middle_end/flambda/inlining_cost.ml(464):16082-16252
                                      (if
                                        (after middle_end/flambda/inlining_cost.ml(464):16085-16098
                                          (apply is_nan factor))
                                        (before middle_end/flambda/inlining_cost.ml(465):16116-16152
                                          (field 117 (global Clflags!)))
                                        (before middle_end/flambda/inlining_cost.ml(466):16168-16252
                                          (if
                                            (after middle_end/flambda/inlining_cost.ml(466):16171-16198
                                              (apply
                                                (field 2
                                                  (global Int_replace_polymorphic_compare!))
                                                (after middle_end/flambda/inlining_cost.ml(466):16171-16194
                                                  (apply
                                                    (field 18
                                                      (global Stdlib__float!))
                                                    factor 0.))
                                                0))
                                            (before middle_end/flambda/inlining_cost.ml(467):16216-16218
                                              0.)
                                            (before middle_end/flambda/inlining_cost.ml(469):16246-16252
                                              factor)))))))
                               (before middle_end/flambda/inlining_cost.ml(471):16272-16367
                                 (seq
                                   (if
                                     (after middle_end/flambda/inlining_cost.ml(471):16279-16323
                                       (apply correct_branch_factor
                                         inline_branch_factor))
                                     0a
                                     (raise
                                       (after middle_end/flambda/inlining_cost.ml(471):16272-16323
                                         (makeblock 0
                                           (global Assert_failure!)
                                           [0:
                                            "middle_end/flambda/inlining_cost.ml"
                                            471 8]))))
                                   (before middle_end/flambda/inlining_cost.ml(472):16333-16367
                                     (/. 1. (+. 1. inline_branch_factor)))))))
                          (before middle_end/flambda/inlining_cost.ml(474):16383-16553
                            (let
                              (call_estimated_probability =[float]
                                 (after middle_end/flambda/inlining_cost.ml(475):16424-16482
                                   (caml_power_float
                                     branch_taken_estimated_probability
                                     (float_of_int (field 3 t)))))
                              (before middle_end/flambda/inlining_cost.ml(477):16498-16553
                                (*. (float_of_int (field 7 t))
                                  call_estimated_probability))))))))))
            evaluate =
              (function t
                (funct-body middle_end/flambda/inlining_cost.ml(480)<ghost>:16578-16682
                  (before middle_end/flambda/inlining_cost.ml(481):16586-16682
                    (after middle_end/flambda/inlining_cost.ml(481):16586-16682
                      (apply
                        (field 4 (global Int_replace_polymorphic_compare!))
                        (after middle_end/flambda/inlining_cost.ml(481):16586-16677
                          (apply (field 18 (global Stdlib__float!))
                            (-. (float_of_int (field 6 t))
                              (after middle_end/flambda/inlining_cost.ml(482):16627-16646
                                (apply estimated_benefit t)))
                            (float_of_int (field 5 t))))
                        0)))))
            to_string =
              (function t
                (funct-body middle_end/flambda/inlining_cost.ml(485)<ghost>:16700-17743
                  (before middle_end/flambda/inlining_cost.ml(486):16708-17743
                    (let
                      (lifting =
                         (&& (field 2 t)
                           (&& (field 4 t)
                             (after middle_end/flambda/inlining_cost.ml(486):16749-16767
                               (apply
                                 (field 0
                                   (global Int_replace_polymorphic_compare!))
                                 (field 3 t) 0)))))
                      (before middle_end/flambda/inlining_cost.ml(487):16775-17743
                        (let
                          (evaluated_benefit =[int]
                             (if lifting
                               (before middle_end/flambda/inlining_cost.ml(489):16829-17001
                                 (let
                                   (lifting_benefit =[int]
                                      (after middle_end/flambda/inlining_cost.ml(490):16861-16944
                                        (apply
                                          (field 2
                                            (field 0 (global Clflags!)))
                                          (field 0 t)
                                          (field 0
                                            (field 116 (global Clflags!))))))
                                   (before middle_end/flambda/inlining_cost.ml(493):16964-17001
                                     (+ (field 7 t) lifting_benefit))))
                               (before middle_end/flambda/inlining_cost.ml(494):17013-17032
                                 (field 7 t))))
                          (before middle_end/flambda/inlining_cost.ml(496):17044-17743
                            (let
                              (estimate =
                                 (if (field 8 t)
                                   (before middle_end/flambda/inlining_cost.ml(496):17078-17081
                                     "<")
                                   (before middle_end/flambda/inlining_cost.ml(496):17087-17090
                                     "=")))
                              (before middle_end/flambda/inlining_cost.ml(497):17100-17743
                                (after middle_end/flambda/inlining_cost.ml(497):17100-17743
                                  (apply (field 3 (global Stdlib__printf!))
                                    [0:
                                     [11:
                                      "{benefit"
                                      [2:
                                       0a
                                       [11:
                                        "{call="
                                        [4:
                                         0a 0a 0a
                                         [11:
                                          ",alloc="
                                          [4:
                                           0a 0a 0a
                                           [11:
                                            ",prim="
                                            [4:
                                             3a 0a 0a
                                             [11:
                                              ",branch="
                                              [4:
                                               3a 0a 0a
                                               [11:
                                                ",indirect="
                                                [4:
                                                 3a 0a 0a
                                                 [11:
                                                  ",req="
                                                  [4:
                                                   3a 0a 0a
                                                   [11:
                                                    ",lifting="
                                                    [9:
                                                     0a
                                                     [11:
                                                      "}, orig_size="
                                                      [4:
                                                       0a 0a 0a
                                                       [11:
                                                        ",new_size="
                                                        [4:
                                                         0a 0a 0a
                                                         [11:
                                                          ",eval_size="
                                                          [4:
                                                           0a 0a 0a
                                                           [11:
                                                            ",eval_benefit"
                                                            [2:
                                                             0a
                                                             [4:
                                                              0a 0a 0a
                                                              [11:
                                                               ",branch_depth="
                                                               [4:
                                                                0a 0a 0a
                                                                [11:
                                                                 "}="
                                                                 [2: 0a 0a]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
                                     "{benefit%s{call=%d,alloc=%d,prim=%i,branch=%i,indirect=%i,req=%i,lifting=%B}, orig_size=%d,new_size=%d,eval_size=%d,eval_benefit%s%d,branch_depth=%d}=%s"]
                                    estimate (field 0 (field 1 t))
                                    (field 1 (field 1 t))
                                    (field 2 (field 1 t))
                                    (field 3 (field 1 t))
                                    (field 4 (field 1 t))
                                    (field 5 (field 1 t)) lifting (field 5 t)
                                    (field 6 t) (- (field 5 t) (field 6 t))
                                    estimate evaluated_benefit (field 3 t)
                                    (if
                                      (after middle_end/flambda/inlining_cost.ml(516):17711-17721
                                        (apply evaluate t))
                                      (before middle_end/flambda/inlining_cost.ml(516):17727-17732
                                        "yes")
                                      (before middle_end/flambda/inlining_cost.ml(516):17738-17742
                                        "no")))))))))))))
            print_description =
              (function subfunctions ppf t
                (funct-body middle_end/flambda/inlining_cost.ml(518)<ghost>:17769-20372
                  (before middle_end/flambda/inlining_cost.ml(519):17795-20372
                    (let
                      (pr_intro =
                         (function ppf
                           (funct-body middle_end/flambda/inlining_cost.ml(519)<ghost>:17808-18223
                             (before middle_end/flambda/inlining_cost.ml(520):17820-18223
                               (let
                                 (estimate =
                                    (if (field 8 t)
                                      (before middle_end/flambda/inlining_cost.ml(520):17854-17864
                                        " at most")
                                      (before middle_end/flambda/inlining_cost.ml(520):17870-17872
                                        "")))
                                 (before middle_end/flambda/inlining_cost.ml(521):17882-18223
                                   (seq
                                     (after middle_end/flambda/inlining_cost.ml(521):17882-17952
                                       (apply
                                         (field 119 (global Stdlib__format!))
                                         ppf
                                         "Specialisation of the function body"))
                                     (before middle_end/flambda/inlining_cost.ml(523):17960-18223
                                       (seq
                                         (if subfunctions
                                           (before middle_end/flambda/inlining_cost.ml(524):17989-18078
                                             (after middle_end/flambda/inlining_cost.ml(524):17989-18078
                                               (apply
                                                 (field 119
                                                   (global Stdlib__format!))
                                                 ppf
                                                 ", including speculative inlining of other functions,")))
                                           0a)
                                         (before middle_end/flambda/inlining_cost.ml(526):18086-18223
                                           (seq
                                             (after middle_end/flambda/inlining_cost.ml(526):18086-18121
                                               (apply
                                                 (field 119
                                                   (global Stdlib__format!))
                                                 ppf " removed"))
                                             (before middle_end/flambda/inlining_cost.ml(527):18129-18223
                                               (seq
                                                 (after middle_end/flambda/inlining_cost.ml(527):18129-18162
                                                   (apply
                                                     (field 119
                                                       (global Stdlib__format!))
                                                     ppf estimate))
                                                 (before middle_end/flambda/inlining_cost.ml(528):18170-18223
                                                   (after middle_end/flambda/inlining_cost.ml(528):18170-18223
                                                     (apply
                                                       (field 119
                                                         (global Stdlib__format!))
                                                       ppf
                                                       " the following operations:"))))))))))))))))
                      (before middle_end/flambda/inlining_cost.ml(530):18235-20372
                        (let
                          (lifting =
                             (&& (field 2 t)
                               (&& (field 4 t)
                                 (after middle_end/flambda/inlining_cost.ml(530):18276-18294
                                   (apply
                                     (field 0
                                       (global Int_replace_polymorphic_compare!))
                                     (field 3 t) 0)))))
                          (before middle_end/flambda/inlining_cost.ml(531):18302-20372
                            (let (requested =[int] (field 5 (field 1 t)))
                              (before middle_end/flambda/inlining_cost.ml(532):18352-20372
                                (let
                                  (pr_requested =
                                     (function ppf
                                       (funct-body middle_end/flambda/inlining_cost.ml(532)<ghost>:18369-18695
                                         (before middle_end/flambda/inlining_cost.ml(533):18381-18695
                                           (if
                                             (after middle_end/flambda/inlining_cost.ml(533):18384-18397
                                               (apply
                                                 (field 3
                                                   (global Int_replace_polymorphic_compare!))
                                                 requested 0))
                                             (before middle_end/flambda/inlining_cost.ml(533):18403-18695
                                               (seq
                                                 (after middle_end/flambda/inlining_cost.ml(534):18417-18441
                                                   (apply
                                                     (field 0
                                                       (global Stdlib__format!))
                                                     ppf 0))
                                                 (before middle_end/flambda/inlining_cost.ml(535):18451-18685
                                                   (seq
                                                     (after middle_end/flambda/inlining_cost.ml(535):18451-18533
                                                       (apply
                                                         (field 119
                                                           (global Stdlib__format!))
                                                         ppf
                                                         "and inlined user-annotated functions worth "))
                                                     (before middle_end/flambda/inlining_cost.ml(537):18543-18685
                                                       (seq
                                                         (after middle_end/flambda/inlining_cost.ml(537):18543-18577
                                                           (apply
                                                             (field 122
                                                               (global Stdlib__format!))
                                                             ppf
                                                             [0:
                                                              [4:
                                                               0a 0a 0a
                                                               [12: '.' 0a]]
                                                              "%d."]
                                                             requested))
                                                         (before middle_end/flambda/inlining_cost.ml(538):18587-18685
                                                           (seq
                                                             (after middle_end/flambda/inlining_cost.ml(538):18587-18613
                                                               (apply
                                                                 (field 2
                                                                   (global Stdlib__format!))
                                                                 ppf 0a))
                                                             (before middle_end/flambda/inlining_cost.ml(539):18623-18685
                                                               (seq
                                                                 (after middle_end/flambda/inlining_cost.ml(539):18623-18649
                                                                   (apply
                                                                    (field 26
                                                                    (global Stdlib__format!))
                                                                    ppf 0a))
                                                                 (before middle_end/flambda/inlining_cost.ml(540):18659-18685
                                                                   (after middle_end/flambda/inlining_cost.ml(540):18659-18685
                                                                    (apply
                                                                    (field 26
                                                                    (global Stdlib__format!))
                                                                    ppf 0a)))))))))))))
                                             0a)))))
                                  (before middle_end/flambda/inlining_cost.ml(543):18707-20372
                                    (let
                                      (pr_lifting =
                                         (function ppf
                                           (funct-body middle_end/flambda/inlining_cost.ml(543)<ghost>:18722-19033
                                             (before middle_end/flambda/inlining_cost.ml(544):18734-19033
                                               (if lifting
                                                 (before middle_end/flambda/inlining_cost.ml(544):18750-19033
                                                   (seq
                                                     (after middle_end/flambda/inlining_cost.ml(545):18764-18788
                                                       (apply
                                                         (field 0
                                                           (global Stdlib__format!))
                                                         ppf 0))
                                                     (before middle_end/flambda/inlining_cost.ml(546):18798-19023
                                                       (seq
                                                         (after middle_end/flambda/inlining_cost.ml(546):18798-18915
                                                           (apply
                                                             (field 119
                                                               (global Stdlib__format!))
                                                             ppf
                                                             "Inlining the function would also lift some definitions to toplevel."))
                                                         (before middle_end/flambda/inlining_cost.ml(549):18925-19023
                                                           (seq
                                                             (after middle_end/flambda/inlining_cost.ml(549):18925-18951
                                                               (apply
                                                                 (field 2
                                                                   (global Stdlib__format!))
                                                                 ppf 0a))
                                                             (before middle_end/flambda/inlining_cost.ml(550):18961-19023
                                                               (seq
                                                                 (after middle_end/flambda/inlining_cost.ml(550):18961-18987
                                                                   (apply
                                                                    (field 26
                                                                    (global Stdlib__format!))
                                                                    ppf 0a))
                                                                 (before middle_end/flambda/inlining_cost.ml(551):18997-19023
                                                                   (after middle_end/flambda/inlining_cost.ml(551):18997-19023
                                                                    (apply
                                                                    (field 26
                                                                    (global Stdlib__format!))
                                                                    ppf 0a)))))))))))
                                                 0a)))))
                                      (before middle_end/flambda/inlining_cost.ml(554):19045-20372
                                        (let
                                          (total_benefit =[int]
                                             (if lifting
                                               (before middle_end/flambda/inlining_cost.ml(556):19095-19268
                                                 (let
                                                   (lifting_benefit =[int]
                                                      (after middle_end/flambda/inlining_cost.ml(557):19127-19210
                                                        (apply
                                                          (field 2
                                                            (field 0
                                                              (global Clflags!)))
                                                          (field 0 t)
                                                          (field 0
                                                            (field 116
                                                              (global Clflags!))))))
                                                   (before middle_end/flambda/inlining_cost.ml(560):19231-19268
                                                     (+ (field 7 t)
                                                       lifting_benefit))))
                                               (before middle_end/flambda/inlining_cost.ml(561):19280-19299
                                                 (field 7 t))))
                                          (before middle_end/flambda/inlining_cost.ml(563):19311-20372
                                            (let
                                              (expected_benefit =[float]
                                                 (after middle_end/flambda/inlining_cost.ml(563):19334-19353
                                                   (apply estimated_benefit
                                                     t)))
                                              (before middle_end/flambda/inlining_cost.ml(564):19361-20372
                                                (let
                                                  (size_change =[int]
                                                     (- (field 6 t)
                                                       (field 5 t)))
                                                  (before middle_end/flambda/inlining_cost.ml(565):19415-20372
                                                    (let
                                                      (result =
                                                         (if
                                                           (after middle_end/flambda/inlining_cost.ml(565):19431-19441
                                                             (apply evaluate
                                                               t))
                                                           (before middle_end/flambda/inlining_cost.ml(565):19447-19453
                                                             "less")
                                                           (before middle_end/flambda/inlining_cost.ml(565):19459-19468
                                                             "greater")))
                                                      (before middle_end/flambda/inlining_cost.ml(566):19476-20372
                                                        (let
                                                          (pr_conclusion =
                                                             (function ppf
                                                               (funct-body middle_end/flambda/inlining_cost.ml(566)<ghost>:19494-20216
                                                                 (before middle_end/flambda/inlining_cost.ml(567):19506-20216
                                                                   (seq
                                                                    (after middle_end/flambda/inlining_cost.ml(567):19506-19563
                                                                    (apply
                                                                    (field 119
                                                                    (global Stdlib__format!))
                                                                    ppf
                                                                    "This gives a total benefit of "))
                                                                    (before middle_end/flambda/inlining_cost.ml(568):19571-20216
                                                                    (seq
                                                                    (after middle_end/flambda/inlining_cost.ml(568):19571-19608
                                                                    (apply
                                                                    (field 16
                                                                    (global Stdlib__format!))
                                                                    ppf
                                                                    total_benefit))
                                                                    (before middle_end/flambda/inlining_cost.ml(569):19616-20216
                                                                    (seq
                                                                    (after middle_end/flambda/inlining_cost.ml(569):19616-19667
                                                                    (apply
                                                                    (field 119
                                                                    (global Stdlib__format!))
                                                                    ppf
                                                                    ".  At a branch depth of "))
                                                                    (before middle_end/flambda/inlining_cost.ml(570):19675-20216
                                                                    (seq
                                                                    (after middle_end/flambda/inlining_cost.ml(570):19675-19713
                                                                    (apply
                                                                    (field 16
                                                                    (global Stdlib__format!))
                                                                    ppf
                                                                    (field 3
                                                                    t)))
                                                                    (before middle_end/flambda/inlining_cost.ml(571):19721-20216
                                                                    (seq
                                                                    (after middle_end/flambda/inlining_cost.ml(571):19721-19786
                                                                    (apply
                                                                    (field 119
                                                                    (global Stdlib__format!))
                                                                    ppf
                                                                    " this produces an expected benefit of "))
                                                                    (before middle_end/flambda/inlining_cost.ml(572):19794-20216
                                                                    (seq
                                                                    (after middle_end/flambda/inlining_cost.ml(572):19794-19836
                                                                    (apply
                                                                    (field 122
                                                                    (global Stdlib__format!))
                                                                    ppf
                                                                    [0:
                                                                    [8:
                                                                    [0:
                                                                    0a 0a] 0a
                                                                    [0: 1] 0a]
                                                                    "%.1f"]
                                                                    expected_benefit))
                                                                    (before middle_end/flambda/inlining_cost.ml(573):19844-20216
                                                                    (seq
                                                                    (after middle_end/flambda/inlining_cost.ml(573):19844-19896
                                                                    (apply
                                                                    (field 119
                                                                    (global Stdlib__format!))
                                                                    ppf
                                                                    ".  The new code has size "))
                                                                    (before middle_end/flambda/inlining_cost.ml(574):19904-20216
                                                                    (seq
                                                                    (after middle_end/flambda/inlining_cost.ml(574):19904-19938
                                                                    (apply
                                                                    (field 16
                                                                    (global Stdlib__format!))
                                                                    ppf
                                                                    (field 6
                                                                    t)))
                                                                    (before middle_end/flambda/inlining_cost.ml(575):19946-20216
                                                                    (seq
                                                                    (after middle_end/flambda/inlining_cost.ml(575):19946-20007
                                                                    (apply
                                                                    (field 119
                                                                    (global Stdlib__format!))
                                                                    ppf
                                                                    ", giving a change in code size of "))
                                                                    (before middle_end/flambda/inlining_cost.ml(576):20015-20216
                                                                    (seq
                                                                    (after middle_end/flambda/inlining_cost.ml(576):20015-20050
                                                                    (apply
                                                                    (field 16
                                                                    (global Stdlib__format!))
                                                                    ppf
                                                                    size_change))
                                                                    (before middle_end/flambda/inlining_cost.ml(577):20058-20216
                                                                    (seq
                                                                    (after middle_end/flambda/inlining_cost.ml(577):20058-20115
                                                                    (apply
                                                                    (field 119
                                                                    (global Stdlib__format!))
                                                                    ppf
                                                                    ".  The change in code size is "))
                                                                    (before middle_end/flambda/inlining_cost.ml(578):20123-20216
                                                                    (seq
                                                                    (after middle_end/flambda/inlining_cost.ml(578):20123-20154
                                                                    (apply
                                                                    (field 119
                                                                    (global Stdlib__format!))
                                                                    ppf
                                                                    result))
                                                                    (before middle_end/flambda/inlining_cost.ml(579):20162-20216
                                                                    (after middle_end/flambda/inlining_cost.ml(579):20162-20216
                                                                    (apply
                                                                    (field 119
                                                                    (global Stdlib__format!))
                                                                    ppf
                                                                    " than the expected benefit."))))))))))))))))))))))))))))))
                                                          (before middle_end/flambda/inlining_cost.ml(581):20228-20372
                                                            (after middle_end/flambda/inlining_cost.ml(581):20228-20372
                                                              (apply
                                                                (field 122
                                                                  (global Stdlib__format!))
                                                                ppf
                                                                [0:
                                                                 [16:
                                                                  [17:
                                                                   [0:
                                                                    "@," 0 0]
                                                                   [18:
                                                                    [1:
                                                                    [0:
                                                                    [11:
                                                                    "<v>" 0a]
                                                                    "<v>"]]
                                                                    [18:
                                                                    [1:
                                                                    [0:
                                                                    [11:
                                                                    "<v 2>"
                                                                    0a]
                                                                    "<v 2>"]]
                                                                    [17:
                                                                    [0:
                                                                    "@;" 1 0]
                                                                    [15:
                                                                    [17:
                                                                    0a
                                                                    [17:
                                                                    [0:
                                                                    "@;" 1 0]
                                                                    [17:
                                                                    [0:
                                                                    "@;" 1 0]
                                                                    [16:
                                                                    [16:
                                                                    [17:
                                                                    0a
                                                                    [16: 0a]]]]]]]]]]]]]
                                                                 "%t@,@[<v>@[<v 2>@;%a@]@;@;%t%t@]%t"]
                                                                pr_intro
                                                                (field 26
                                                                  Benefit)
                                                                (field 1 t)
                                                                pr_requested
                                                                pr_lifting
                                                                pr_conclusion))))))))))))))))))))))))))
           (pseudo middle_end/flambda/inlining_cost.ml(403):13826-20376
             (makeblock 0 create create_estimate is_nan correct_branch_factor
               estimated_benefit evaluate to_string print_description))))
     scale_inline_threshold_by =[int] 8
     default_toplevel_multiplier =[int] 8
     maximum_interesting_size_of_function_body_base =
       (makemutable 246
         (function param
           (let (max_cost = (makemutable 0 (int) 0))
             (before middle_end/flambda/inlining_cost.ml(672):23803-24076
               (seq
                 (for round 0 to
                   (-
                     (after middle_end/flambda/inlining_cost.ml(672):23820-23839
                       (apply (field 100 (global Clflags!)) 0a))
                     1)
                   (before middle_end/flambda/inlining_cost.ml(673):23853-24052
                     (let
                       (max_size =[int]
                          (let
                            (inline_call_cost =[int]
                               (after middle_end/flambda/inlining_cost.ml(674):23899-23936
                                 (apply cost
                                   (field 0 (field 111 (global Clflags!)))
                                   round)))
                            (before middle_end/flambda/inlining_cost.ml(675):23948-24002
                              (+ direct_call_size
                                (* inline_call_cost benefit_factor)))))
                       (before middle_end/flambda/inlining_cost.ml(677):24018-24052
                         (setfield_imm 0 max_cost
                           (after middle_end/flambda/inlining_cost.ml(677):24030-24052
                             (apply (field 16 (global Stdlib!))
                               (field 0 max_cost) max_size)))))))
                 (before middle_end/flambda/inlining_cost.ml(679):24067-24076
                   (field 0 max_cost)))))))
     maximum_interesting_size_of_function_body_multiplier =
       (makemutable 246
         (function param
           (let (max_cost = (makemutable 0 (int) 0))
             (before middle_end/flambda/inlining_cost.ml(685):24188-24440
               (seq
                 (for round 0 to
                   (-
                     (after middle_end/flambda/inlining_cost.ml(685):24205-24224
                       (apply (field 100 (global Clflags!)) 0a))
                     1)
                   (before middle_end/flambda/inlining_cost.ml(686):24238-24416
                     (let
                       (max_size =[int]
                          (let
                            (inline_prim_cost =[int]
                               (after middle_end/flambda/inlining_cost.ml(687):24284-24321
                                 (apply cost
                                   (field 0 (field 113 (global Clflags!)))
                                   round)))
                            (before middle_end/flambda/inlining_cost.ml(688):24333-24366
                              (* inline_prim_cost benefit_factor))))
                       (before middle_end/flambda/inlining_cost.ml(690):24382-24416
                         (setfield_imm 0 max_cost
                           (after middle_end/flambda/inlining_cost.ml(690):24394-24416
                             (apply (field 16 (global Stdlib!))
                               (field 0 max_cost) max_size)))))))
                 (before middle_end/flambda/inlining_cost.ml(692):24431-24440
                   (field 0 max_cost)))))))
     maximum_interesting_size_of_function_body =
       (function num_free_variables[int] : int
         (funct-body middle_end/flambda/inlining_cost.ml(695)<ghost>:24494-24723
           (before middle_end/flambda/inlining_cost.ml(696):24517-24723
             (let
               (base =[int]
                  (after middle_end/flambda/inlining_cost.ml(696):24528-24585
                    (let
                      (lzarg = maximum_interesting_size_of_function_body_base
                       tag =a (caml_obj_tag lzarg))
                      (if (== tag 250) (field 0 lzarg)
                        (if (== tag 246)
                          (apply (field 1 (global CamlinternalLazy!)) lzarg)
                          lzarg)))))
               (before middle_end/flambda/inlining_cost.ml(697):24591-24723
                 (let
                   (multiplier =[int]
                      (after middle_end/flambda/inlining_cost.ml(698):24612-24675
                        (let
                          (lzarg =
                             maximum_interesting_size_of_function_body_multiplier
                           tag =a (caml_obj_tag lzarg))
                          (if (== tag 250) (field 0 lzarg)
                            (if (== tag 246)
                              (apply (field 1 (global CamlinternalLazy!))
                                lzarg)
                              lzarg)))))
                   (before middle_end/flambda/inlining_cost.ml(700):24683-24723
                     (+ base (* num_free_variables multiplier))))))))))
    (pseudo _none_(0)<ghost>:-1--1
      (makeblock 0 Threshold can_inline can_try_inlining
        (makeblock 0 (field 0 Benefit) (field 15 Benefit) (field 17 Benefit)
          (field 1 Benefit) (field 2 Benefit) (field 3 Benefit)
          (field 4 Benefit) (field 5 Benefit) (field 6 Benefit)
          (field 7 Benefit) (field 10 Benefit) (field 11 Benefit)
          (field 12 Benefit) (field 18 Benefit) (field 19 Benefit)
          (field 20 Benefit) (field 13 Benefit))
        (makeblock 0 (field 0 Whether_sufficient_benefit)
          (field 1 Whether_sufficient_benefit)
          (field 5 Whether_sufficient_benefit)
          (field 6 Whether_sufficient_benefit)
          (field 7 Whether_sufficient_benefit))
        scale_inline_threshold_by default_toplevel_multiplier
        direct_call_size maximum_interesting_size_of_function_body
        lambda_smaller' lambda_size))))
