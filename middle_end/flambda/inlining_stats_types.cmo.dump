(setglobal Inlining_stats_types!
  (let
    (print_stars =
       (function ppf n[int]
         (funct-body middle_end/flambda/inlining_stats_types.ml(22)<ghost>:1309-1375
           (before middle_end/flambda/inlining_stats_types.ml(23):1319-1375
             (let
               (s =
                  (after middle_end/flambda/inlining_stats_types.ml(23):1327-1344
                    (apply (field 0 (global Stdlib__string!)) n '*')))
               (before middle_end/flambda/inlining_stats_types.ml(24):1350-1375
                 (after middle_end/flambda/inlining_stats_types.ml(24):1350-1375
                   (apply (field 122 (global Stdlib__format!)) ppf
                     [0: [2: 0a 0a] "%s"] s)))))))
     print_calculation =
       (function depth[int] title subfunctions ppf wsb
         (funct-body middle_end/flambda/inlining_stats_types.ml(26)<ghost>:1399-1703
           (before middle_end/flambda/inlining_stats_types.ml(27):1439-1703
             (seq
               (after middle_end/flambda/inlining_stats_types.ml(27):1439-1474
                 (apply (field 6 (global Stdlib__format!)) ppf (+ depth 2)))
               (before middle_end/flambda/inlining_stats_types.ml(28):1478-1703
                 (seq
                   (after middle_end/flambda/inlining_stats_types.ml(28):1478-1605
                     (apply (field 122 (global Stdlib__format!)) ppf
                       [0:
                        [18:
                         [1: [0: [11: "<h>" 0a] "<h>"]]
                         [15:
                          [12:
                           ' '
                           [2:
                            0a
                            [17:
                             0a
                             [17:
                              [0: "@;" 1 0]
                              [17:
                               [0: "@;" 1 0]
                               [18: [1: [0: 0a ""]] [15: [17: 0a 0a]]]]]]]]]]
                        "@[<h>%a %s@]@;@;@[%a@]"]
                       print_stars (+ depth 1) title
                       (after middle_end/flambda/inlining_stats_types.ml(31):1564-1601
                         (apply (field 4 (field 4 (global Inlining_cost!)))
                           subfunctions))
                       wsb))
                   (before middle_end/flambda/inlining_stats_types.ml(32):1609-1703
                     (seq
                       (after middle_end/flambda/inlining_stats_types.ml(32):1609-1635
                         (apply (field 2 (global Stdlib__format!)) ppf 0a))
                       (before middle_end/flambda/inlining_stats_types.ml(33):1639-1703
                         (seq
                           (after middle_end/flambda/inlining_stats_types.ml(33):1639-1669
                             (apply (field 37 (global Stdlib__format!)) ppf
                               0a))
                           (before middle_end/flambda/inlining_stats_types.ml(34):1673-1703
                             (after middle_end/flambda/inlining_stats_types.ml(34):1673-1703
                               (apply (field 37 (global Stdlib__format!)) ppf
                                 0a)))))))))))))
     Inlined =
       (module-defn(Inlined) middle_end/flambda/inlining_stats_types.ml(36):1705-3104
         (let
           (summary =
              (function ppf param
                (funct-body middle_end/flambda/inlining_stats_types.ml(45)<ghost>:1901-2678
                  (switch* param
                   case int 0:
                    (before middle_end/flambda/inlining_stats_types.ml(47):1946-2074
                      (after middle_end/flambda/inlining_stats_types.ml(47):1946-2074
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was inlined because it was small enough to be inlined in `-Oclassic'")))
                   case int 1:
                    (before middle_end/flambda/inlining_stats_types.ml(51):2101-2187
                      (after middle_end/flambda/inlining_stats_types.ml(51):2101-2187
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was inlined because of an annotation.")))
                   case int 2:
                    (before middle_end/flambda/inlining_stats_types.ml(54):2229-2331
                      (after middle_end/flambda/inlining_stats_types.ml(54):2229-2331
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was inlined because it was local to this application.")))
                   case tag 0:
                    (before middle_end/flambda/inlining_stats_types.ml(57):2370-2506
                      (after middle_end/flambda/inlining_stats_types.ml(57):2370-2506
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was inlined because the expected benefit outweighed the change in code size.")))
                   case tag 1:
                    (before middle_end/flambda/inlining_stats_types.ml(61):2542-2678
                      (after middle_end/flambda/inlining_stats_types.ml(61):2542-2678
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was inlined because the expected benefit outweighed the change in code size."))))))
            calculation =
              (function depth[int] ppf param
                (funct-body middle_end/flambda/inlining_stats_types.ml(65)<ghost>:2698-3099
                  (switch* param
                   case int 0:
                    (before middle_end/flambda/inlining_stats_types.ml(66):2742-2744
                      0a)
                   case int 1:
                    (before middle_end/flambda/inlining_stats_types.ml(67):2765-2767
                      0a)
                   case int 2:
                    (before middle_end/flambda/inlining_stats_types.ml(68):2803-2805
                      0a)
                   case tag 0:
                    (let (wsb =a (field 0 param))
                      (before middle_end/flambda/inlining_stats_types.ml(70):2846-2952
                        (after middle_end/flambda/inlining_stats_types.ml(70):2846-2952
                          (apply print_calculation depth
                            "Inlining benefit calculation" 0a ppf wsb))))
                   case tag 1:
                    (let (wsb =a (field 1 param))
                      (before middle_end/flambda/inlining_stats_types.ml(74):2994-3099
                        (after middle_end/flambda/inlining_stats_types.ml(74):2994-3099
                          (apply print_calculation depth
                            "Inlining benefit calculation" 1a ppf wsb))))))))
           (pseudo middle_end/flambda/inlining_stats_types.ml(36):1722-3104
             (makeblock 0 summary calculation))))
     Not_inlined =
       (module-defn(Not_inlined) middle_end/flambda/inlining_stats_types.ml(80):3106-5257
         (let
           (summary =
              (function ppf param
                (funct-body middle_end/flambda/inlining_stats_types.ml(92)<ghost>:3381-4773
                  (switch* param
                   case int 0:
                    (before middle_end/flambda/inlining_stats_types.ml(94):3424-3554
                      (after middle_end/flambda/inlining_stats_types.ml(94):3424-3554
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was not inlined because it was too large to be inlined in `-Oclassic'.")))
                   case int 1:
                    (before middle_end/flambda/inlining_stats_types.ml(103):3787-3888
                      (after middle_end/flambda/inlining_stats_types.ml(103):3787-3888
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was not inlined because of an annotation.")))
                   case int 2:
                    (before middle_end/flambda/inlining_stats_types.ml(107):3929-4119
                      (after middle_end/flambda/inlining_stats_types.ml(107):3929-4119
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was not inlined because there was no useful information about any of its parameters, and it was not particularly small.")))
                   case int 3:
                    (before middle_end/flambda/inlining_stats_types.ml(112):4160-4277
                      (after middle_end/flambda/inlining_stats_types.ml(112):4160-4277
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was not inlined because its unrolling depth was exceeded.")))
                   case int 4:
                    (before middle_end/flambda/inlining_stats_types.ml(116):4303-4406
                      (after middle_end/flambda/inlining_stats_types.ml(116):4303-4406
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was not inlined because it was a self call.")))
                   case tag 0:
                    (let (size =a (field 0 param))
                      (before middle_end/flambda/inlining_stats_types.ml(98):3591-3760
                        (seq
                          (after middle_end/flambda/inlining_stats_types.ml(98):3591-3720
                            (apply (field 119 (global Stdlib__format!)) ppf
                              "This function was not inlined because it was larger than the current size threshold"))
                          (before middle_end/flambda/inlining_stats_types.ml(101):3730-3760
                            (after middle_end/flambda/inlining_stats_types.ml(101):3730-3760
                              (apply (field 122 (global Stdlib__format!)) ppf
                                [0:
                                 [12: '(' [4: 3a 0a 0a [12: ')' 0a]]] "(%i)"]
                                size))))))
                   case tag 1:
                    (before middle_end/flambda/inlining_stats_types.ml(120):4445-4591
                      (after middle_end/flambda/inlining_stats_types.ml(120):4445-4591
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was not inlined because the expected benefit did not outweigh the change in code size.")))
                   case tag 2:
                    (before middle_end/flambda/inlining_stats_types.ml(124):4627-4773
                      (after middle_end/flambda/inlining_stats_types.ml(124):4627-4773
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was not inlined because the expected benefit did not outweigh the change in code size."))))))
            calculation =
              (function depth[int] ppf param
                (funct-body middle_end/flambda/inlining_stats_types.ml(128)<ghost>:4793-5252
                  (catch
                    (switch param
                     case tag 1:
                      (let (wsb =a (field 0 param))
                        (before middle_end/flambda/inlining_stats_types.ml(136):4999-5105
                          (after middle_end/flambda/inlining_stats_types.ml(136):4999-5105
                            (apply print_calculation depth
                              "Inlining benefit calculation" 0a ppf wsb))))
                     case tag 2:
                      (let (wsb =a (field 1 param))
                        (before middle_end/flambda/inlining_stats_types.ml(140):5147-5252
                          (after middle_end/flambda/inlining_stats_types.ml(140):5147-5252
                            (apply print_calculation depth
                              "Inlining benefit calculation" 1a ppf wsb))))
                     default: (exit 1))
                   with (1)
                    (before middle_end/flambda/inlining_stats_types.ml(134):4956-4958
                      0a)))))
           (pseudo middle_end/flambda/inlining_stats_types.ml(80):3127-5257
             (makeblock 0 summary calculation))))
     Specialised =
       (module-defn(Specialised) middle_end/flambda/inlining_stats_types.ml(146):5259-6276
         (let
           (summary =
              (function ppf param
                (funct-body middle_end/flambda/inlining_stats_types.ml(152)<ghost>:5407-5893
                  (switch* param
                   case int 0:
                    (before middle_end/flambda/inlining_stats_types.ml(154):5448-5538
                      (after middle_end/flambda/inlining_stats_types.ml(154):5448-5538
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was specialised because of an annotation.")))
                   case tag 0:
                    (before middle_end/flambda/inlining_stats_types.ml(157):5577-5717
                      (after middle_end/flambda/inlining_stats_types.ml(157):5577-5717
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was specialised because the expected benefit outweighed the change in code size.")))
                   case tag 1:
                    (before middle_end/flambda/inlining_stats_types.ml(161):5753-5893
                      (after middle_end/flambda/inlining_stats_types.ml(161):5753-5893
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was specialised because the expected benefit outweighed the change in code size."))))))
            calculation =
              (function depth[int] ppf param
                (funct-body middle_end/flambda/inlining_stats_types.ml(166)<ghost>:5914-6272
                  (switch* param
                   case int 0:
                    (before middle_end/flambda/inlining_stats_types.ml(167):5956-5958
                      0a)
                   case tag 0:
                    (let (wsb =a (field 0 param))
                      (before middle_end/flambda/inlining_stats_types.ml(169):6001-6115
                        (after middle_end/flambda/inlining_stats_types.ml(169):6001-6115
                          (apply print_calculation depth
                            "Specialising benefit calculation" 0a ppf wsb))))
                   case tag 1:
                    (let (wsb =a (field 1 param))
                      (before middle_end/flambda/inlining_stats_types.ml(173):6159-6272
                        (after middle_end/flambda/inlining_stats_types.ml(173):6159-6272
                          (apply print_calculation depth
                            "Specialising benefit calculation" 1a ppf wsb))))))))
           (pseudo middle_end/flambda/inlining_stats_types.ml(146):5280-6276
             (makeblock 0 summary calculation))))
     Not_specialised =
       (module-defn(Not_specialised) middle_end/flambda/inlining_stats_types.ml(178):6278-8390
         (let
           (summary =
              (function ppf param
                (funct-body middle_end/flambda/inlining_stats_types.ml(190)<ghost>:6553-8016
                  (switch* param
                   case int 0:
                    (before middle_end/flambda/inlining_stats_types.ml(192):6596-6717
                      (after middle_end/flambda/inlining_stats_types.ml(192):6596-6717
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was not specialised because it was compiled with `-Oclassic'.")))
                   case int 1:
                    (before middle_end/flambda/inlining_stats_types.ml(201):6954-7059
                      (after middle_end/flambda/inlining_stats_types.ml(201):6954-7059
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was not specialised because of an annotation.")))
                   case int 2:
                    (before middle_end/flambda/inlining_stats_types.ml(205):7089-7197
                      (after middle_end/flambda/inlining_stats_types.ml(205):7089-7197
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was not specialised because it is not recursive.")))
                   case int 3:
                    (before middle_end/flambda/inlining_stats_types.ml(209):7224-7329
                      (after middle_end/flambda/inlining_stats_types.ml(209):7224-7329
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was not specialised because it is not closed.")))
                   case int 4:
                    (before middle_end/flambda/inlining_stats_types.ml(213):7369-7489
                      (after middle_end/flambda/inlining_stats_types.ml(213):7369-7489
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was not specialised because it has no invariant parameters.")))
                   case int 5:
                    (before middle_end/flambda/inlining_stats_types.ml(217):7530-7699
                      (after middle_end/flambda/inlining_stats_types.ml(217):7530-7699
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was not specialised because there was no useful information about any of its invariant parameters.")))
                   case int 6:
                    (before middle_end/flambda/inlining_stats_types.ml(222):7725-7832
                      (after middle_end/flambda/inlining_stats_types.ml(222):7725-7832
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was not specialised because it was a self call.")))
                   case tag 0:
                    (let (size =a (field 0 param))
                      (before middle_end/flambda/inlining_stats_types.ml(196):6754-6927
                        (seq
                          (after middle_end/flambda/inlining_stats_types.ml(196):6754-6887
                            (apply (field 119 (global Stdlib__format!)) ppf
                              "This function was not specialised because it was larger than the current size threshold"))
                          (before middle_end/flambda/inlining_stats_types.ml(199):6897-6927
                            (after middle_end/flambda/inlining_stats_types.ml(199):6897-6927
                              (apply (field 122 (global Stdlib__format!)) ppf
                                [0:
                                 [12: '(' [4: 3a 0a 0a [12: ')' 0a]]] "(%i)"]
                                size))))))
                   case tag 1:
                    (before middle_end/flambda/inlining_stats_types.ml(226):7865-8016
                      (after middle_end/flambda/inlining_stats_types.ml(226):7865-8016
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was not specialised because the expected benefit did not outweigh the change in code size."))))))
            calculation =
              (function depth[int] ppf param
                (funct-body middle_end/flambda/inlining_stats_types.ml(230)<ghost>:8036-8385
                  (catch
                    (switch param
                     case tag 1:
                      (let (wsb =a (field 1 param))
                        (before middle_end/flambda/inlining_stats_types.ml(240):8276-8385
                          (after middle_end/flambda/inlining_stats_types.ml(240):8276-8385
                            (apply print_calculation depth
                              "Specialising benefit calculation" 1a ppf wsb))))
                     default: (exit 2))
                   with (2)
                    (before middle_end/flambda/inlining_stats_types.ml(238):8235-8237
                      0a)))))
           (pseudo middle_end/flambda/inlining_stats_types.ml(178):6303-8390
             (makeblock 0 summary calculation))))
     Prevented =
       (module-defn(Prevented) middle_end/flambda/inlining_stats_types.ml(246):8392-8839
         (let
           (summary =
              (function ppf param
                (funct-body middle_end/flambda/inlining_stats_types.ml(251)<ghost>:8504-8835
                  (if param
                    (before middle_end/flambda/inlining_stats_types.ml(256):8691-8835
                      (after middle_end/flambda/inlining_stats_types.ml(256):8691-8835
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was prevented from inlining or specialising because the inlining depth was exceeded.")))
                    (before middle_end/flambda/inlining_stats_types.ml(253):8567-8660
                      (after middle_end/flambda/inlining_stats_types.ml(253):8567-8660
                        (apply (field 119 (global Stdlib__format!)) ppf
                          "This function was prevented from inlining or specialising.")))))))
           (pseudo middle_end/flambda/inlining_stats_types.ml(246):8411-8839
             (makeblock 0 summary))))
     Decision =
       (module-defn(Decision) middle_end/flambda/inlining_stats_types.ml(261):8841-9801
         (let
           (summary =
              (function ppf param
                (funct-body middle_end/flambda/inlining_stats_types.ml(268)<ghost>:9058-9438
                  (switch* param
                   case tag 0:
                    (let (p =a (field 0 param))
                      (before middle_end/flambda/inlining_stats_types.ml(270):9100-9123
                        (after middle_end/flambda/inlining_stats_types.ml(270):9100-9123
                          (apply (field 0 Prevented) ppf p))))
                   case tag 1:
                    (let (s =a (field 0 param))
                      (before middle_end/flambda/inlining_stats_types.ml(272):9153-9178
                        (after middle_end/flambda/inlining_stats_types.ml(272):9153-9178
                          (apply (field 0 Specialised) ppf s))))
                   case tag 2:
                    (let (i =a (field 1 param) s =a (field 0 param))
                      (before middle_end/flambda/inlining_stats_types.ml(274):9209-9305
                        (after middle_end/flambda/inlining_stats_types.ml(274):9209-9305
                          (apply (field 122 (global Stdlib__format!)) ppf
                            [0:
                             [18:
                              [1: [0: [11: "<v>" 0a] "<v>"]]
                              [18:
                               [1: [0: 0a ""]]
                               [15:
                                [17:
                                 0a
                                 [17:
                                  [0: "@;" 1 0]
                                  [17:
                                   [0: "@;" 1 0]
                                   [18:
                                    [1: [0: 0a ""]]
                                    [15: [17: 0a [17: 0a 0a]]]]]]]]]]
                             "@[<v>@[%a@]@;@;@[%a@]@]"]
                            (field 0 Not_specialised) s (field 0 Inlined) i))))
                   case tag 3:
                    (let (i =a (field 1 param) s =a (field 0 param))
                      (before middle_end/flambda/inlining_stats_types.ml(277):9338-9438
                        (after middle_end/flambda/inlining_stats_types.ml(277):9338-9438
                          (apply (field 122 (global Stdlib__format!)) ppf
                            [0:
                             [18:
                              [1: [0: [11: "<v>" 0a] "<v>"]]
                              [18:
                               [1: [0: 0a ""]]
                               [15:
                                [17:
                                 0a
                                 [17:
                                  [0: "@;" 1 0]
                                  [17:
                                   [0: "@;" 1 0]
                                   [18:
                                    [1: [0: 0a ""]]
                                    [15: [17: 0a [17: 0a 0a]]]]]]]]]]
                             "@[<v>@[%a@]@;@;@[%a@]@]"]
                            (field 0 Not_specialised) s (field 0 Not_inlined)
                            i)))))))
            calculation =
              (function depth[int] ppf param
                (funct-body middle_end/flambda/inlining_stats_types.ml(280)<ghost>:9458-9797
                  (switch* param
                   case tag 0:
                    (before middle_end/flambda/inlining_stats_types.ml(281):9501-9503
                      0a)
                   case tag 1:
                    (let (s =a (field 0 param))
                      (before middle_end/flambda/inlining_stats_types.ml(283):9533-9569
                        (after middle_end/flambda/inlining_stats_types.ml(283):9533-9569
                          (apply (field 1 Specialised) depth ppf s))))
                   case tag 2:
                    (let (i =a (field 1 param) s =a (field 0 param))
                      (before middle_end/flambda/inlining_stats_types.ml(285):9600-9680
                        (seq
                          (after middle_end/flambda/inlining_stats_types.ml(285):9600-9640
                            (apply (field 1 Not_specialised) depth ppf s))
                          (before middle_end/flambda/inlining_stats_types.ml(286):9648-9680
                            (after middle_end/flambda/inlining_stats_types.ml(286):9648-9680
                              (apply (field 1 Inlined) depth ppf i))))))
                   case tag 3:
                    (let (i =a (field 1 param) s =a (field 0 param))
                      (before middle_end/flambda/inlining_stats_types.ml(288):9713-9797
                        (seq
                          (after middle_end/flambda/inlining_stats_types.ml(288):9713-9753
                            (apply (field 1 Not_specialised) depth ppf s))
                          (before middle_end/flambda/inlining_stats_types.ml(289):9761-9797
                            (after middle_end/flambda/inlining_stats_types.ml(289):9761-9797
                              (apply (field 1 Not_inlined) depth ppf i))))))))))
           (pseudo middle_end/flambda/inlining_stats_types.ml(261):8859-9801
             (makeblock 0 summary calculation)))))
    (pseudo _none_(0)<ghost>:-1--1
      (makeblock 0 (makeblock 0) (makeblock 0) (makeblock 0) (makeblock 0)
        (makeblock 0) Decision))))
