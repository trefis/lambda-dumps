(setglobal Persistent_env!
  (let
    (Consistbl =
       (module-defn(Consistbl) typing/persistent_env.ml(22):1224-1278
         (apply (field 0 (global Consistbl!))
           (let (let = (field 3 (field 11 (global Misc!))))
             (makeblock 0 (field 38 let) (field 39 let) (field 40 let)
               (field 32 let)))))
     add_delayed_check_forward =
       (makemutable 0
         (function param
           (funct-body typing/persistent_env.ml(24):1316-1339
             (before typing/persistent_env.ml(24):1326-1338
               (raise
                 (after typing/persistent_env.ml(24):1326-1338
                   (makeblock 0 (global Assert_failure!)
                     [0: "typing/persistent_env.ml" 24 46])))))))
     Error = (makeblock 248 "Persistent_env.Error" (caml_fresh_oo_id 0))
     error =
       (function err
         (funct-body typing/persistent_env.ml(33)<ghost>:1580-1603
           (before typing/persistent_env.ml(33):1586-1603
             (raise
               (after typing/persistent_env.ml(33):1592-1603
                 (makeblock 0 Error err))))))
     Persistent_signature =
       (module-defn(Persistent_signature) typing/persistent_env.ml(35):1605-1912
         (let
           (load =
              (makemutable 0
                (function unit_name
                  (funct-body typing/persistent_env.ml(40):1731-1908
                    (before typing/persistent_env.ml(41):1756-1907
                      (catch
                        (try
                          (exit 1
                            (after typing/persistent_env.ml(41):1762-1803
                              (apply (field 6 (global Load_path!))
                                (after typing/persistent_env.ml(41):1783-1803
                                  (apply (field 27 (global Stdlib!))
                                    unit_name ".cmi")))))
                         with exn
                          (if (== exn (field 7 (global Stdlib!)))
                            (before typing/persistent_env.ml(43):1903-1907
                              0a)
                            (reraise exn)))
                       with (1 filename)
                        (before typing/persistent_env.ml(42):1829-1871
                          (makeblock 0
                            (makeblock 0 filename
                              (after typing/persistent_env.ml(42):1852-1869
                                (apply (field 2 (global Cmi_format!))
                                  filename)))))))))))
           (pseudo typing/persistent_env.ml(35):1635-1912 (makeblock 0 load))))
     empty =
       (function param
         (funct-body typing/persistent_env.ml(73)<ghost>:2556-2770
           (before typing/persistent_env.ml(73):2561-2770
             (makeblock 0
               (after typing/persistent_env.ml(74):2589-2606
                 (apply (field 0 (global Stdlib__hashtbl!)) 0a 17))
               (makemutable 0
                 (field 0 (field 38 (field 3 (field 11 (global Misc!))))))
               (makemutable 0
                 (field 0 (field 38 (field 3 (field 11 (global Misc!))))))
               (after typing/persistent_env.ml(77):2711-2730
                 (apply (field 0 Consistbl) 0a))
               (makemutable 0 0a)))))
     clear =
       (function penv
         (funct-body typing/persistent_env.ml(81)<ghost>:2782-3108
           (before typing/persistent_env.ml(82):2791-3108
             (let
               (can_load_cmis =a (field 4 penv)
                crc_units =a (field 3 penv)
                imported_opaque_units =a (field 2 penv)
                imported_units =a (field 1 penv)
                persistent_structures =a (field 0 penv))
               (before typing/persistent_env.ml(89):2921-3108
                 (seq
                   (after typing/persistent_env.ml(89):2921-2956
                     (apply (field 1 (global Stdlib__hashtbl!))
                       persistent_structures))
                   (before typing/persistent_env.ml(90):2960-3108
                     (seq
                       (setfield_ptr 0 imported_units
                         (field 0
                           (field 38 (field 3 (field 11 (global Misc!))))))
                       (before typing/persistent_env.ml(91):2998-3108
                         (seq
                           (setfield_ptr 0 imported_opaque_units
                             (field 0
                               (field 38 (field 3 (field 11 (global Misc!))))))
                           (before typing/persistent_env.ml(92):3043-3108
                             (seq
                               (after typing/persistent_env.ml(92):3043-3068
                                 (apply (field 1 Consistbl) crc_units))
                               (before typing/persistent_env.ml(93):3072-3108
                                 (seq (setfield_ptr 0 can_load_cmis 0a)
                                   (before typing/persistent_env.ml(94):3106-3108
                                     0a)))))))))))))))
     clear_missing =
       (function param
         (funct-body typing/persistent_env.ml(96)<ghost>:3128-3367
           (let (persistent_structures =a (field 0 param))
             (before typing/persistent_env.ml(97):3159-3367
               (let
                 (missing_entries =
                    (after typing/persistent_env.ml(98):3185-3295
                      (apply (field 13 (global Stdlib__hashtbl!))
                        (function name r acc
                          (funct-body typing/persistent_env.ml(99):3204-3264
                            (before typing/persistent_env.ml(99):3223-3263
                              (if (== r 0a)
                                (before typing/persistent_env.ml(99):3243-3254
                                  (makeblock 0 name acc))
                                (before typing/persistent_env.ml(99):3260-3263
                                  acc)))))
                        persistent_structures 0a)))
                 (before typing/persistent_env.ml(102):3303-3367
                   (after typing/persistent_env.ml(102):3303-3367
                     (apply (field 14 (global Stdlib__list!))
                       (after typing/persistent_env.ml(102):3313-3351
                         (apply (field 9 (global Stdlib__hashtbl!))
                           persistent_structures))
                       missing_entries))))))))
     add_import =
       (function param s
         (funct-body typing/persistent_env.ml(104)<ghost>:3384-3460
           (let (imported_units =a (field 1 param))
             (before typing/persistent_env.ml(105):3410-3460
               (setfield_ptr 0 imported_units
                 (after typing/persistent_env.ml(105):3428-3460
                   (apply
                     (field 3 (field 38 (field 3 (field 11 (global Misc!)))))
                     s (field 0 imported_units))))))))
     add_imported_opaque =
       (function param s
         (funct-body typing/persistent_env.ml(107)<ghost>:3486-3583
           (let (imported_opaque_units =a (field 2 param))
             (before typing/persistent_env.ml(108):3519-3583
               (setfield_ptr 0 imported_opaque_units
                 (after typing/persistent_env.ml(108):3544-3583
                   (apply
                     (field 3 (field 38 (field 3 (field 11 (global Misc!)))))
                     s (field 0 imported_opaque_units))))))))
     find_in_cache =
       (function param s
         (funct-body typing/persistent_env.ml(110)<ghost>:3603-3766
           (let (persistent_structures =a (field 0 param))
             (before typing/persistent_env.ml(111):3636-3766
               (catch
                 (try
                   (exit 6
                     (after typing/persistent_env.ml(111):3642-3678
                       (apply (field 5 (global Stdlib__hashtbl!))
                         persistent_structures s)))
                  with exn
                   (if (== exn (field 7 (global Stdlib!)))
                     (before typing/persistent_env.ml(112):3711-3715 0a)
                     (reraise exn)))
                with (6 val)
                 (if val
                   (let (pm =a (field 1 val))
                     (before typing/persistent_env.ml(114):3759-3766
                       (makeblock 0 pm)))
                   (before typing/persistent_env.ml(113):3731-3735 0a)))))))
     import_crcs =
       (function penv source crcs
         (funct-body typing/persistent_env.ml(116)<ghost>:3784-4032
           (before typing/persistent_env.ml(117):3806-4032
             (let (crc_units =a (field 3 penv))
               (before typing/persistent_env.ml(118):3837-4032
                 (let
                   (import_crc =
                      (function param
                        (funct-body typing/persistent_env.ml(118)<ghost>:3852-4001
                          (let
                            (crco =a (field 1 param) name =a (field 0 param))
                            (before typing/persistent_env.ml(119):3871-4001
                              (if crco
                                (let (crc =a (field 0 crco))
                                  (before typing/persistent_env.ml(122):3930-4001
                                    (seq
                                      (after typing/persistent_env.ml(122):3930-3950
                                        (apply add_import penv name))
                                      (before typing/persistent_env.ml(123):3960-4001
                                        (after typing/persistent_env.ml(123):3960-4001
                                          (apply (field 2 Consistbl)
                                            crc_units name crc source))))))
                                (before typing/persistent_env.ml(120):3901-3903
                                  0a)))))))
                   (before typing/persistent_env.ml(124):4007-4032
                     (after typing/persistent_env.ml(124):4007-4032
                       (apply (field 14 (global Stdlib__list!)) import_crc
                         crcs)))))))))
     check_consistency =
       (function penv ps
         (funct-body typing/persistent_env.ml(126)<ghost>:4056-4228
           (before typing/persistent_env.ml(127):4068-4228
             (try
               (after typing/persistent_env.ml(127):4072-4122
                 (apply import_crcs penv (field 2 ps) (field 1 ps)))
              with exn
               (let (tag =a (field 0 exn))
                 (if (== tag (field 9 Consistbl))
                   (let
                     (auth =a (field 3 exn)
                      source =a (field 2 exn)
                      name =a (field 1 exn))
                     (before typing/persistent_env.ml(129):4181-4228
                       (after typing/persistent_env.ml(129):4181-4228
                         (apply error (makeblock 1 name auth source)))))
                   (reraise exn)))))))
     can_load_cmis =
       (function penv
         (funct-body typing/persistent_env.ml(131)<ghost>:4248-4278
           (before typing/persistent_env.ml(132):4257-4278
             (field 0 (field 4 penv)))))
     set_can_load_cmis =
       (function penv setting
         (funct-body typing/persistent_env.ml(133)<ghost>:4301-4347
           (before typing/persistent_env.ml(134):4318-4347
             (setfield_ptr 0 (field 4 penv) setting))))
     without_cmis =
       (function penv f x
         (funct-body typing/persistent_env.ml(136)<ghost>:4366-4565
           (before typing/persistent_env.ml(137):4379-4565
             (let
               (log =
                  (after typing/persistent_env.ml(137):4389-4403
                    (apply (field 5 (field 59 (global Misc!))) 0a)))
               (before typing/persistent_env.ml(138):4409-4565
                 (let
                   (res =
                      (after typing/persistent_env.ml(139):4429-4528
                        (apply (field 10 (global Misc!))
                          (makeblock 0
                            (makeblock 0 (field 4 penv) (makeblock 0 log))
                            0a)
                          (function param
                            (funct-body typing/persistent_env.ml(141):4513-4528
                              (before typing/persistent_env.ml(141):4524-4527
                                (after typing/persistent_env.ml(141):4524-4527
                                  (apply f x))))))))
                   (before typing/persistent_env.ml(143):4537-4565
                     (seq
                       (after typing/persistent_env.ml(143):4537-4558
                         (apply (field 7 (field 59 (global Misc!))) log))
                       (before typing/persistent_env.ml(144):4562-4565 res)))))))))
     fold =
       (function param f x
         (funct-body typing/persistent_env.ml(146)<ghost>:4576-4750
           (let (persistent_structures =a (field 0 param))
             (before typing/persistent_env.ml(147):4611-4750
               (after typing/persistent_env.ml(147):4611-4750
                 (apply (field 13 (global Stdlib__hashtbl!))
                   (function modname pso x
                     (funct-body typing/persistent_env.ml(147):4624-4722
                       (before typing/persistent_env.ml(147):4646-4721
                         (if pso
                           (let (pm =a (field 1 pso))
                             (before typing/persistent_env.ml(149):4707-4721
                               (after typing/persistent_env.ml(149):4707-4721
                                 (apply f modname pm x))))
                           (before typing/persistent_env.ml(148):4680-4681 x)))))
                   persistent_structures x))))))
     save_pers_struct =
       (function penv crc ps pm
         (funct-body typing/persistent_env.ml(154)<ghost>:4826-5245
           (before typing/persistent_env.ml(155):4845-5245
             (let
               (crc_units =a (field 3 penv)
                persistent_structures =a (field 0 penv))
               (before typing/persistent_env.ml(156):4899-5245
                 (let (modname = (field 0 ps))
                   (before typing/persistent_env.ml(157):4929-5245
                     (seq
                       (after typing/persistent_env.ml(157):4929-4987
                         (apply (field 4 (global Stdlib__hashtbl!))
                           persistent_structures modname (makeblock 0 ps pm)))
                       (before typing/persistent_env.ml(158):4991-5245
                         (seq
                           (after typing/persistent_env.ml(158):4991-5164
                             (apply (field 14 (global Stdlib__list!))
                               (function param
                                 (funct-body typing/persistent_env.ml(159):5005-5148
                                   (if (isint param)
                                     (switch* param
                                      case int 0:
                                       (before typing/persistent_env.ml(160):5037-5039
                                         0a)
                                      case int 1:
                                       (before typing/persistent_env.ml(163):5115-5147
                                         (after typing/persistent_env.ml(163):5115-5147
                                           (apply add_imported_opaque penv
                                             modname)))
                                      case int 2:
                                       (before typing/persistent_env.ml(162):5092-5094
                                         0a))
                                     (before typing/persistent_env.ml(161):5062-5064
                                       0a))))
                               (field 3 ps)))
                           (before typing/persistent_env.ml(165):5168-5245
                             (seq
                               (after typing/persistent_env.ml(165):5168-5218
                                 (apply (field 4 Consistbl) crc_units modname
                                   crc (field 2 ps)))
                               (before typing/persistent_env.ml(166):5222-5245
                                 (after typing/persistent_env.ml(166):5222-5245
                                   (apply add_import penv modname)))))))))))))))
     acknowledge_pers_struct =
       (function penv check modname pers_sig pm
         (funct-body typing/persistent_env.ml(168)<ghost>:5275-6221
           (before typing/persistent_env.ml(169):5310-6221
             (let (cmi =a (field 1 pers_sig) filename =a (field 0 pers_sig))
               (before typing/persistent_env.ml(170):5369-6221
                 (let (name = (field 0 cmi))
                   (before typing/persistent_env.ml(171):5398-6221
                     (let (crcs = (field 2 cmi))
                       (before typing/persistent_env.ml(172):5427-6221
                         (let (flags = (field 3 cmi))
                           (before typing/persistent_env.ml(173):5458-6221
                             (let
                               (ps = (makeblock 0 name crcs filename flags))
                               (before typing/persistent_env.ml(178):5600-6221
                                 (seq
                                   (if
                                     (after typing/persistent_env.ml(178):5603-5624
                                       (caml_string_notequal (field 0 ps)
                                         modname))
                                     (before typing/persistent_env.ml(179):5634-5689
                                       (after typing/persistent_env.ml(179):5634-5689
                                         (apply error
                                           (makeblock 0 modname (field 0 ps)
                                             filename))))
                                     0a)
                                   (before typing/persistent_env.ml(180):5693-6221
                                     (seq
                                       (after typing/persistent_env.ml(180):5693-6067
                                         (apply
                                           (field 14 (global Stdlib__list!))
                                           (function param
                                             (funct-body typing/persistent_env.ml(181):5707-6051
                                               (if (isint param)
                                                 (switch* param
                                                  case int 0:
                                                   (before typing/persistent_env.ml(183):5751-5842
                                                     (if
                                                       (not
                                                         (field 0
                                                           (field 49
                                                             (global Clflags!))))
                                                       (before typing/persistent_env.ml(184):5802-5842
                                                         (after typing/persistent_env.ml(184):5802-5842
                                                           (apply error
                                                             (makeblock 2
                                                               (field 0 ps)))))
                                                       0a))
                                                  case int 1:
                                                   (before typing/persistent_env.ml(189):6018-6050
                                                     (after typing/persistent_env.ml(189):6018-6050
                                                       (apply
                                                         add_imported_opaque
                                                         penv modname)))
                                                  case int 2:
                                                   (before typing/persistent_env.ml(186):5882-5971
                                                     (if
                                                       (field 58
                                                         (global Config!))
                                                       (before typing/persistent_env.ml(187):5923-5971
                                                         (after typing/persistent_env.ml(187):5923-5971
                                                           (apply error
                                                             (makeblock 3
                                                               (field 0 ps)))))
                                                       0a)))
                                                 (before typing/persistent_env.ml(188):5995-5997
                                                   0a))))
                                           (field 3 ps)))
                                       (before typing/persistent_env.ml(191):6071-6221
                                         (seq
                                           (if check
                                             (before typing/persistent_env.ml(191):6085-6110
                                               (after typing/persistent_env.ml(191):6085-6110
                                                 (apply check_consistency
                                                   penv ps)))
                                             0a)
                                           (before typing/persistent_env.ml(192):6114-6221
                                             (let
                                               (persistent_structures =a
                                                  (field 0 penv))
                                               (before typing/persistent_env.ml(193):6157-6221
                                                 (seq
                                                   (after typing/persistent_env.ml(193):6157-6215
                                                     (apply
                                                       (field 4
                                                         (global Stdlib__hashtbl!))
                                                       persistent_structures
                                                       modname
                                                       (makeblock 0 ps pm)))
                                                   (before typing/persistent_env.ml(194):6219-6221
                                                     ps)))))))))))))))))))))))
     read_pers_struct =
       (function penv val_of_pers_sig check modname filename
         (funct-body typing/persistent_env.ml(196)<ghost>:6244-6527
           (before typing/persistent_env.ml(197):6292-6527
             (seq
               (after typing/persistent_env.ml(197):6292-6315
                 (apply add_import penv modname))
               (before typing/persistent_env.ml(198):6319-6527
                 (let
                   (cmi =
                      (after typing/persistent_env.ml(198):6329-6346
                        (apply (field 2 (global Cmi_format!)) filename)))
                   (before typing/persistent_env.ml(199):6352-6527
                     (let (pers_sig = (makeblock 0 filename cmi))
                       (before typing/persistent_env.ml(200):6411-6527
                         (let
                           (pm =
                              (after typing/persistent_env.ml(200):6420-6444
                                (apply val_of_pers_sig pers_sig)))
                           (before typing/persistent_env.ml(201):6450-6527
                             (let
                               (ps =
                                  (after typing/persistent_env.ml(201):6459-6513
                                    (apply acknowledge_pers_struct penv check
                                      modname pers_sig pm)))
                               (before typing/persistent_env.ml(202):6519-6527
                                 (makeblock 0 ps pm))))))))))))))
     find_pers_struct =
       (function penv val_of_pers_sig check name
         (funct-body typing/persistent_env.ml(204)<ghost>:6550-7302
           (before typing/persistent_env.ml(205):6586-7302
             (let (persistent_structures =a (field 0 penv))
               (before typing/persistent_env.ml(206):6629-7302
                 (seq
                   (if
                     (after typing/persistent_env.ml(206):6632-6649
                       (caml_string_equal name "*predef*"))
                     (before typing/persistent_env.ml(206):6655-6670
                       (raise
                         (after typing/persistent_env.ml(206):6661-6670
                           (field 7 (global Stdlib!)))))
                     0a)
                   (before typing/persistent_env.ml(207):6674-7302
                     (catch
                       (try
                         (exit 21
                           (after typing/persistent_env.ml(207):6680-6719
                             (apply (field 5 (global Stdlib__hashtbl!))
                               persistent_structures name)))
                        with exn
                         (if (== exn (field 7 (global Stdlib!)))
                           (before typing/persistent_env.ml(211):6818-7302
                             (let
                               (*match* =
                                  (after typing/persistent_env.ml(211):6824-6842
                                    (apply can_load_cmis penv)))
                               (if *match*
                                 (before typing/persistent_env.ml(212):6876-6891
                                   (raise
                                     (after typing/persistent_env.ml(212):6882-6891
                                       (field 7 (global Stdlib!)))))
                                 (before typing/persistent_env.ml(214):6923-7302
                                   (let
                                     (psig =
                                        (let
                                          (*match* =
                                             (after typing/persistent_env.ml(215):6950-6992
                                               (apply
                                                 (field 0
                                                   (field 0
                                                     Persistent_signature))
                                                 name)))
                                          (if *match*
                                            (let (psig =a (field 0 *match*))
                                              (before typing/persistent_env.ml(216):7023-7027
                                                psig))
                                            (before typing/persistent_env.ml(218):7060-7135
                                              (seq
                                                (after typing/persistent_env.ml(218):7060-7106
                                                  (apply
                                                    (field 4
                                                      (global Stdlib__hashtbl!))
                                                    persistent_structures
                                                    name 0a))
                                                (before typing/persistent_env.ml(219):7120-7135
                                                  (raise
                                                    (after typing/persistent_env.ml(219):7126-7135
                                                      (field 7
                                                        (global Stdlib!))))))))))
                                     (before typing/persistent_env.ml(221):7155-7302
                                       (seq
                                         (after typing/persistent_env.ml(221):7155-7175
                                           (apply add_import penv name))
                                         (before typing/persistent_env.ml(222):7185-7302
                                           (let
                                             (pm =
                                                (after typing/persistent_env.ml(222):7194-7214
                                                  (apply val_of_pers_sig
                                                    psig)))
                                             (before typing/persistent_env.ml(223):7226-7302
                                               (let
                                                 (ps =
                                                    (after typing/persistent_env.ml(223):7235-7282
                                                      (apply
                                                        acknowledge_pers_struct
                                                        penv check name psig
                                                        pm)))
                                                 (before typing/persistent_env.ml(224):7294-7302
                                                   (makeblock 0 ps pm)))))))))))))
                           (reraise exn)))
                      with (21 val)
                       (if val
                         (let (pm =a (field 1 val) ps =a (field 0 val))
                           (before typing/persistent_env.ml(208):6747-6755
                             (makeblock 0 ps pm)))
                         (before typing/persistent_env.ml(209):6771-6786
                           (raise
                             (after typing/persistent_env.ml(209):6777-6786
                               (field 7 (global Stdlib!))))))))))))))
     check_pers_struct =
       (function penv f loc name
         (funct-body typing/persistent_env.ml(227)<ghost>:7382-8460
           (before typing/persistent_env.ml(228):7403-8460
             (try
               (ignore
                 (after typing/persistent_env.ml(229):7418-7454
                   (apply find_pers_struct penv f 0a name)))
              with exn
               (if (== exn (field 7 (global Stdlib!)))
                 (before typing/persistent_env.ml(232):7485-7571
                   (let (warn = (makeblock 32 name 0a))
                     (before typing/persistent_env.ml(233):7540-7571
                       (after typing/persistent_env.ml(233):7540-7571
                         (apply (field 34 (global Location!)) loc warn)))))
                 (let (tag =a (field 0 exn))
                   (if (== tag (field 3 (global Cmi_format!)))
                     (let (err =a (field 1 exn))
                       (before typing/persistent_env.ml(235):7606-7764
                         (let
                           (msg =
                              (after typing/persistent_env.ml(235):7616-7664
                                (apply (field 126 (global Stdlib__format!))
                                  [0: [15: 0a] "%a"]
                                  (field 4 (global Cmi_format!)) err)))
                           (before typing/persistent_env.ml(236):7674-7764
                             (let
                               (warn = (makeblock 32 name (makeblock 0 msg)))
                               (before typing/persistent_env.ml(237):7733-7764
                                 (after typing/persistent_env.ml(237):7733-7764
                                   (apply (field 34 (global Location!)) loc
                                     warn))))))))
                     (let (tag =a (field 0 exn))
                       (if (== tag Error)
                         (let (err =a (field 1 exn))
                           (before typing/persistent_env.ml(239):7788-8460
                             (let
                               (msg =
                                  (switch* err
                                   case tag 0:
                                    (let
                                      (filename =a (field 2 err)
                                       ps_name =a (field 1 err)
                                       name =a (field 0 err))
                                      (before typing/persistent_env.ml(242):7888-8063
                                        (after typing/persistent_env.ml(242):7888-8063
                                          (apply
                                            (field 126
                                              (global Stdlib__format!))
                                            [0:
                                             [12:
                                              ' '
                                              [15:
                                               [17:
                                                [0: "@ " 1 0]
                                                [11:
                                                 "contains the compiled interface for "
                                                 [17:
                                                  [0: "@ " 1 0]
                                                  [2:
                                                   0a
                                                   [11:
                                                    " when "
                                                    [2:
                                                     0a
                                                     [11: " was expected" 0a]]]]]]]]]
                                             " %a@ contains the compiled interface for @ %s when %s was expected"]
                                            (field 18 (global Location!))
                                            filename ps_name name))))
                                   case tag 1:
                                    (before typing/persistent_env.ml(246):8099-8111
                                      (raise
                                        (after typing/persistent_env.ml(246):8099-8111
                                          (makeblock 0
                                            (global Assert_failure!)
                                            [0:
                                             "typing/persistent_env.ml" 246
                                             35]))))
                                   case tag 2:
                                    (let (name =a (field 0 err))
                                      (before typing/persistent_env.ml(248):8163-8236
                                        (after typing/persistent_env.ml(248):8163-8236
                                          (apply
                                            (field 125
                                              (global Stdlib__format!))
                                            [0:
                                             [2:
                                              0a
                                              [11:
                                               " uses recursive types" 0a]]
                                             "%s uses recursive types"]
                                            name))))
                                   case tag 3:
                                    (let (name =a (field 0 err))
                                      (before typing/persistent_env.ml(252):8296-8354
                                        (after typing/persistent_env.ml(252):8296-8354
                                          (apply
                                            (field 3
                                              (global Stdlib__printf!))
                                            [0:
                                             [2:
                                              0a
                                              [11: " uses -unsafe-string" 0a]]
                                             "%s uses -unsafe-string"]
                                            name))))))
                               (before typing/persistent_env.ml(255):8370-8460
                                 (let
                                   (warn =
                                      (makeblock 32 name (makeblock 0 msg)))
                                   (before typing/persistent_env.ml(256):8429-8460
                                     (after typing/persistent_env.ml(256):8429-8460
                                       (apply (field 34 (global Location!))
                                         loc warn))))))))
                         (reraise exn))))))))))
     read =
       (function penv f modname filename
         (funct-body typing/persistent_env.ml(258)<ghost>:8471-8550
           (before typing/persistent_env.ml(259):8499-8550
             (field 1
               (after typing/persistent_env.ml(259):8503-8550
                 (apply read_pers_struct penv f 1a modname filename))))))
     find =
       (function penv f name
         (funct-body typing/persistent_env.ml(261)<ghost>:8561-8616
           (before typing/persistent_env.ml(262):8577-8616
             (field 1
               (after typing/persistent_env.ml(262):8581-8616
                 (apply find_pers_struct penv f 1a name))))))
     check =
       (function penv f loc name
         (funct-body typing/persistent_env.ml(264)<ghost>:8628-9093
           (before typing/persistent_env.ml(265):8649-9093
             (let (persistent_structures =a (field 0 penv))
               (before typing/persistent_env.ml(266):8692-9093
                 (if
                   (not
                     (after typing/persistent_env.ml(266):8699-8739
                       (apply (field 8 (global Stdlib__hashtbl!))
                         persistent_structures name)))
                   (before typing/persistent_env.ml(266):8745-9093
                     (seq
                       (after typing/persistent_env.ml(270):8912-8932
                         (apply add_import penv name))
                       (before typing/persistent_env.ml(271):8938-9087
                         (if
                           (after typing/persistent_env.ml(271):8941-8994
                             (apply (field 3 (global Warnings!)) [32: "" 0a]))
                           (before typing/persistent_env.ml(272):9006-9087
                             (after typing/persistent_env.ml(272):9006-9087
                               (apply (field 0 add_delayed_check_forward)
                                 (function param
                                   (funct-body typing/persistent_env.ml(273):9041-9087
                                     (before typing/persistent_env.ml(273):9052-9086
                                       (after typing/persistent_env.ml(273):9052-9086
                                         (apply check_pers_struct penv f loc
                                           name))))))))
                           0a))))
                   0a))))))
     crc_of_unit =
       (function penv f name
         (funct-body typing/persistent_env.ml(276)<ghost>:9111-9348
           (before typing/persistent_env.ml(277):9127-9348
             (let
               (*match* =
                  (after typing/persistent_env.ml(277):9143-9176
                    (apply find_pers_struct penv f 1a name))
                ps =a (field 0 *match*))
               (before typing/persistent_env.ml(278):9182-9348
                 (let
                   (crco =
                      (try
                        (after typing/persistent_env.ml(280):9207-9233
                          (apply (field 38 (global Stdlib__list!)) name
                            (field 1 ps)))
                       with exn
                        (if (== exn (field 7 (global Stdlib!)))
                          (before typing/persistent_env.ml(282):9262-9274
                            (raise
                              (after typing/persistent_env.ml(282):9262-9274
                                (makeblock 0 (global Assert_failure!)
                                  [0: "typing/persistent_env.ml" 282 6]))))
                          (reraise exn))))
                   (before typing/persistent_env.ml(284):9284-9348
                     (if crco
                       (let (crc =a (field 0 crco))
                         (before typing/persistent_env.ml(286):9345-9348 crc))
                       (before typing/persistent_env.ml(285):9314-9326
                         (raise
                           (after typing/persistent_env.ml(285):9314-9326
                             (makeblock 0 (global Assert_failure!)
                               [0: "typing/persistent_env.ml" 285 14]))))))))))))
     imports =
       (function param
         (funct-body typing/persistent_env.ml(288)<ghost>:9362-9462
           (let
             (crc_units =a (field 3 param) imported_units =a (field 1 param))
             (before typing/persistent_env.ml(289):9397-9462
               (after typing/persistent_env.ml(289):9397-9462
                 (apply (field 6 Consistbl)
                   (after typing/persistent_env.ml(289):9415-9452
                     (apply
                       (field 21
                         (field 38 (field 3 (field 11 (global Misc!)))))
                       (field 0 imported_units)))
                   crc_units))))))
     looked_up =
       (function param modname
         (funct-body typing/persistent_env.ml(291)<ghost>:9478-9558
           (let (persistent_structures =a (field 0 param))
             (before typing/persistent_env.ml(292):9517-9558
               (after typing/persistent_env.ml(292):9517-9558
                 (apply (field 8 (global Stdlib__hashtbl!))
                   persistent_structures modname))))))
     is_imported =
       (function param s
         (funct-body typing/persistent_env.ml(294)<ghost>:9576-9634
           (let (imported_units =a (field 1 param))
             (before typing/persistent_env.ml(295):9602-9634
               (after typing/persistent_env.ml(295):9602-9634
                 (apply
                   (field 2 (field 38 (field 3 (field 11 (global Misc!))))) s
                   (field 0 imported_units)))))))
     is_imported_opaque =
       (function param s
         (funct-body typing/persistent_env.ml(297)<ghost>:9659-9731
           (let (imported_opaque_units =a (field 2 param))
             (before typing/persistent_env.ml(298):9692-9731
               (after typing/persistent_env.ml(298):9692-9731
                 (apply
                   (field 2 (field 38 (field 3 (field 11 (global Misc!))))) s
                   (field 0 imported_opaque_units)))))))
     make_cmi =
       (function penv modname sign alerts
         (funct-body typing/persistent_env.ml(300)<ghost>:9746-10167
           (before typing/persistent_env.ml(301):9775-10167
             (let
               (flags =
                  (after typing/persistent_env.ml(302):9791-10037
                    (apply (field 12 (global Stdlib__list!))
                      (makeblock 0
                        (if (field 0 (field 49 (global Clflags!)))
                          (before typing/persistent_env.ml(303):9844-9865
                            [0: 0a 0a])
                          (before typing/persistent_env.ml(303):9871-9873 0a))
                        (makeblock 0
                          (if (field 0 (field 131 (global Clflags!)))
                            (before typing/persistent_env.ml(304):9905-9924
                              [0: 1a 0a])
                            (before typing/persistent_env.ml(304):9930-9932
                              0a))
                          (makeblock 0
                            (if (field 0 (field 130 (global Clflags!)))
                              (before typing/persistent_env.ml(305):9972-9998
                                [0: 2a 0a])
                              (before typing/persistent_env.ml(305):10004-10006
                                0a))
                            (makeblock 0
                              (makeblock 0 (makeblock 0 alerts) 0a) 0a)))))))
               (before typing/persistent_env.ml(309):10045-10167
                 (let
                   (crcs =
                      (after typing/persistent_env.ml(309):10056-10068
                        (apply imports penv)))
                   (before typing/persistent_env.ml(310):10074-10167
                     (makeblock 0 modname sign crcs flags))))))))
     save_cmi =
       (function penv psig pm
         (funct-body typing/persistent_env.ml(317)<ghost>:10182-10980
           (before typing/persistent_env.ml(318):10199-10980
             (let (cmi =a (field 1 psig) filename =a (field 0 psig))
               (before typing/persistent_env.ml(319):10254-10980
                 (after typing/persistent_env.ml(319):10254-10980
                   (apply (field 3 (global Misc!)) 0a
                     (makeblock 0
                       (function param
                         (funct-body typing/persistent_env.ml(340):10948-10980
                           (before typing/persistent_env.ml(340):10959-10979
                             (after typing/persistent_env.ml(340):10959-10979
                               (apply (field 15 (global Misc!)) filename))))))
                     (function param
                       (funct-body typing/persistent_env.ml(319):10271-10928
                         (before typing/persistent_env.ml(320):10288-10922
                           (let
                             (flags =a (field 3 cmi)
                              imports =a (field 2 cmi)
                              modname =a (field 0 cmi))
                             (before typing/persistent_env.ml(326):10422-10922
                               (let
                                 (crc =
                                    (after typing/persistent_env.ml(327):10440-10605
                                      (apply (field 22 (global Misc!))
                                        [0: [0: 6a 0a]] filename
                                        (function temp_filename oc
                                          (funct-body typing/persistent_env.ml(329):10548-10605
                                            (before typing/persistent_env.ml(329):10573-10604
                                              (after typing/persistent_env.ml(329):10573-10604
                                                (apply
                                                  (field 0
                                                    (global Cmi_format!))
                                                  temp_filename oc cmi))))))))
                                 (before typing/persistent_env.ml(332):10715-10922
                                   (let
                                     (ps =
                                        (makeblock 0 modname
                                          (makeblock 0
                                            (makeblock 0 (field 0 cmi)
                                              (makeblock 0 crc))
                                            imports)
                                          filename flags))
                                     (before typing/persistent_env.ml(338):10891-10922
                                       (after typing/persistent_env.ml(338):10891-10922
                                         (apply save_pers_struct penv crc ps
                                           pm))))))))))))))))))
     report_error =
       (function ppf
         (funct-body typing/persistent_env.ml(342)<ghost>:10999-11958
           (before typing/persistent_env.ml(343):11007-11958
             (function param
               (funct-body typing/persistent_env.ml(344):11028-11958
                 (switch* param
                  case tag 0:
                   (let
                     (filename =a (field 2 param)
                      ps_name =a (field 1 param)
                      modname =a (field 0 param))
                     (before typing/persistent_env.ml(345):11089-11257
                       (after typing/persistent_env.ml(345):11089-11257
                         (apply (field 122 (global Stdlib__format!)) ppf
                           [0:
                            [11:
                             "Wrong file naming: "
                             [15:
                              [17:
                               [0: "@ " 1 0]
                               [11:
                                "contains the compiled interface for "
                                [17:
                                 [0: "@ " 1 0]
                                 [2:
                                  0a
                                  [11:
                                   " when " [2: 0a [11: " was expected" 0a]]]]]]]]]
                            "Wrong file naming: %a@ contains the compiled interface for @ %s when %s was expected"]
                           (field 18 (global Location!)) filename ps_name
                           modname))))
                  case tag 1:
                   (let
                     (source2 =a (field 2 param)
                      source1 =a (field 1 param)
                      name =a (field 0 param))
                     (before typing/persistent_env.ml(349):11309-11499
                       (after typing/persistent_env.ml(349):11309-11499
                         (apply (field 122 (global Stdlib__format!)) ppf
                           [0:
                            [18:
                             [1: [0: [11: "<hov>" 0a] "<hov>"]]
                             [11:
                              "The files "
                              [15:
                               [17:
                                [0: "@ " 1 0]
                                [11:
                                 "and "
                                 [15:
                                  [17:
                                   [0: "@ " 1 0]
                                   [11:
                                    "make inconsistent assumptions"
                                    [17:
                                     [0: "@ " 1 0]
                                     [11:
                                      "over interface " [2: 0a [17: 0a 0a]]]]]]]]]]]]
                            "@[<hov>The files %a@ and %a@ make inconsistent assumptions@ over interface %s@]"]
                           (field 18 (global Location!)) source1
                           (field 18 (global Location!)) source2 name))))
                  case tag 2:
                   (let (import =a (field 0 param))
                     (before typing/persistent_env.ml(354):11542-11686
                       (after typing/persistent_env.ml(354):11542-11686
                         (apply (field 122 (global Stdlib__format!)) ppf
                           [0:
                            [18:
                             [1: [0: [11: "<hov>" 0a] "<hov>"]]
                             [11:
                              "Invalid import of "
                              [2:
                               0a
                               [11:
                                ", which uses recursive types."
                                [17: [0: "@ " 1 0] [2: 0a [17: 0a 0a]]]]]]]
                            "@[<hov>Invalid import of %s, which uses recursive types.@ %s@]"]
                           import
                           "The compilation flag -rectypes is required"))))
                  case tag 3:
                   (let (import =a (field 0 param))
                     (before typing/persistent_env.ml(358):11737-11958
                       (after typing/persistent_env.ml(358):11737-11958
                         (apply (field 122 (global Stdlib__format!)) ppf
                           [0:
                            [18:
                             [1: [0: [11: "<hov>" 0a] "<hov>"]]
                             [11:
                              "Invalid import of "
                              [2:
                               0a
                               [11:
                                ", compiled with -unsafe-string."
                                [17: [0: "@ " 1 0] [2: 0a [17: 0a 0a]]]]]]]
                            "@[<hov>Invalid import of %s, compiled with -unsafe-string.@ %s@]"]
                           import
                           "This compiler has been configured in strict safe-string mode (-force-safe-string)"))))))))))
     *match* =
       (after typing/persistent_env.ml(364):11971-12125
         (apply (field 46 (global Location!))
           (function param
             (funct-body typing/persistent_env.ml(365):12006-12125
               (let (tag =a (field 0 param))
                 (if (== tag Error)
                   (let (err =a (field 1 param))
                     (before typing/persistent_env.ml(367):12047-12101
                       (makeblock 0
                         (after typing/persistent_env.ml(367):12052-12101
                           (apply (field 45 (global Location!)) report_error
                             err)))))
                   (before typing/persistent_env.ml(368):12115-12119 0a))))))))
    (pseudo _none_(0)<ghost>:-1--1
      (makeblock 0 Consistbl Error report_error Persistent_signature empty
        clear clear_missing fold read find find_in_cache check looked_up
        is_imported is_imported_opaque make_cmi save_cmi can_load_cmis
        set_can_load_cmis without_cmis import_crcs imports crc_of_unit
        add_delayed_check_forward))))
