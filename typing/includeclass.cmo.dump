(setglobal Includeclass!
  (let
    (class_types =
       (function env cty1 cty2
         (funct-body typing/includeclass.ml(20)<ghost>:1154-1209
           (before typing/includeclass.ml(21):1172-1209
             (after typing/includeclass.ml(21):1172-1209
               (apply (field 81 (global Ctype!)) 0a env cty1 cty2)))))
     class_type_declarations =
       (function loc env cty1 cty2
         (funct-body typing/includeclass.ml(23)<ghost>:1239-1544
           (before typing/includeclass.ml(24):1262-1544
             (seq
               (after typing/includeclass.ml(24):1262-1434
                 (apply (field 1 (global Builtin_attributes!)) (field 4 cty1)
                   (field 4 cty2) loc (field 5 cty1) (field 5 cty2)
                   (after typing/includeclass.ml(29):1408-1434
                     (apply (field 10 (global Path!)) (field 2 cty1)))))
               (before typing/includeclass.ml(30):1438-1544
                 (after typing/includeclass.ml(30):1438-1544
                   (apply (field 83 (global Ctype!)) env (field 0 cty1)
                     (field 1 cty1) (field 0 cty2) (field 1 cty2))))))))
     class_declarations =
       (function env cty1 cty2
         (funct-body typing/includeclass.ml(34)<ghost>:1569-1801
           (before typing/includeclass.ml(35):1587-1801
             (let
               (*match* = (field 3 cty1)
                *match* = (field 3 cty2)
                *match* = *match*
                *match* = *match*)
               (catch
                 (if *match* (exit 1)
                   (if *match*
                     (before typing/includeclass.ml(37):1651-1675 [0: 0a 0a])
                     (exit 1)))
                with (1)
                 (before typing/includeclass.ml(39):1691-1801
                   (after typing/includeclass.ml(39):1691-1801
                     (apply (field 83 (global Ctype!)) env (field 0 cty1)
                       (field 1 cty1) (field 0 cty2) (field 1 cty2)))))))))
     include_err =
       (function ppf param
         (funct-body typing/includeclass.ml(52)<ghost>:1944-4435
           (switch* param
            case int 0:
             (before typing/includeclass.ml(55):1991-2055
               (after typing/includeclass.ml(55):1991-2055
                 (apply (field 122 (global Stdlib__format!)) ppf
                   [0:
                    [11:
                     "A class cannot be changed from virtual to concrete" 0a]
                    "A class cannot be changed from virtual to concrete"])))
            case tag 0:
             (before typing/includeclass.ml(57):2099-2179
               (after typing/includeclass.ml(57):2099-2179
                 (apply (field 122 (global Stdlib__format!)) ppf
                   [0:
                    [11:
                     "The classes do not have the same number of type parameters"
                     0a]
                    "The classes do not have the same number of type parameters"])))
            case tag 1:
             (let (trace =a (field 1 param) env =a (field 0 param))
               (before typing/includeclass.ml(60):2233-2435
                 (after typing/includeclass.ml(60):2233-2435
                   (apply (field 45 (global Printtyp!)) ppf env trace 0a
                     (function ppf
                       (funct-body typing/includeclass.ml(61):2289-2356
                         (before typing/includeclass.ml(62):2316-2355
                           (after typing/includeclass.ml(62):2316-2355
                             (apply (field 122 (global Stdlib__format!)) ppf
                               [0:
                                [11: "A type parameter has type" 0a]
                                "A type parameter has type"])))))
                     (function ppf
                       (funct-body typing/includeclass.ml(63):2365-2435
                         (before typing/includeclass.ml(64):2392-2434
                           (after typing/includeclass.ml(64):2392-2434
                             (apply (field 122 (global Stdlib__format!)) ppf
                               [0:
                                [11: "but is expected to have type" 0a]
                                "but is expected to have type"])))))))))
            case tag 2:
             (let
               (cty2 =a (field 2 param)
                cty1 =a (field 1 param)
                env =a (field 0 param))
               (before typing/includeclass.ml(66):2490-2732
                 (after typing/includeclass.ml(66):2490-2732
                   (apply (field 9 (global Printtyp!)) 1a env
                     (function param
                       (funct-body typing/includeclass.ml(66):2533-2732
                         (before typing/includeclass.ml(67):2552-2731
                           (after typing/includeclass.ml(67):2552-2731
                             (apply (field 122 (global Stdlib__format!)) ppf
                               [0:
                                [18:
                                 [1: [0: 0a ""]]
                                 [11:
                                  "The class type"
                                  [17:
                                   [0: "@;<1 2>" 1 2]
                                   [15:
                                    [17:
                                     [0: "@ " 1 0]
                                     [2:
                                      0a
                                      [17:
                                       [0: "@;<1 2>" 1 2] [15: [17: 0a 0a]]]]]]]]]
                                "@[The class type@;<1 2>%a@ %s@;<1 2>%a@]"]
                               (field 37 (global Printtyp!)) cty1
                               "is not matched by the class type"
                               (field 37 (global Printtyp!)) cty2)))))))))
            case tag 3:
             (let (trace =a (field 1 param) env =a (field 0 param))
               (before typing/includeclass.ml(73):2781-2978
                 (after typing/includeclass.ml(73):2781-2978
                   (apply (field 45 (global Printtyp!)) ppf env trace 0a
                     (function ppf
                       (funct-body typing/includeclass.ml(74):2837-2899
                         (before typing/includeclass.ml(75):2864-2898
                           (after typing/includeclass.ml(75):2864-2898
                             (apply (field 122 (global Stdlib__format!)) ppf
                               [0:
                                [11: "A parameter has type" 0a]
                                "A parameter has type"])))))
                     (function ppf
                       (funct-body typing/includeclass.ml(76):2908-2978
                         (before typing/includeclass.ml(77):2935-2977
                           (after typing/includeclass.ml(77):2935-2977
                             (apply (field 122 (global Stdlib__format!)) ppf
                               [0:
                                [11: "but is expected to have type" 0a]
                                "but is expected to have type"])))))))))
            case tag 4:
             (let
               (trace =a (field 2 param)
                env =a (field 1 param)
                lab =a (field 0 param))
               (before typing/includeclass.ml(79):3031-3246
                 (after typing/includeclass.ml(79):3031-3246
                   (apply (field 45 (global Printtyp!)) ppf env trace 0a
                     (function ppf
                       (funct-body typing/includeclass.ml(80):3087-3167
                         (before typing/includeclass.ml(81):3114-3166
                           (after typing/includeclass.ml(81):3114-3166
                             (apply (field 122 (global Stdlib__format!)) ppf
                               [0:
                                [11:
                                 "The instance variable "
                                 [2:
                                  0a [17: [0: "@ " 1 0] [11: "has type" 0a]]]]
                                "The instance variable %s@ has type"]
                               lab)))))
                     (function ppf
                       (funct-body typing/includeclass.ml(82):3176-3246
                         (before typing/includeclass.ml(83):3203-3245
                           (after typing/includeclass.ml(83):3203-3245
                             (apply (field 122 (global Stdlib__format!)) ppf
                               [0:
                                [11: "but is expected to have type" 0a]
                                "but is expected to have type"])))))))))
            case tag 5:
             (let
               (trace =a (field 2 param)
                env =a (field 1 param)
                lab =a (field 0 param))
               (before typing/includeclass.ml(85):3300-3504
                 (after typing/includeclass.ml(85):3300-3504
                   (apply (field 45 (global Printtyp!)) ppf env trace 0a
                     (function ppf
                       (funct-body typing/includeclass.ml(86):3356-3425
                         (before typing/includeclass.ml(87):3383-3424
                           (after typing/includeclass.ml(87):3383-3424
                             (apply (field 122 (global Stdlib__format!)) ppf
                               [0:
                                [11:
                                 "The method "
                                 [2:
                                  0a [17: [0: "@ " 1 0] [11: "has type" 0a]]]]
                                "The method %s@ has type"]
                               lab)))))
                     (function ppf
                       (funct-body typing/includeclass.ml(88):3434-3504
                         (before typing/includeclass.ml(89):3461-3503
                           (after typing/includeclass.ml(89):3461-3503
                             (apply (field 122 (global Stdlib__format!)) ppf
                               [0:
                                [11: "but is expected to have type" 0a]
                                "but is expected to have type"])))))))))
            case tag 6:
             (let (lab =a (field 0 param))
               (before typing/includeclass.ml(91):3543-3630
                 (after typing/includeclass.ml(91):3543-3630
                   (apply (field 122 (global Stdlib__format!)) ppf
                     [0:
                      [18:
                       [1: [0: 0a ""]]
                       [11:
                        "The non-mutable instance variable "
                        [2: 0a [11: " cannot become mutable" [17: 0a 0a]]]]]
                      "@[The non-mutable instance variable %s cannot become mutable@]"]
                     lab))))
            case tag 7:
             (let (lab =a (field 0 param))
               (before typing/includeclass.ml(94):3670-3754
                 (after typing/includeclass.ml(94):3670-3754
                   (apply (field 122 (global Stdlib__format!)) ppf
                     [0:
                      [18:
                       [1: [0: 0a ""]]
                       [11:
                        "The virtual instance variable "
                        [2: 0a [11: " cannot become concrete" [17: 0a 0a]]]]]
                      "@[The virtual instance variable %s cannot become concrete@]"]
                     lab))))
            case tag 8:
             (let (lab =a (field 0 param))
               (before typing/includeclass.ml(97):3789-3859
                 (after typing/includeclass.ml(97):3789-3859
                   (apply (field 122 (global Stdlib__format!)) ppf
                     [0:
                      [18:
                       [1: [0: 0a ""]]
                       [11:
                        "The first class type has no instance variable "
                        [2: 0a [17: 0a 0a]]]]
                      "@[The first class type has no instance variable %s@]"]
                     lab))))
            case tag 9:
             (let (lab =a (field 0 param))
               (before typing/includeclass.ml(99):3895-3954
                 (after typing/includeclass.ml(99):3895-3954
                   (apply (field 122 (global Stdlib__format!)) ppf
                     [0:
                      [18:
                       [1: [0: 0a ""]]
                       [11:
                        "The first class type has no method "
                        [2: 0a [17: 0a 0a]]]]
                      "@[The first class type has no method %s@]"]
                     lab))))
            case tag 10:
             (let (lab =a (field 0 param))
               (before typing/includeclass.ml(101):3986-4045
                 (after typing/includeclass.ml(101):3986-4045
                   (apply (field 122 (global Stdlib__format!)) ppf
                     [0:
                      [18:
                       [1: [0: 0a ""]]
                       [11:
                        "The public method "
                        [2: 0a [11: " cannot be hidden" [17: 0a 0a]]]]]
                      "@[The public method %s cannot be hidden@]"]
                     lab))))
            case tag 11:
             (let (lab =a (field 1 param) k =a (field 0 param))
               (before typing/includeclass.ml(103):4084-4142
                 (after typing/includeclass.ml(103):4084-4142
                   (apply (field 122 (global Stdlib__format!)) ppf
                     [0:
                      [18:
                       [1: [0: 0a ""]]
                       [11:
                        "The virtual "
                        [2:
                         0a
                         [12:
                          ' ' [2: 0a [11: " cannot be hidden" [17: 0a 0a]]]]]]]
                      "@[The virtual %s %s cannot be hidden@]"]
                     k lab))))
            case tag 12:
             (let (lab =a (field 0 param))
               (before typing/includeclass.ml(105):4177-4239
                 (after typing/includeclass.ml(105):4177-4239
                   (apply (field 122 (global Stdlib__format!)) ppf
                     [0:
                      [18:
                       [1: [0: 0a ""]]
                       [11:
                        "The public method "
                        [2: 0a [11: " cannot become private" 0a]]]]
                      "@[The public method %s cannot become private"]
                     lab))))
            case tag 13:
             (let (lab =a (field 0 param))
               (before typing/includeclass.ml(109):4375-4435
                 (after typing/includeclass.ml(109):4375-4435
                   (apply (field 122 (global Stdlib__format!)) ppf
                     [0:
                      [11:
                       "The private method "
                       [2: 0a [11: " cannot become public" 0a]]]
                      "The private method %s cannot become public"]
                     lab))))
            case tag 14:
             (let (lab =a (field 0 param))
               (before typing/includeclass.ml(107):4275-4339
                 (after typing/includeclass.ml(107):4275-4339
                   (apply (field 122 (global Stdlib__format!)) ppf
                     [0:
                      [18:
                       [1: [0: 0a ""]]
                       [11:
                        "The virtual method "
                        [2: 0a [11: " cannot become concrete" 0a]]]]
                      "@[The virtual method %s cannot become concrete"]
                     lab)))))))
     report_error =
       (function ppf param
         (funct-body typing/includeclass.ml(111)<ghost>:4454-4672
           (if param
             (let (errs =a (field 1 param) err =a (field 0 param))
               (before typing/includeclass.ml(114):4508-4672
                 (let
                   (print_errs =
                      (function ppf errs
                        (funct-body typing/includeclass.ml(114)<ghost>:4523-4605
                          (before typing/includeclass.ml(115):4543-4605
                            (after typing/includeclass.ml(115):4543-4605
                              (apply (field 14 (global Stdlib__list!))
                                (function err
                                  (funct-body typing/includeclass.ml(115):4553-4600
                                    (before typing/includeclass.ml(115):4565-4599
                                      (after typing/includeclass.ml(115):4565-4599
                                        (apply
                                          (field 122
                                            (global Stdlib__format!))
                                          ppf
                                          [0:
                                           [17: [0: "@ " 1 0] [15: 0a]]
                                           "@ %a"]
                                          include_err err)))))
                                errs))))))
                   (before typing/includeclass.ml(116):4615-4672
                     (after typing/includeclass.ml(116):4615-4672
                       (apply (field 122 (global Stdlib__format!)) ppf
                         [0:
                          [18:
                           [1: [0: [11: "<v>" 0a] "<v>"]]
                           [15: [15: [17: 0a 0a]]]]
                          "@[<v>%a%a@]"]
                         include_err err print_errs errs))))))
             (before typing/includeclass.ml(112):4480-4482 0a)))))
    (pseudo _none_(0)<ghost>:-1--1
      (makeblock 0 class_types class_type_declarations class_declarations
        report_error))))
