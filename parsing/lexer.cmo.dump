(setglobal Lexer!
  (let
    (Error = (makeblock 248 "Lexer.Error" (caml_fresh_oo_id 0))
     keyword_table =
       (after parsing/lexer.mll(40):528-1787
         (apply (field 18 (global Misc!)) 149
           [0:
            [0: "and" 98a]
            [0:
             [0: "as" 97a]
             [0:
              [0: "assert" 96a]
              [0:
               [0: "begin" 90a]
               [0:
                [0: "class" 89a]
                [0:
                 [0: "constraint" 83a]
                 [0:
                  [0: "do" 82a]
                  [0:
                   [0: "done" 81a]
                   [0:
                    [0: "downto" 78a]
                    [0:
                     [0: "else" 77a]
                     [0:
                      [0: "end" 76a]
                      [0:
                       [0: "exception" 72a]
                       [0:
                        [0: "external" 71a]
                        [0:
                         [0: "false" 70a]
                         [0:
                          [0: "for" 69a]
                          [0:
                           [0: "fun" 68a]
                           [0:
                            [0: "function" 67a]
                            [0:
                             [0: "functor" 66a]
                             [0:
                              [0: "if" 61a]
                              [0:
                               [0: "in" 60a]
                               [0:
                                [0: "include" 59a]
                                [0:
                                 [0: "inherit" 58a]
                                 [0:
                                  [0: "initializer" 57a]
                                  [0:
                                   [0: "lazy" 56a]
                                   [0:
                                    [0: "let" 42a]
                                    [0:
                                     [0: "match" 40a]
                                     [0:
                                      [0: "method" 39a]
                                      [0:
                                       [0: "module" 35a]
                                       [0:
                                        [0: "mutable" 34a]
                                        [0:
                                         [0: "new" 33a]
                                         [0:
                                          [0: "nonrec" 32a]
                                          [0:
                                           [0: "object" 31a]
                                           [0:
                                            [0: "of" 30a]
                                            [0:
                                             [0: "open" 29a]
                                             [0:
                                              [0: "or" 28a]
                                              [0:
                                               [0: "private" 23a]
                                               [0:
                                                [0: "rec" 18a]
                                                [0:
                                                 [0: "sig" 14a]
                                                 [0:
                                                  [0: "struct" 12a]
                                                  [0:
                                                   [0: "then" 11a]
                                                   [0:
                                                    [0: "to" 9a]
                                                    [0:
                                                     [0: "true" 8a]
                                                     [0:
                                                      [0: "try" 7a]
                                                      [0:
                                                       [0: "type" 6a]
                                                       [0:
                                                        [0: "val" 4a]
                                                        [0:
                                                         [0: "virtual" 3a]
                                                         [0:
                                                          [0: "when" 2a]
                                                          [0:
                                                           [0: "while" 1a]
                                                           [0:
                                                            [0: "with" 0a]
                                                            [0:
                                                             [0:
                                                              "lor"
                                                              [9: "lor"]]
                                                             [0:
                                                              [0:
                                                               "lxor"
                                                               [9: "lxor"]]
                                                              [0:
                                                               [0:
                                                                "mod"
                                                                [9: "mod"]]
                                                               [0:
                                                                [0:
                                                                 "land"
                                                                 [9: "land"]]
                                                                [0:
                                                                 [0:
                                                                  "lsl"
                                                                  [8: "lsl"]]
                                                                 [0:
                                                                  [0:
                                                                   "lsr"
                                                                   [8: "lsr"]]
                                                                  [0:
                                                                   [0:
                                                                    "asr"
                                                                    [8:
                                                                    "asr"]]
                                                                   0a]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]))
     string_buffer =
       (after parsing/lexer.mll(103):1842-1859
         (apply (field 0 (global Stdlib__buffer!)) 256))
     reset_string_buffer =
       (function param
         (funct-body parsing/lexer.mll(104)<ghost>:1884-1915
           (before parsing/lexer.mll(104):1889-1915
             (after parsing/lexer.mll(104):1889-1915
               (apply (field 8 (global Stdlib__buffer!)) string_buffer)))))
     get_stored_string =
       (function param
         (funct-body parsing/lexer.mll(105)<ghost>:1938-1972
           (before parsing/lexer.mll(105):1943-1972
             (after parsing/lexer.mll(105):1943-1972
               (apply (field 1 (global Stdlib__buffer!)) string_buffer)))))
     store_string_char =
       (function c[int]
         (funct-body parsing/lexer.mll(107)<ghost>:1996-2031
           (before parsing/lexer.mll(107):2000-2031
             (after parsing/lexer.mll(107):2000-2031
               (apply (field 9 (global Stdlib__buffer!)) string_buffer c)))))
     store_string_utf_8_uchar =
       (function u
         (funct-body parsing/lexer.mll(108)<ghost>:2061-2103
           (before parsing/lexer.mll(108):2065-2103
             (after parsing/lexer.mll(108):2065-2103
               (apply (field 10 (global Stdlib__buffer!)) string_buffer u)))))
     store_string =
       (function s
         (funct-body parsing/lexer.mll(109)<ghost>:2121-2158
           (before parsing/lexer.mll(109):2125-2158
             (after parsing/lexer.mll(109):2125-2158
               (apply (field 13 (global Stdlib__buffer!)) string_buffer s)))))
     store_lexeme =
       (function lexbuf
         (funct-body parsing/lexer.mll(110)<ghost>:2176-2220
           (before parsing/lexer.mll(110):2185-2220
             (after parsing/lexer.mll(110):2185-2220
               (apply store_string
                 (after parsing/lexer.mll(110):2198-2220
                   (apply (field 5 (global Stdlib__lexing!)) lexbuf)))))))
     string_start_loc = (makemutable 0 (field 0 (global Location!)))
     comment_start_loc = (makemutable 0 0a)
     in_comment =
       (function param
         (funct-body parsing/lexer.mll(115)<ghost>:2382-2411
           (before parsing/lexer.mll(115):2387-2411
             (!= (field 0 comment_start_loc) 0a))))
     is_in_string = (makemutable 0 0a)
     in_string =
       (function param
         (funct-body parsing/lexer.mll(117)<ghost>:2457-2475
           (before parsing/lexer.mll(117):2462-2475 (field 0 is_in_string))))
     print_warnings = (makemutable 0 1a)
     store_escaped_char =
       (function lexbuf c[int]
         (funct-body parsing/lexer.mll(121)<ghost>:2606-2685
           (before parsing/lexer.mll(122):2619-2685
             (if
               (after parsing/lexer.mll(122):2622-2635 (apply in_comment 0a))
               (before parsing/lexer.mll(122):2641-2660
                 (after parsing/lexer.mll(122):2641-2660
                   (apply store_lexeme lexbuf)))
               (before parsing/lexer.mll(122):2666-2685
                 (after parsing/lexer.mll(122):2666-2685
                   (apply store_string_char c)))))))
     store_escaped_uchar =
       (function lexbuf u
         (funct-body parsing/lexer.mll(124)<ghost>:2711-2797
           (before parsing/lexer.mll(125):2724-2797
             (if
               (after parsing/lexer.mll(125):2727-2740 (apply in_comment 0a))
               (before parsing/lexer.mll(125):2746-2765
                 (after parsing/lexer.mll(125):2746-2765
                   (apply store_lexeme lexbuf)))
               (before parsing/lexer.mll(125):2771-2797
                 (after parsing/lexer.mll(125):2771-2797
                   (apply store_string_utf_8_uchar u)))))))
     with_comment_buffer =
       (function comment lexbuf
         (funct-body parsing/lexer.mll(127)<ghost>:2823-3125
           (before parsing/lexer.mll(128):2842-3125
             (let
               (start_loc =
                  (after parsing/lexer.mll(128):2858-2878
                    (apply (field 3 (global Location!)) lexbuf)))
               (before parsing/lexer.mll(129):2885-3125
                 (seq
                   (setfield_ptr 0 comment_start_loc
                     (makeblock 0 start_loc 0a))
                   (before parsing/lexer.mll(130):2921-3125
                     (seq
                       (after parsing/lexer.mll(130):2921-2943
                         (apply reset_string_buffer 0a))
                       (before parsing/lexer.mll(131):2947-3125
                         (let
                           (end_loc =
                              (after parsing/lexer.mll(131):2961-2975
                                (apply comment lexbuf)))
                           (before parsing/lexer.mll(132):2981-3125
                             (let
                               (s =
                                  (after parsing/lexer.mll(132):2989-3009
                                    (apply get_stored_string 0a)))
                               (before parsing/lexer.mll(133):3015-3125
                                 (seq
                                   (after parsing/lexer.mll(133):3015-3037
                                     (apply reset_string_buffer 0a))
                                   (before parsing/lexer.mll(134):3041-3125
                                     (let
                                       (loc =
                                          (let (init = start_loc)
                                            (makeblock 0 (field 0 init)
                                              (field 1 end_loc)
                                              (field 2 init))))
                                       (before parsing/lexer.mll(135):3119-3125
                                         (makeblock 0 s loc))))))))))))))))))
     error =
       (function lexbuf e
         (funct-body parsing/lexer.mll(137)<ghost>:3137-3186
           (before parsing/lexer.mll(137):3148-3186
             (raise
               (after parsing/lexer.mll(137):3154-3186
                 (makeblock 0 Error e
                   (after parsing/lexer.mll(137):3164-3184
                     (apply (field 3 (global Location!)) lexbuf))))))))
     error_loc =
       (function loc e
         (funct-body parsing/lexer.mll(138)<ghost>:3201-3230
           (before parsing/lexer.mll(138):3209-3230
             (raise
               (after parsing/lexer.mll(138):3215-3230
                 (makeblock 0 Error e loc))))))
     digit_value =
       (function c[int] : int
         (funct-body parsing/lexer.mll(142)<ghost>:3285-3473
           (before parsing/lexer.mll(143):3291-3473
             (catch
               (if (>= c 65)
                 (if (>= c 97)
                   (if (>= c 103) (exit 4)
                     (before parsing/lexer.mll(144):3322-3354
                       (- (+ 10 c) 'a')))
                   (if (>= c 71) (exit 4)
                     (before parsing/lexer.mll(145):3373-3405
                       (- (+ 10 c) 'A'))))
                 (let (switcher =a (-48+ c))
                   (if (isout 9 switcher) (exit 4)
                     (before parsing/lexer.mll(146):3424-3451 (- c '0')))))
              with (4)
               (before parsing/lexer.mll(147):3461-3473
                 (raise
                   (after parsing/lexer.mll(147):3461-3473
                     (makeblock 0 (global Assert_failure!)
                       [0: "parsing/lexer.mll" 147 9]))))))))
     num_value =
       (function lexbuf base[int] first[int] last[int] : int
         (funct-body parsing/lexer.mll(149)<ghost>:3489-3679
           (before parsing/lexer.mll(150):3519-3679
             (let (c = (makemutable 0 (int) 0))
               (before parsing/lexer.mll(151):3538-3679
                 (seq
                   (for i first to last
                     (before parsing/lexer.mll(152):3567-3666
                       (let
                         (v =[int]
                            (after parsing/lexer.mll(152):3575-3616
                              (apply digit_value
                                (after parsing/lexer.mll(152):3587-3616
                                  (apply (field 6 (global Stdlib__lexing!))
                                    lexbuf i)))))
                         (before parsing/lexer.mll(153):3624-3666
                           (seq
                             (if (< v base) 0a
                               (raise
                                 (after parsing/lexer.mll(153):3624-3640
                                   (makeblock 0 (global Assert_failure!)
                                     [0: "parsing/lexer.mll" 153 4]))))
                             (before parsing/lexer.mll(154):3646-3666
                               (setfield_imm 0 c (+ (* base (field 0 c)) v))))))))
                   (before parsing/lexer.mll(156):3677-3679 (field 0 c))))))))
     char_for_backslash =
       (function c[int] : int
         (funct-body parsing/lexer.mll(158):3706-3799
           (catch
             (if (>= c 110)
               (if (>= c 117) (exit 5)
                 (let (switcher =a (-110+ c))
                   (switch* switcher
                    case int 0:
                     (before parsing/lexer.mll(159):3726-3732 '\n')
                    case int 1: (exit 5)
                    case int 2: (exit 5)
                    case int 3: (exit 5)
                    case int 4:
                     (before parsing/lexer.mll(160):3744-3750 '\r')
                    case int 5: (exit 5)
                    case int 6:
                     (before parsing/lexer.mll(162):3780-3786 '\t'))))
               (if (!= c 98) (exit 5)
                 (before parsing/lexer.mll(161):3762-3768 '\b')))
            with (5) (before parsing/lexer.mll(163):3798-3799 c))))
     illegal_escape =
       (function lexbuf reason
         (funct-body parsing/lexer.mll(165)<ghost>:3820-3949
           (before parsing/lexer.mll(166):3838-3949
             (let
               (error =
                  (makeblock 1
                    (after parsing/lexer.mll(166):3866-3886
                      (apply (field 5 (global Stdlib__lexing!)) lexbuf))
                    (makeblock 0 reason)))
               (before parsing/lexer.mll(167):3906-3949
                 (raise
                   (after parsing/lexer.mll(167):3912-3949
                     (makeblock 0 Error error
                       (after parsing/lexer.mll(167):3927-3947
                         (apply (field 3 (global Location!)) lexbuf))))))))))
     char_for_decimal_code =
       (function lexbuf i[int] : int
         (funct-body parsing/lexer.mll(169)<ghost>:3977-4257
           (before parsing/lexer.mll(170):3990-4257
             (let
               (c =[int]
                  (after parsing/lexer.mll(170):3998-4044
                    (apply num_value lexbuf 10 i (+ i 2))))
               (before parsing/lexer.mll(171):4050-4257
                 (if (|| (< c 0) (> c 255))
                   (before parsing/lexer.mll(172):4081-4239
                     (if
                       (after parsing/lexer.mll(172):4084-4097
                         (apply in_comment 0a))
                       (before parsing/lexer.mll(173):4107-4110 'x')
                       (before parsing/lexer.mll(175):4126-4239
                         (after parsing/lexer.mll(175):4126-4239
                           (apply illegal_escape lexbuf
                             (after parsing/lexer.mll(176):4156-4239
                               (apply (field 3 (global Stdlib__printf!))
                                 [0:
                                  [4:
                                   0a 0a 0a
                                   [11:
                                    " is outside the range of legal characters (0-255)."
                                    0a]]
                                  "%d is outside the range of legal characters (0-255)."]
                                 c)))))))
                   (before parsing/lexer.mll(178):4247-4257
                     (after parsing/lexer.mll(178):4247-4257
                       (apply (field 0 (global Stdlib__char!)) c)))))))))
     char_for_octal_code =
       (function lexbuf i[int] : int
         (funct-body parsing/lexer.mll(180)<ghost>:4283-4571
           (before parsing/lexer.mll(181):4296-4571
             (let
               (c =[int]
                  (after parsing/lexer.mll(181):4304-4349
                    (apply num_value lexbuf 8 i (+ i 2))))
               (before parsing/lexer.mll(182):4355-4571
                 (if (|| (< c 0) (> c 255))
                   (before parsing/lexer.mll(183):4386-4553
                     (if
                       (after parsing/lexer.mll(183):4389-4402
                         (apply in_comment 0a))
                       (before parsing/lexer.mll(184):4412-4415 'x')
                       (before parsing/lexer.mll(186):4431-4553
                         (after parsing/lexer.mll(186):4431-4553
                           (apply illegal_escape lexbuf
                             (after parsing/lexer.mll(187):4461-4553
                               (apply (field 3 (global Stdlib__printf!))
                                 [0:
                                  [12:
                                   'o'
                                   [4:
                                    10a 0a 0a
                                    [11:
                                     " (="
                                     [4:
                                      0a 0a 0a
                                      [11:
                                       ") is outside the range of legal characters (0-255)."
                                       0a]]]]]
                                  "o%o (=%d) is outside the range of legal characters (0-255)."]
                                 c c)))))))
                   (before parsing/lexer.mll(189):4561-4571
                     (after parsing/lexer.mll(189):4561-4571
                       (apply (field 0 (global Stdlib__char!)) c)))))))))
     char_for_hexadecimal_code =
       (function lexbuf i[int] : int
         (funct-body parsing/lexer.mll(191)<ghost>:4603-4673
           (before parsing/lexer.mll(192):4616-4673
             (after parsing/lexer.mll(192):4616-4673
               (apply (field 0 (global Stdlib__char!))
                 (after parsing/lexer.mll(192):4625-4673
                   (apply num_value lexbuf 16 i (+ i 1))))))))
     uchar_for_uchar_escape =
       (function lexbuf
         (funct-body parsing/lexer.mll(194)<ghost>:4702-5258
           (before parsing/lexer.mll(195):4713-5258
             (let
               (len =[int]
                  (-
                    (after parsing/lexer.mll(195):4723-4747
                      (apply (field 8 (global Stdlib__lexing!)) lexbuf))
                    (after parsing/lexer.mll(195):4750-4776
                      (apply (field 7 (global Stdlib__lexing!)) lexbuf))))
               (before parsing/lexer.mll(196):4782-5258
                 (let (first =[int] 3)
                   (before parsing/lexer.mll(197):4824-5258
                     (let (last =[int] (- len 2))
                       (before parsing/lexer.mll(198):4869-5258
                         (let (digit_count =[int] (+ (- last first) 1))
                           (before parsing/lexer.mll(199):4909-5258
                             (let (*match* = (> digit_count 6))
                               (if *match*
                                 (before parsing/lexer.mll(201):4954-5037
                                   (after parsing/lexer.mll(201):4954-5037
                                     (apply illegal_escape lexbuf
                                       "too many digits, expected 1 to 6 hexadecimal digits")))
                                 (before parsing/lexer.mll(204):5057-5258
                                   (let
                                     (cp =[int]
                                        (after parsing/lexer.mll(204):5066-5104
                                          (apply num_value lexbuf 16 first
                                            last)))
                                     (before parsing/lexer.mll(205):5114-5258
                                       (if
                                         (after parsing/lexer.mll(205):5117-5134
                                           (apply
                                             (field 6
                                               (global Stdlib__uchar!))
                                             cp))
                                         (before parsing/lexer.mll(205):5140-5162
                                           (after parsing/lexer.mll(205):5140-5162
                                             (apply
                                               (field 8
                                                 (global Stdlib__uchar!))
                                               cp)))
                                         (before parsing/lexer.mll(206):5174-5258
                                           (after parsing/lexer.mll(206):5174-5258
                                             (apply illegal_escape lexbuf
                                               (after parsing/lexer.mll(207):5204-5258
                                                 (apply
                                                   (field 3
                                                     (global Stdlib__printf!))
                                                   [0:
                                                    [4:
                                                     8a 0a 0a
                                                     [11:
                                                      " is not a Unicode scalar value"
                                                      0a]]
                                                    "%X is not a Unicode scalar value"]
                                                   cp))))))))))))))))))))))
     is_keyword =
       (function name
         (funct-body parsing/lexer.mll(209)<ghost>:5275-5312
           (before parsing/lexer.mll(209):5282-5312
             (after parsing/lexer.mll(209):5282-5312
               (apply (field 8 (global Stdlib__hashtbl!)) keyword_table name)))))
     check_label_name =
       (function lexbuf name
         (funct-body parsing/lexer.mll(211)<ghost>:5335-5411
           (before parsing/lexer.mll(212):5351-5411
             (if
               (after parsing/lexer.mll(212):5354-5369
                 (apply is_keyword name))
               (before parsing/lexer.mll(212):5375-5411
                 (after parsing/lexer.mll(212):5375-5411
                   (apply error lexbuf (makeblock 5 name))))
               0a))))
     update_loc =
       (function lexbuf file line[int] absolute chars[int]
         (funct-body parsing/lexer.mll(216)<ghost>:5495-5834
           (before parsing/lexer.mll(217):5531-5834
             (let (pos = (field 11 lexbuf))
               (before parsing/lexer.mll(218):5564-5834
                 (let
                   (new_file =
                      (if file
                        (let (s =a (field 0 file))
                          (before parsing/lexer.mll(220):5665-5666 s))
                        (before parsing/lexer.mll(219):5622-5635
                          (field 0 pos))))
                   (before parsing/lexer.mll(222):5674-5834
                     (setfield_ptr 11 lexbuf
                       (let (init = pos)
                         (makeblock 0 (*,int,int,int) new_file
                           (if absolute
                             (before parsing/lexer.mll(224):5764-5768 line)
                             (before parsing/lexer.mll(224):5774-5793
                               (+ (field 1 pos) line)))
                           (- (field 3 pos) chars) (field 3 init)))))))))))
     preprocessor = (makemutable 0 0a)
     escaped_newlines = (makemutable 0 0a)
     warn_latin1 =
       (function lexbuf
         (funct-body parsing/lexer.mll(235)<ghost>:5970-6070
           (before parsing/lexer.mll(236):5981-6070
             (after parsing/lexer.mll(236):5981-6070
               (apply (field 40 (global Location!)) 0a 0a
                 (after parsing/lexer.mll(237):6005-6027
                   (apply (field 3 (global Location!)) lexbuf))
                 "ISO-Latin1 characters in identifiers")))))
     handle_docstrings = (makemutable 0 1a)
     comment_list = (makemutable 0 0a)
     add_comment =
       (function com
         (funct-body parsing/lexer.mll(243)<ghost>:6148-6192
           (before parsing/lexer.mll(244):6156-6192
             (setfield_ptr 0 comment_list
               (makeblock 0 com (field 0 comment_list))))))
     add_docstring_comment =
       (function ds
         (funct-body parsing/lexer.mll(246)<ghost>:6220-6331
           (before parsing/lexer.mll(247):6227-6331
             (let
               (com =
                  (makeblock 0
                    (after parsing/lexer.mll(248):6242-6276
                      (apply (field 27 (global Stdlib!)) "*"
                        (after parsing/lexer.mll(248):6248-6276
                          (apply (field 4 (global Docstrings!)) ds))))
                    (after parsing/lexer.mll(248):6278-6305
                      (apply (field 5 (global Docstrings!)) ds))))
               (before parsing/lexer.mll(250):6316-6331
                 (after parsing/lexer.mll(250):6316-6331
                   (apply add_comment com)))))))
     comments =
       (function param
         (funct-body parsing/lexer.mll(252)<ghost>:6346-6373
           (before parsing/lexer.mll(252):6351-6373
             (after parsing/lexer.mll(252):6351-6373
               (apply (field 8 (global Stdlib__list!))
                 (field 0 comment_list))))))
     prepare_error =
       (function loc param
         (funct-body parsing/lexer.mll(258)<ghost>:6426-7825
           (switch* param
            case int 0:
             (before parsing/lexer.mll(276):7135-7187
               (after parsing/lexer.mll(276):7135-7187
                 (apply (field 43 (global Location!)) (makeblock 0 loc) 0a
                   [0:
                    [11: "String literal not terminated" 0a]
                    "String literal not terminated"])))
            case tag 0:
             (let (c =a (field 0 param))
               (before parsing/lexer.mll(260):6474-6536
                 (after parsing/lexer.mll(260):6474-6536
                   (apply (field 43 (global Location!)) (makeblock 0 loc) 0a
                     [0:
                      [11: "Illegal character (" [2: 0a [12: ')' 0a]]]
                      "Illegal character (%s)"]
                     (after parsing/lexer.mll(260):6520-6536
                       (apply (field 1 (global Stdlib__char!)) c))))))
            case tag 1:
             (let (explanation =a (field 1 param) s =a (field 0 param))
               (before parsing/lexer.mll(262):6582-6787
                 (after parsing/lexer.mll(262):6582-6787
                   (apply (field 43 (global Location!)) (makeblock 0 loc) 0a
                     [0:
                      [11:
                       "Illegal backslash escape in string or character ("
                       [2: 0a [12: ')' [16: 0a]]]]
                      "Illegal backslash escape in string or character (%s)%t"]
                     s
                     (function ppf
                       (funct-body parsing/lexer.mll(264):6678-6787
                         (before parsing/lexer.mll(264):6690-6786
                           (if explanation
                             (let (expl =a (field 0 explanation))
                               (before parsing/lexer.mll(266):6763-6786
                                 (after parsing/lexer.mll(266):6763-6786
                                   (apply
                                     (field 122 (global Stdlib__format!)) ppf
                                     [0: [11: ": " [2: 0a 0a]] ": %s"] expl))))
                             (before parsing/lexer.mll(265):6734-6736 0a)))))))))
            case tag 2:
             (let (explanation =a (field 1 param) s =a (field 0 param))
               (before parsing/lexer.mll(268):6836-7019
                 (after parsing/lexer.mll(268):6836-7019
                   (apply (field 43 (global Location!)) (makeblock 0 loc) 0a
                     [0:
                      [11: "Reserved character sequence: " [2: 0a [16: 0a]]]
                      "Reserved character sequence: %s%t"]
                     s
                     (function ppf
                       (funct-body parsing/lexer.mll(270):6911-7019
                         (before parsing/lexer.mll(270):6923-7018
                           (if explanation
                             (let (expl =a (field 0 explanation))
                               (before parsing/lexer.mll(272):6996-7018
                                 (after parsing/lexer.mll(272):6996-7018
                                   (apply
                                     (field 122 (global Stdlib__format!)) ppf
                                     [0: [12: ' ' [2: 0a 0a]] " %s"] expl))))
                             (before parsing/lexer.mll(271):6967-6969 0a)))))))))
            case tag 3:
             (before parsing/lexer.mll(274):7056-7101
               (after parsing/lexer.mll(274):7056-7101
                 (apply (field 43 (global Location!)) (makeblock 0 loc) 0a
                   [0:
                    [11: "Comment not terminated" 0a]
                    "Comment not terminated"])))
            case tag 4:
             (let (literal_loc =a (field 1 param))
               (before parsing/lexer.mll(278):7249-7406
                 (after parsing/lexer.mll(278):7249-7406
                   (apply (field 43 (global Location!)) (makeblock 0 loc)
                     (makeblock 0
                       (makeblock 0
                         (after parsing/lexer.mll(280):7347-7405
                           (apply (field 22 (global Location!))
                             (makeblock 0 literal_loc)
                             [0:
                              [11: "String literal begins here" 0a]
                              "String literal begins here"]))
                         0a))
                     [0:
                      [11:
                       "This comment contains an unterminated string literal"
                       0a]
                      "This comment contains an unterminated string literal"]))))
            case tag 5:
             (let (kwd =a (field 0 param))
               (before parsing/lexer.mll(282):7441-7526
                 (after parsing/lexer.mll(282):7441-7526
                   (apply (field 43 (global Location!)) (makeblock 0 loc) 0a
                     [0:
                      [12:
                       '`'
                       [2:
                        0a
                        [11:
                         "' is a keyword, it cannot be used as label name" 0a]]]
                      "`%s' is a keyword, it cannot be used as label name"]
                     kwd))))
            case tag 6:
             (let (s =a (field 0 param))
               (before parsing/lexer.mll(285):7558-7601
                 (after parsing/lexer.mll(285):7558-7601
                   (apply (field 43 (global Location!)) (makeblock 0 loc) 0a
                     [0:
                      [11: "Invalid literal " [2: 0a 0a]]
                      "Invalid literal %s"]
                     s))))
            case tag 7:
             (let (explanation =a (field 1 param) dir =a (field 0 param))
               (before parsing/lexer.mll(287):7652-7825
                 (after parsing/lexer.mll(287):7652-7825
                   (apply (field 43 (global Location!)) (makeblock 0 loc) 0a
                     [0:
                      [11: "Invalid lexer directive " [3: 0a [16: 0a]]]
                      "Invalid lexer directive %S%t"]
                     dir
                     (function ppf
                       (funct-body parsing/lexer.mll(288):7716-7825
                         (before parsing/lexer.mll(288):7728-7824
                           (if explanation
                             (let (expl =a (field 0 explanation))
                               (before parsing/lexer.mll(290):7801-7824
                                 (after parsing/lexer.mll(290):7801-7824
                                   (apply
                                     (field 122 (global Stdlib__format!)) ppf
                                     [0: [11: ": " [2: 0a 0a]] ": %s"] expl))))
                             (before parsing/lexer.mll(289):7772-7774 0a))))))))))))
     *match* =
       (after parsing/lexer.mll(293):7838-7983
         (apply (field 46 (global Location!))
           (function param
             (funct-body parsing/lexer.mll(294):7873-7983
               (let (tag =a (field 0 param))
                 (if (== tag Error)
                   (let (loc =a (field 2 param) err =a (field 1 param))
                     (before parsing/lexer.mll(296):7921-7949
                       (makeblock 0
                         (after parsing/lexer.mll(296):7926-7949
                           (apply prepare_error loc err)))))
                   (before parsing/lexer.mll(298):7973-7977 0a)))))))
     __ocaml_lex_tables =
       [0:
        "\000\000\160\255\161\255\224\000\003\001&\001I\001l\001\143\001\186\255\178\001\215\001\194\255[\000\252\001\031\002D\000G\000B\002\212\255\214\255\217\255e\002\136\002\171\002X\000\255\000\201\002\235\255\029\003q\003\197\003\149\004e\0055\006\005\007\213\007\180\b\016\t\147\t\231\tz\000\254\255\001\000\005\000\255\255\006\000\007\000\198\n\228\n\180\011\249\255\248\255\147\012\209\255\250\255\177\012\129\r\246\255\245\255Q\014-\015 \004\253\015\217\016\240\004\016\t\178\017\006\018Z\018\174\018\002\019V\019\170\019\254\019R\020\166\020W\000\250\020N\021\162\021\246\021J\022l\000\192\255\234\255\169\002\165\022j\000k\000\011\000\233\255\232\255\227\255\176\005v\000~\000l\000\231\255\224\000m\000\230\255\136\000\003\001n\000\229\255\128\006o\000\228\255\217\000\223\255\222\000\222\255\248\000\165\022\221\255\204\022\250\022!\023D\023j\023\204\255\205\255\206\255\202\255\141\023s\000\183\000\195\255\196\255\197\255\219\000\182\255\180\255\189\255\176\023\185\255\187\255\211\023\246\023\025\024<\024\192\0027\004P\001&\001s\001z\024\241\255\207\024\243\255\012\000\244\255\224\005\211\004\253\255\250\000\251\000\255\255\254\255\252\255!\007*\025\003\001\004\001\r\000\251\255\250\255\249\255 \b&\001\202\002\005\001\248\255A\004\020\001\247\255\189\003\240\004\021\001\246\255/\011\029\001\245\255\017\000\236\001\245\255\246\255\247\255\018\000K\025\255\255\248\255\202\000\255\011\199\005\231\005\253\255I\001^\001o\001\151\006\252\255\207\005\216\005\251\255\252\012\250\255\204\r\148\025\249\255q\001\150\001\252\255=\007\254\255\255\255\129\001\130\001\253\255\151\b&\001,\001b\001k\001-\001\142\001,\001\019\000\255\255"
        "\255\255\255\255\255\255Z\000Y\000V\000U\000N\000L\000\255\255C\000@\000\255\2559\0008\0006\0004\0000\000Q\000\255\255\255\255\255\255$\000#\000*\000(\000'\000>\000\255\255\015\000\015\000\014\000\r\000\012\000\011\000\011\000\011\000\br\000\255\255\014\000\255\255\014\000\014\000\255\255\014\000\014\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\n\000\n\000\255\255\255\255\007\000\007\000\007\000\007\000\255\255\001\000\007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\003\000\255\255\255\255\003\000\255\255\255\255\255\255\002\000\255\255\255\255\001\000\255\255\255\255\255\255\255\255\255\255"

        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000)\000*\000*\000)\000+\000/\000-\000-\000*\000.\000.\000/\000Y\000\150\000\164\000Z\000\184\000\165\000\150\000\188\000\229\000\184\000\211\000)\000\b\000\028\000\023\000\006\000\004\000\022\000\026\000\025\000\020\000\024\000\007\000\019\000\018\000&\000\003\000\030\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\017\000\016\000\015\000\014\000\n\000%\000\005\000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000 \000\r\000,\000\012\000\005\000(\000\021\000#\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000$\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\027\000\011\000\t\000'\000|\000~\000{\000m\000)\000z\000y\000)\000L\000L\000L\000L\000L\000L\000L\000L\000L\000L\000\\\000[\000b\000e\000i\000l\000\129\000\133\000\128\000)\000\127\000R\000R\000R\000R\000R\000R\000R\000R\000R\000R\000f\000f\000f\000f\000f\000f\000f\000f\000c\000c\000c\000c\000c\000c\000c\000c\000c\000c\000g\000g\000g\000g\000g\000g\000g\000g\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\130\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000\131\000!\000!\000!\000!\000!\000!\000!\000!\000\002\000\003\000n\000o\000\003\000\003\000\003\000p\000q\000Y\000\003\000\003\000Z\000\003\000\003\000\003\000d\000d\000d\000d\000d\000d\000d\000d\000d\000d\000\003\000\132\000\003\000\003\000\003\000\003\000\003\000p\000q\000\159\000\003\000\158\000\255\255\003\000\003\000\003\000\168\000\167\000\173\000\003\000\003\000\145\000\003\000\003\000\003\000h\000h\000h\000h\000h\000h\000h\000h\000\176\000\180\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\183\000\208\000\145\000\005\000\144\000\222\000\005\000\005\000\005\000\223\000\227\000\228\000\005\000\005\000\198\000\005\000\005\000\005\000\177\000\177\000\177\000\177\000\255\255W\000\003\000\255\255\003\000\000\000\005\000\003\000\005\000\005\000\005\000\005\000\005\000\000\000\198\000\198\000\006\000\200\000\224\000\006\000\006\000\006\000\000\000\000\000\146\000\006\000\006\000\225\000\006\000\006\000\006\000\198\000\000\000\188\000\200\000\255\255\211\000\003\000\255\255\003\000\000\000\006\000\005\000\006\000\006\000\006\000\006\000\006\000\000\000\216\000\216\000v\000\218\000\218\000v\000v\000v\000\000\000\000\000\000\000v\000v\000\225\000v\000\141\000v\000\000\000\000\000\000\000\000\000\216\000\000\000\005\000\217\000\005\000\000\000v\000\006\000v\000\140\000v\000v\000v\000\000\000\000\000\000\000\138\000\000\000\000\000\138\000\138\000\138\000\000\000\000\000\000\000\138\000\138\000\000\000\138\000\138\000\138\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\006\000\000\000\138\000v\000\138\000\139\000\138\000\138\000\138\000\000\000\000\000\000\000\006\000\000\000\000\000\006\000\006\000\006\000\000\000\000\000\000\000\006\000\006\000\000\000\006\000\006\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000v\000\000\000v}\000\006\000\006\000\000\000\255\255\000\000\000\000\135\000\000\000\006\000\000\000\000\000\000\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\000\000\000\000\255\255v\000\000\000\000\000v\000v\000v\000\000\000\000\000\255\255v\000v\000\000\000v\000w\000v\000\000\000\255\255\000\000\000\000\000\000\000\000\006\000\000\000\006\000\000\000v\000\006\000v\000v\000x\000v\000v\000\000\000\000\000\000\000\006\000\000\000\000\000\006\000\006\000u\000\000\000\000\000\255\255\006\000\006\000\000\000\006\000\006\000\006\000\000\000\215\000\000\000\000\000\000\000\000\000\006\000\000\000\006\000\000\000\006\000v\000\006\000\006\000\006\000\006\000\006\000\000\000\000\000\000\000t\000\000\000t\000t\000t\000t\000\000\000\000\000\000\000t\000t\000\000\000t\000t\000t\000\000\000\000\000\000\000\000\000\000\000\000\000v\000\000\000v\000\000\000t\000\006\000t\000t\000t\000t\000t\000\142\000\000\000\000\000\003\000\000\000\000\000\003\000\003\000\003\000\000\000\000\000s\000r\000\003\000\000\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\000\000\142\000\006\000\000\000\006\000\000\000\003\000t\000\003\000\003\000\003\000\003\000\003\000\187\000\000\000\000\000\000\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\174\000\174\000\174\000\174\000\174\000\174\000\174\000\174\000\174\000\174\000t\000T\000tj\000j\000j\000j\000j\000j\000j\000j\000j\000j\000\164\000\000\000\000\000\165\000\000\000\000\000\000\000j\000j\000j\000j\000j\000j\000\203\000\203\000\203\000\203\000\203\000\203\000\203\000\203\000\204\000\204\000\204\000\204\000\204\000\204\000\204\000\204\000\166\000\205\000\205\000\205\000\205\000\205\000\205\000\205\000\205\000\000\000j\000j\000j\000j\000j\000j\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\000\000\000\000\000\000\000\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000\162\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000!\000\"\000!\000!\000!\000!\000!\000!\000!\000!\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\000\000\000\000\000\000\000\000\"\000\000\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000\"\000k\000k\000k\000k\000k\000k\000k\000k\000k\000k\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000k\000k\000k\000k\000k\000k\000\202\000\202\000\202\000\202\000\202\000\202\000\202\000\202\000\202\000\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255k\000k\000k\000k\000k\000ka\000r\000a\000\000\000r\000r\000r\000a\000\000\000\000\000r\000r\000\000\000r\000r\000r\000`\000`\000`\000`\000`\000`\000`\000`\000`\000`\000r\000\000\000r\000r\000r\000r\000r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000t\000\000\000t\000t\000t\000t\000\000\000\000\000\000\000t\000t\000\000\000t\000t\000t\000\000\000\000\000\000\000\000\000\000\000a\000\000\000r\000\000\000\000\000t\000a\000t\000t\000t\000t\000t\000\000\000\000\000\000\000\000\000\000\000\000\000a\000_\000\000\000\000\000a\000\000\000a\000\000\000\006\000\000\000^\000\006\000\006\000\006\000r\000\000\000r\000\006\000\006\000\000\000\006\000\006\000\006\000t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\006\000\006\000\006\000\006\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000v\000\000\000\000\000v\000v\000v\000t\000\000\000t\000v\000v\000\000\000v\000v\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000v\000\000\000v\000v\000v\000v\000v\000\000\000\000\000\000\000v\000\000\000\000\000v\000v\000v\000\000\000\000\000\000\000v\000v\000\000\000v\000v\000v\000\000\000\000\000\006\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000v\000v\000v\000v\000v\000v\000v\000\000\000\000\000\000\000\000\000\000\000\000\000v\000\000\000\000\000v\000v\000v\000\000\000\000\000\000\000v\000v\000\000\000v\000v\000v\000\000\000\000\000\000\000v\000\000\000v\000\000\000\000\000v\000\000\000v\000\255\255v\000v\000v\000v\000v\000\000\000\000\000\000\000\006\000\000\000\000\000\006\000\006\000\006\000\000\000\000\000\000\000\006\000\006\000\000\000\006\000\006\000\006\000\000\000\000\000\000\000v\000\000\000v\000\000\000\000\000\000\000\000\000\006\000v\000\006\000\006\000\006\000\006\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\006\000\006\000\006\000\000\000\000\000\000\000\006\000\006\000\000\000\006\000\006\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000v\000\000\000vv\000\000\000\000\000v\000v\000v\000\000\000\000\000\000\000v\000v\000\000\000v\000v\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\138\000\000\000\138\000\000\000v\000\138\000v\000v\000v\000v\000v\000\000\000\000\000\000\000v\000\000\000\000\000v\000v\000v\000\000\000\000\000\000\000v\000v\000\000\000v\000v\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\138\000\000\000\138\000\000\000v\000v\000v\000v\000v\000v\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\150\000\000\000\000\000\151\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000v\000\000\000v\000\000\000\000\000v\000\000\000\155\000\000\000\000\000\000\000\000\000\153\000\157\000\000\000\156\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000v\000\000\000v
r\000\017\000\025\000)\000\017\000\017\000)\000M\000M\000M\000M\000M\000M\000M\000M\000M\000M\000X\000Y\000a\000d\000h\000k\000\r\000~\000\r\000)\000\r\000S\000S\000S\000S\000S\000S\000S\000S\000S\000S\000_\000_\000_\000_\000_\000_\000_\000_\000`\000`\000`\000`\000`\000`\000`\000`\000`\000`\000f\000f\000f\000f\000f\000f\000f\000f\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000m\000m\000\003\000\003\000\003\000o\000o\000\026\000\003\000\003\000\026\000\003\000\003\000\003\000c\000c\000c\000c\000c\000c\000c\000c\000c\000c\000\003\000\131\000\003\000\003\000\003\000\003\000\003\000q\000q\000\156\000\004\000\157\000\026\000\004\000\004\000\004\000\163\000\164\000\172\000\004\000\004\000\145\000\004\000\004\000\004\000g\000g\000g\000g\000g\000g\000g\000gb\000\255\255\255\255\b\000\b\000\b\000\255\255\255\255\255\255\b\000\b\000\255\255\b\000\b\000\b\000\255\255\255\255\255\255\255\255\255\255\255\255\006\000\255\255\006\000\255\255\b\000\007\000\b\000\b\000\b\000\b\000\b\000\255\255\255\255\255\255\n\000\255\255\255\255\n\000\n\000\n\000\255\255\255\255\255\255\n\000\n\000\255\255\n\000\n\000\n\000\255\255\255\255\255\255\255\255\255\255\255\255\007\000\255\255\007\000\255\255\n\000\b\000\n\000\n\000\n\000\n\000\n\000\255\255\255\255\255\255\185\000\255\255\011\000\185\000\255\255\011\000\011\000\011\000\255\255\026\000\255\255\011\000\011\000\255\255\011\000\011\000\011\000\255\255\255\255\255\255\255\255\b\000\255\255\b\000\185\000\n\000\n\000\011\000\212\000\011\000\011\000\011\000\011\000\011\000\255\255\255\255\255\255\255\255\255\255\014\000\255\255\255\255\014\000\014\000\014\000\255\255\255\255\255\255\014\000\014\000\255\255\014\000\014\000\014\000\255\255\255\255\n\000\n\000\nj\000j\000j\000j\000j\000j\000j\000j\000j\000j\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255j\000j\000j\000j\000j\000j\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\153\000j\000j\000j\000j\000j\000jr\000W\000\255\255r\000r\000r\000W\000\255\255\255\255r\000r\000\255\255r\000r\000r\000W\000W\000W\000W\000W\000W\000W\000W\000W\000W\000r\000\255\255r\000r\000r\000r\000r\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255t\000\255\255t\000t\000t\000t\000\255\255\255\255\255\255t\000t\000\255\255t\000t\000t\000\255\255\255\255\255\255\255\255\255\255W\000\255\255r\000\255\255\255\255t\000W\000t\000t\000t\000t\000t\000\255\255\255\255\255\255\255\255\255\255\255\255W\000W\000\255\255\255\255W\000\255\255W\000\255\255u\000\255\255W\000u\000u\000u\000r\000\255\255r\000u\000u\000\255\255u\000u\000u\000t\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255u\000\255\255u\000u\000u\000u\000u\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255v\000\255\255\255\255v\000v\000v\000t\000\255\255t\000v\000v\000\255\255v\000v\000v\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255u\000\255\255\255\255v\000\255\255v\000v\000v\000v\000v\000\255\255\255\255\255\255w\000\255\255\255\255w\000w\000w\000\255\255\255\255\255\255w\000w\000\255\255w\000w\000w\000\255\255\255\255u\000\255\255u\000\255\255\255\255\255\255\255\255\255\255w\000v\000w\000w\000w\000w\000w\000\255\255\255\255\255\255\255\255\255\255\255\255x\000\255\255\255\255x\000x\000x\000\255\255\255\255\255\255x\000x\000\255\255x\000x\000x\000\255\255\255\255\255\255v\000\255\255v\000\255\255\255\255w\000\255\255x\000W\000x\000x\000x\000x\000x\000\255\255\255\255\255\255}\000\255\255\255\255}\000}\000}\000\255\255\255\255\255\255}\000}\000\255\255}\000}\000}\000\255\255\255\255\255\255w\000\255\255w\000\255\255\255\255\255\255\255\255}\000x\000}\000}\000}\000}\000}\000\255\255\255\255\255\255\135\000\255\255\255\255\135\000\135\000\135\000\255\255\255\255\255\255\135\000\135\000\255\255\135\000\135\000\135\000\255\255\255\255\255\255\255\255\255\255\255\255x\000\255\255x\000\255\255\135\000}\000\135\000\135\000\135\000\135\000\135\000\255\255\255\255\255\255\138\000\255\255\255\255\138\000\138\000\138\000\255\255\255\255\255\255\138\000\138\000\255\255\138\000\138\000\138\000\255\255\255\255\255\255\255\255\255\255\255\255}\000\255\255}
n\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"


        "\255\004\255\255\005\255\255\007\255\006\255\255\007\255\255\006\255\007\255\255\000\004\001\005\002\006\003\007\255\001\255\255\000\001\255"])
    (letrec
      (token
         (function lexbuf
           (funct-body parsing/lexer.ml(2248)<ghost>:144341-144383
             (before parsing/lexer.ml(2249):144353-144383
               (after parsing/lexer.ml(2249):144353-144383
                 (apply __ocaml_lex_token_rec lexbuf 0)))))
        __ocaml_lex_token_rec
          (function lexbuf __ocaml_lex_state[int]
            (funct-body parsing/lexer.ml(2250)<ghost>:144410-161664
              (before parsing/lexer.ml(2251):144439-161664
                (let
                  (__ocaml_lex_state =
                     (after parsing/lexer.ml(2251):144445-144502
                       (apply (field 17 (global Stdlib__lexing!))
                         __ocaml_lex_tables __ocaml_lex_state lexbuf)))
                  (if (isout 95 __ocaml_lex_state)
                    (before parsing/lexer.ml(2958):161578-161664
                      (seq
                        (after parsing/lexer.ml(2958):161578-161610
                          (apply (field 0 lexbuf) lexbuf))
                        (before parsing/lexer.ml(2959):161618-161664
                          (after parsing/lexer.ml(2959):161618-161664
                            (apply __ocaml_lex_token_rec lexbuf
                              __ocaml_lex_state)))))
                    (switch* __ocaml_lex_state
                     case int 0:
                      (before parsing/lexer.ml(2253):144521-144842
                        (let
                          (bs =[int]
                             (after parsing/lexer.ml(2257):144595-144652
                               (apply (field 15 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf))))
                          (before parsing/lexer.mll(343):144707-144842
                            (seq
                              (if (not (field 0 escaped_newlines))
                                (before parsing/lexer.mll(344):144745-144780
                                  (after parsing/lexer.mll(344):144745-144780
                                    (apply error lexbuf
                                      (makeblock 0 (int) bs))))
                                0a)
                              (before parsing/lexer.mll(345):144788-144840
                                (seq
                                  (after parsing/lexer.mll(345):144788-144820
                                    (apply update_loc lexbuf 0a 1 0a 0))
                                  (before parsing/lexer.mll(346):144828-144840
                                    (after parsing/lexer.mll(346):144828-144840
                                      (apply token lexbuf)))))))))
                     case int 1:
                      (before parsing/lexer.mll(348):144911-144960
                        (seq
                          (after parsing/lexer.mll(348):144913-144945
                            (apply update_loc lexbuf 0a 1 0a 0))
                          (before parsing/lexer.mll(349):144955-144958 74a)))
                     case int 2:
                      (before parsing/lexer.mll(351):145029-145045
                        (after parsing/lexer.mll(351):145029-145045
                          (apply token lexbuf)))
                     case int 3:
                      (before parsing/lexer.mll(353):145114-145128 5a)
                     case int 4:
                      (before parsing/lexer.mll(355):145197-145206 10a)
                     case int 5:
                      (before parsing/lexer.mll(357):145275-145369
                        (after parsing/lexer.mll(357):145275-145369
                          (apply error lexbuf
                            [2: ".~" [0: "is reserved for use in MetaOCaml"]])))
                     case int 6:
                      (before parsing/lexer.ml(2293):145406-145683
                        (let
                          (name =
                             (after parsing/lexer.ml(2297):145503-145595
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (+ (field 4 lexbuf) 1)
                                 (+ (field 5 lexbuf) -1))))
                          (before parsing/lexer.mll(360):145631-145683
                            (seq
                              (after parsing/lexer.mll(360):145633-145661
                                (apply check_label_name lexbuf name))
                              (before parsing/lexer.mll(361):145671-145681
                                (makeblock 6 name))))))
                     case int 7:
                      (before parsing/lexer.ml(2304):145720-146001
                        (let
                          (name =
                             (after parsing/lexer.ml(2308):145831-145923
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (+ (field 4 lexbuf) 1)
                                 (+ (field 5 lexbuf) -1))))
                          (before parsing/lexer.mll(363):145959-146001
                            (seq
                              (after parsing/lexer.mll(363):145961-145979
                                (apply warn_latin1 lexbuf))
                              (before parsing/lexer.mll(364):145989-145999
                                (makeblock 6 name))))))
                     case int 8:
                      (before parsing/lexer.mll(366):146070-146082 22a)
                     case int 9:
                      (before parsing/lexer.ml(2320):146119-146399
                        (let
                          (name =
                             (after parsing/lexer.ml(2324):146216-146308
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (+ (field 4 lexbuf) 1)
                                 (+ (field 5 lexbuf) -1))))
                          (before parsing/lexer.mll(368):146344-146399
                            (seq
                              (after parsing/lexer.mll(368):146346-146374
                                (apply check_label_name lexbuf name))
                              (before parsing/lexer.mll(369):146384-146397
                                (makeblock 3 name))))))
                     case int 10:
                      (before parsing/lexer.ml(2331):146437-146721
                        (let
                          (name =
                             (after parsing/lexer.ml(2335):146548-146640
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (+ (field 4 lexbuf) 1)
                                 (+ (field 5 lexbuf) -1))))
                          (before parsing/lexer.mll(371):146676-146721
                            (seq
                              (after parsing/lexer.mll(371):146678-146696
                                (apply warn_latin1 lexbuf))
                              (before parsing/lexer.mll(372):146706-146719
                                (makeblock 3 name))))))
                     case int 11:
                      (before parsing/lexer.ml(2342):146759-147043
                        (let
                          (name =
                             (after parsing/lexer.ml(2346):146851-146930
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf) (field 5 lexbuf))))
                          (before parsing/lexer.mll(374):146966-147043
                            (try
                              (after parsing/lexer.mll(374):146972-147003
                                (apply (field 5 (global Stdlib__hashtbl!))
                                  keyword_table name))
                             with exn
                              (if (== exn (field 7 (global Stdlib!)))
                                (before parsing/lexer.mll(375):147030-147041
                                  (makeblock 4 name))
                                (reraise exn))))))
                     case int 12:
                      (before parsing/lexer.ml(2353):147081-147337
                        (let
                          (name =
                             (after parsing/lexer.ml(2357):147187-147266
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf) (field 5 lexbuf))))
                          (before parsing/lexer.mll(377):147302-147337
                            (seq
                              (after parsing/lexer.mll(377):147304-147322
                                (apply warn_latin1 lexbuf))
                              (before parsing/lexer.mll(377):147324-147335
                                (makeblock 4 name))))))
                     case int 13:
                      (before parsing/lexer.ml(2363):147375-147597
                        (let
                          (name =
                             (after parsing/lexer.ml(2367):147467-147546
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf) (field 5 lexbuf))))
                          (before parsing/lexer.mll(379):147582-147597
                            (makeblock 0 name))))
                     case int 14:
                      (before parsing/lexer.ml(2373):147635-147891
                        (let
                          (name =
                             (after parsing/lexer.ml(2377):147741-147820
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf) (field 5 lexbuf))))
                          (before parsing/lexer.mll(381):147856-147891
                            (seq
                              (after parsing/lexer.mll(381):147858-147876
                                (apply warn_latin1 lexbuf))
                              (before parsing/lexer.mll(381):147878-147889
                                (makeblock 0 name))))))
                     case int 15:
                      (before parsing/lexer.ml(2383):147929-148161
                        (let
                          (lit =
                             (after parsing/lexer.ml(2387):148010-148089
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf) (field 5 lexbuf))))
                          (before parsing/lexer.mll(382):148142-148161
                            (makeblock 7 (makeblock 0 lit 0a)))))
                     case int 16:
                      (before parsing/lexer.ml(2393):148199-148602
                        (let
                          (lit =
                             (after parsing/lexer.ml(2397):148281-148367
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf)
                                 (+ (field 5 lexbuf) -1)))
                           modif =[int]
                             (after parsing/lexer.ml(2402):148478-148541
                               (apply (field 15 (global Stdlib__lexing!))
                                 lexbuf (+ (field 5 lexbuf) -1))))
                          (before parsing/lexer.mll(384):148577-148602
                            (makeblock 7
                              (makeblock 0 lit (makeblock 0 (int) modif))))))
                     case int 17:
                      (before parsing/lexer.ml(2408):148640-148879
                        (let
                          (lit =
                             (after parsing/lexer.ml(2412):148743-148822
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf) (field 5 lexbuf))))
                          (before parsing/lexer.mll(386):148858-148879
                            (makeblock 14 (makeblock 0 lit 0a)))))
                     case int 18:
                      (before parsing/lexer.ml(2418):148917-149366
                        (let
                          (lit =
                             (after parsing/lexer.ml(2422):149021-149107
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf)
                                 (+ (field 5 lexbuf) -1)))
                           modif =[int]
                             (after parsing/lexer.ml(2427):149240-149303
                               (apply (field 15 (global Stdlib__lexing!))
                                 lexbuf (+ (field 5 lexbuf) -1))))
                          (before parsing/lexer.mll(388):149339-149366
                            (makeblock 14
                              (makeblock 0 lit (makeblock 0 (int) modif))))))
                     case int 19:
                      (before parsing/lexer.ml(2433):149404-149695
                        (let
                          (invalid =
                             (after parsing/lexer.ml(2437):149538-149617
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf) (field 5 lexbuf))))
                          (before parsing/lexer.mll(390):149653-149695
                            (after parsing/lexer.mll(390):149653-149695
                              (apply error lexbuf (makeblock 6 invalid))))))
                     case int 20:
                      (before parsing/lexer.mll(392):149765-150061
                        (seq
                          (after parsing/lexer.mll(392):149767-149788
                            (apply reset_string_buffer 0a))
                          (before parsing/lexer.mll(393):149798-150059
                            (seq (setfield_imm 0 is_in_string 1a)
                              (before parsing/lexer.mll(394):149828-150059
                                (let (string_start = (field 10 lexbuf))
                                  (before parsing/lexer.mll(395):149877-150059
                                    (seq
                                      (setfield_ptr 0 string_start_loc
                                        (after parsing/lexer.mll(395):149897-149917
                                          (apply (field 3 (global Location!))
                                            lexbuf)))
                                      (before parsing/lexer.mll(396):149927-150059
                                        (seq
                                          (after parsing/lexer.mll(396):149927-149940
                                            (apply string lexbuf))
                                          (before parsing/lexer.mll(397):149950-150059
                                            (seq
                                              (setfield_imm 0 is_in_string
                                                0a)
                                              (before parsing/lexer.mll(398):149981-150059
                                                (seq
                                                  (setfield_ptr 10 lexbuf
                                                    string_start)
                                                  (before parsing/lexer.mll(399):150025-150059
                                                    (makeblock 1
                                                      (makeblock 0
                                                        (after parsing/lexer.mll(399):150033-150052
                                                          (apply
                                                            get_stored_string
                                                            0a))
                                                        0a)))))))))))))))))
                     case int 21:
                      (before parsing/lexer.ml(2455):150099-150629
                        (let
                          (delim =
                             (after parsing/lexer.ml(2459):150186-150278
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (+ (field 4 lexbuf) 1)
                                 (+ (field 5 lexbuf) -1))))
                          (before parsing/lexer.mll(401):150314-150629
                            (seq
                              (after parsing/lexer.mll(401):150316-150337
                                (apply reset_string_buffer 0a))
                              (before parsing/lexer.mll(402):150347-150627
                                (seq (setfield_imm 0 is_in_string 1a)
                                  (before parsing/lexer.mll(403):150377-150627
                                    (let (string_start = (field 10 lexbuf))
                                      (before parsing/lexer.mll(404):150426-150627
                                        (seq
                                          (setfield_ptr 0 string_start_loc
                                            (after parsing/lexer.mll(404):150446-150466
                                              (apply
                                                (field 3 (global Location!))
                                                lexbuf)))
                                          (before parsing/lexer.mll(405):150476-150627
                                            (seq
                                              (after parsing/lexer.mll(405):150476-150502
                                                (apply quoted_string delim
                                                  lexbuf))
                                              (before parsing/lexer.mll(406):150512-150627
                                                (seq
                                                  (setfield_imm 0
                                                    is_in_string 0a)
                                                  (before parsing/lexer.mll(407):150543-150627
                                                    (seq
                                                      (setfield_ptr 10 lexbuf
                                                        string_start)
                                                      (before parsing/lexer.mll(408):150587-150627
                                                        (makeblock 1
                                                          (makeblock 0
                                                            (after parsing/lexer.mll(408):150595-150614
                                                              (apply
                                                                get_stored_string
                                                                0a))
                                                            (makeblock 0
                                                              delim))))))))))))))))))))
                     case int 22:
                      (before parsing/lexer.mll(410):150699-150796
                        (seq
                          (after parsing/lexer.mll(410):150701-150733
                            (apply update_loc lexbuf 0a 1 0a 1))
                          (before parsing/lexer.mll(412):150785-150794
                            [18: '\n'])))
                     case int 23:
                      (before parsing/lexer.ml(2479):150834-151044
                        (let
                          (c =[int]
                             (after parsing/lexer.ml(2483):150935-150998
                               (apply (field 15 (global Stdlib__lexing!))
                                 lexbuf (+ (field 4 lexbuf) 1))))
                          (before parsing/lexer.mll(414):151034-151044
                            (makeblock 18 (int) c))))
                     case int 24:
                      (before parsing/lexer.ml(2489):151082-151324
                        (let
                          (c =[int]
                             (after parsing/lexer.ml(2493):151194-151257
                               (apply (field 15 (global Stdlib__lexing!))
                                 lexbuf (+ (field 4 lexbuf) 2))))
                          (before parsing/lexer.mll(416):151293-151324
                            (makeblock 18 (int)
                              (after parsing/lexer.mll(416):151300-151322
                                (apply char_for_backslash c))))))
                     case int 25:
                      (before parsing/lexer.mll(418):151394-151434
                        (makeblock 18 (int)
                          (after parsing/lexer.mll(418):151400-151432
                            (apply char_for_decimal_code lexbuf 2))))
                     case int 26:
                      (before parsing/lexer.mll(420):151504-151542
                        (makeblock 18 (int)
                          (after parsing/lexer.mll(420):151510-151540
                            (apply char_for_octal_code lexbuf 3))))
                     case int 27:
                      (before parsing/lexer.mll(422):151612-151656
                        (makeblock 18 (int)
                          (after parsing/lexer.mll(422):151618-151654
                            (apply char_for_hexadecimal_code lexbuf 3))))
                     case int 28:
                      (before parsing/lexer.ml(2514):151694-151949
                        (let
                          (esc =
                             (after parsing/lexer.ml(2518):151776-151868
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (+ (field 4 lexbuf) 1)
                                 (+ (field 4 lexbuf) 3))))
                          (before parsing/lexer.mll(424):151904-151949
                            (after parsing/lexer.mll(424):151904-151949
                              (apply error lexbuf (makeblock 1 esc 0a))))))
                     case int 29:
                      (before parsing/lexer.mll(426):152019-152098
                        (let
                          (*match* =
                             (after parsing/lexer.mll(426):152034-152068
                               (apply with_comment_buffer comment lexbuf))
                           loc =a (field 1 *match*)
                           s =a (field 0 *match*))
                          (before parsing/lexer.mll(427):152080-152096
                            (makeblock 17 (makeblock 0 s loc)))))
                     case int 30:
                      (before parsing/lexer.mll(429):152168-152358
                        (let
                          (*match* =
                             (after parsing/lexer.mll(429):152183-152217
                               (apply with_comment_buffer comment lexbuf))
                           loc =a (field 1 *match*)
                           s =a (field 0 *match*))
                          (before parsing/lexer.mll(430):152229-152350
                            (if (field 0 handle_docstrings)
                              (before parsing/lexer.mll(431):152266-152304
                                (makeblock 16
                                  (after parsing/lexer.mll(431):152276-152304
                                    (apply (field 2 (global Docstrings!)) s
                                      loc))))
                              (before parsing/lexer.mll(433):152328-152350
                                (makeblock 17
                                  (makeblock 0
                                    (after parsing/lexer.mll(433):152337-152344
                                      (apply (field 27 (global Stdlib!)) "*"
                                        s))
                                    loc)))))))
                     case int 31:
                      (before parsing/lexer.ml(2540):152396-152804
                        (let
                          (stars =
                             (after parsing/lexer.ml(2544):152481-152566
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (+ (field 4 lexbuf) 3)
                                 (field 5 lexbuf))))
                          (before parsing/lexer.mll(436):152602-152804
                            (let
                              (*match* =
                                 (after parsing/lexer.mll(437):152627-152766
                                   (apply with_comment_buffer
                                     (function lexbuf
                                       (funct-body parsing/lexer.mll(438):152659-152747
                                         (before parsing/lexer.mll(439):152689-152746
                                           (seq
                                             (after parsing/lexer.mll(439):152689-152715
                                               (apply store_string
                                                 (after parsing/lexer.mll(439):152702-152715
                                                   (apply
                                                     (field 27
                                                       (global Stdlib!))
                                                     "*" stars))))
                                             (before parsing/lexer.mll(440):152732-152746
                                               (after parsing/lexer.mll(440):152732-152746
                                                 (apply comment lexbuf)))))))
                                     lexbuf))
                               loc =a (field 1 *match*)
                               s =a (field 0 *match*))
                              (before parsing/lexer.mll(443):152786-152802
                                (makeblock 17 (makeblock 0 s loc)))))))
                     case int 32:
                      (before parsing/lexer.mll(445):152874-153065
                        (seq
                          (if (field 0 print_warnings)
                            (before parsing/lexer.mll(446):152910-152978
                              (after parsing/lexer.mll(446):152910-152978
                                (apply (field 34 (global Location!))
                                  (after parsing/lexer.mll(446):152933-152955
                                    (apply (field 3 (global Location!))
                                      lexbuf))
                                  0a)))
                            0a)
                          (before parsing/lexer.mll(447):152988-153063
                            (let
                              (*match* =
                                 (after parsing/lexer.mll(447):153001-153035
                                   (apply with_comment_buffer comment lexbuf))
                               loc =a (field 1 *match*)
                               s =a (field 0 *match*))
                              (before parsing/lexer.mll(448):153047-153063
                                (makeblock 17 (makeblock 0 s loc)))))))
                     case int 33:
                      (before parsing/lexer.ml(2565):153103-153528
                        (let
                          (stars =
                             (after parsing/lexer.ml(2569):153187-153279
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (+ (field 4 lexbuf) 2)
                                 (+ (field 5 lexbuf) -2))))
                          (before parsing/lexer.mll(450):153315-153528
                            (if
                              (&& (field 0 handle_docstrings)
                                (after parsing/lexer.mll(450):153342-153350
                                  (caml_string_equal stars "")))
                              (before parsing/lexer.mll(452):153408-153465
                                (makeblock 16
                                  (after parsing/lexer.mll(452):153417-153465
                                    (apply (field 2 (global Docstrings!)) ""
                                      (after parsing/lexer.mll(452):153442-153464
                                        (apply (field 3 (global Location!))
                                          lexbuf))))))
                              (before parsing/lexer.mll(454):153489-153526
                                (makeblock 17
                                  (makeblock 0 stars
                                    (after parsing/lexer.mll(454):153505-153525
                                      (apply (field 3 (global Location!))
                                        lexbuf)))))))))
                     case int 34:
                      (before parsing/lexer.mll(456):153598-153904
                        (let
                          (loc =
                             (after parsing/lexer.mll(456):153610-153630
                               (apply (field 3 (global Location!)) lexbuf)))
                          (before parsing/lexer.mll(457):153642-153896
                            (seq
                              (after parsing/lexer.mll(457):153642-153693
                                (apply (field 34 (global Location!)) loc 1a))
                              (before parsing/lexer.mll(458):153703-153896
                                (seq
                                  (setfield_imm 5 lexbuf
                                    (- (field 5 lexbuf) 1))
                                  (before parsing/lexer.mll(459):153773-153896
                                    (let (curpos = (field 11 lexbuf))
                                      (before parsing/lexer.mll(460):153815-153896
                                        (seq
                                          (setfield_ptr 11 lexbuf
                                            (let (init = curpos)
                                              (makeblock 0 (*,int,int,int)
                                                (field 0 init) (field 1 init)
                                                (field 2 init)
                                                (- (field 3 curpos) 1))))
                                          (before parsing/lexer.mll(461):153892-153896
                                            13a)))))))))))
                     case int 35:
                      (before parsing/lexer.mll(464):153974-154178
                        (let
                          (at_beginning_of_line =
                             (function pos
                               (funct-body parsing/lexer.mll(464)<ghost>:154001-154035
                                 (before parsing/lexer.mll(464):154007-154035
                                   (== (field 3 pos) (field 2 pos))))))
                          (before parsing/lexer.mll(465):154047-154170
                            (if
                              (not
                                (after parsing/lexer.mll(465):154054-154095
                                  (apply at_beginning_of_line
                                    (field 10 lexbuf))))
                              (before parsing/lexer.mll(466):154109-154113
                                62a)
                              (before parsing/lexer.mll(467):154127-154170
                                (try
                                  (after parsing/lexer.mll(467):154131-154147
                                    (apply directive lexbuf))
                                 with exn
                                  (let (tag =a (field 0 exn))
                                    (if (== tag (field 6 (global Stdlib!)))
                                      (before parsing/lexer.mll(467):154166-154170
                                        62a)
                                      (reraise exn)))))))))
                     case int 36:
                      (before parsing/lexer.mll(469):154251-154264 99a)
                     case int 37:
                      (before parsing/lexer.mll(470):154337-154351 100a)
                     case int 38:
                      (before parsing/lexer.mll(471):154424-154437 95a)
                     case int 39:
                      (before parsing/lexer.mll(472):154510-154519 21a)
                     case int 40:
                      (before parsing/lexer.mll(473):154592-154602 41a)
                     case int 41:
                      (before parsing/lexer.mll(474):154675-154685 17a)
                     case int 42:
                      (before parsing/lexer.mll(475):154758-154766 13a)
                     case int 43:
                      (before parsing/lexer.mll(476):154839-154848 84a)
                     case int 44:
                      (before parsing/lexer.mll(477):154921-154937 36a)
                     case int 45:
                      (before parsing/lexer.mll(478):155010-155017 80a)
                     case int 46:
                      (before parsing/lexer.mll(479):155090-155100 79a)
                     case int 47:
                      (before parsing/lexer.ml(2654):155138-155406
                        (let
                          (op =
                             (after parsing/lexer.ml(2658):155237-155322
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (+ (field 4 lexbuf) 1)
                                 (field 5 lexbuf))))
                          (before parsing/lexer.mll(480):155394-155406
                            (makeblock 15 op))))
                     case int 48:
                      (before parsing/lexer.mll(481):155479-155488 88a)
                     case int 49:
                      (before parsing/lexer.mll(482):155561-155575 87a)
                     case int 50:
                      (before parsing/lexer.mll(483):155648-155662 86a)
                     case int 51:
                      (before parsing/lexer.mll(484):155735-155751 85a)
                     case int 52:
                      (before parsing/lexer.mll(485):155824-155832 16a)
                     case int 53:
                      (before parsing/lexer.mll(486):155905-155917 15a)
                     case int 54:
                      (before parsing/lexer.mll(487):155990-155998 44a)
                     case int 55:
                      (before parsing/lexer.mll(488):156071-156084 43a)
                     case int 56:
                      (before parsing/lexer.mll(489):156157-156166 73a)
                     case int 57:
                      (before parsing/lexer.mll(490):156239-156251 53a)
                     case int 58:
                      (before parsing/lexer.mll(491):156324-156339 49a)
                     case int 59:
                      (before parsing/lexer.mll(492):156412-156428 47a)
                     case int 60:
                      (before parsing/lexer.mll(493):156501-156520 48a)
                     case int 61:
                      (before parsing/lexer.mll(494):156593-156605 19a)
                     case int 62:
                      (before parsing/lexer.mll(495):156678-156688 55a)
                     case int 63:
                      (before parsing/lexer.mll(496):156761-156775 54a)
                     case int 64:
                      (before parsing/lexer.mll(497):156848-156855 93a)
                     case int 65:
                      (before parsing/lexer.mll(498):156928-156938 92a)
                     case int 66:
                      (before parsing/lexer.mll(499):157011-157026 91a)
                     case int 67:
                      (before parsing/lexer.mll(500):157099-157110 65a)
                     case int 68:
                      (before parsing/lexer.mll(501):157183-157202 63a)
                     case int 69:
                      (before parsing/lexer.mll(502):157275-157285 20a)
                     case int 70:
                      (before parsing/lexer.mll(503):157358-157375 64a)
                     case int 71:
                      (before parsing/lexer.mll(504):157448-157462 52a)
                     case int 72:
                      (before parsing/lexer.mll(505):157537-157553 51a)
                     case int 73:
                      (before parsing/lexer.mll(506):157628-157646 50a)
                     case int 74:
                      (before parsing/lexer.mll(507):157721-157740 46a)
                     case int 75:
                      (before parsing/lexer.mll(508):157815-157841 45a)
                     case int 76:
                      (before parsing/lexer.mll(509):157914-157922 94a)
                     case int 77:
                      (before parsing/lexer.mll(510):157995-158012
                        [12: "!="])
                     case int 78:
                      (before parsing/lexer.mll(511):158085-158093 26a)
                     case int 79:
                      (before parsing/lexer.mll(512):158166-158177 25a)
                     case int 80:
                      (before parsing/lexer.mll(513):158250-158260 24a)
                     case int 81:
                      (before parsing/lexer.mll(514):158333-158342 38a)
                     case int 82:
                      (before parsing/lexer.mll(515):158415-158427 37a)
                     case int 83:
                      (before parsing/lexer.ml(2839):158465-158686
                        (let
                          (op =
                             (after parsing/lexer.ml(2843):158550-158629
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf) (field 5 lexbuf))))
                          (before parsing/lexer.mll(518):158671-158686
                            (makeblock 2 op))))
                     case int 84:
                      (before parsing/lexer.ml(2849):158724-158951
                        (let
                          (op =
                             (after parsing/lexer.ml(2853):158815-158894
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf) (field 5 lexbuf))))
                          (before parsing/lexer.mll(520):158936-158951
                            (makeblock 2 op))))
                     case int 85:
                      (before parsing/lexer.ml(2859):158989-159232
                        (let
                          (op =
                             (after parsing/lexer.ml(2863):159096-159175
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf) (field 5 lexbuf))))
                          (before parsing/lexer.mll(522):159217-159232
                            (makeblock 12 op))))
                     case int 86:
                      (before parsing/lexer.ml(2869):159270-159497
                        (let
                          (op =
                             (after parsing/lexer.ml(2873):159361-159440
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf) (field 5 lexbuf))))
                          (before parsing/lexer.mll(524):159482-159497
                            (makeblock 11 op))))
                     case int 87:
                      (before parsing/lexer.ml(2879):159535-159762
                        (let
                          (op =
                             (after parsing/lexer.ml(2883):159626-159705
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf) (field 5 lexbuf))))
                          (before parsing/lexer.mll(526):159747-159762
                            (makeblock 10 op))))
                     case int 88:
                      (before parsing/lexer.ml(2889):159800-160022
                        (let
                          (op =
                             (after parsing/lexer.ml(2893):159886-159965
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf) (field 5 lexbuf))))
                          (before parsing/lexer.mll(528):160007-160022
                            (makeblock 8 op))))
                     case int 89:
                      (before parsing/lexer.mll(529):160098-160109 27a)
                     case int 90:
                      (before parsing/lexer.ml(2904):160147-160378
                        (let
                          (op =
                             (after parsing/lexer.ml(2908):160242-160321
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf) (field 5 lexbuf))))
                          (before parsing/lexer.mll(531):160363-160378
                            (makeblock 9 op))))
                     case int 91:
                      (before parsing/lexer.ml(2914):160416-160643
                        (let
                          (op =
                             (after parsing/lexer.ml(2918):160509-160588
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf) (field 5 lexbuf))))
                          (before parsing/lexer.mll(533):160630-160643
                            (makeblock 13 op))))
                     case int 92:
                      (before parsing/lexer.ml(2924):160681-160914
                        (let
                          (op =
                             (after parsing/lexer.ml(2928):160781-160860
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf) (field 5 lexbuf))))
                          (before parsing/lexer.mll(535):160902-160914
                            (makeblock 5 op))))
                     case int 93:
                      (before parsing/lexer.ml(2934):160952-161185
                        (let
                          (op =
                             (after parsing/lexer.ml(2938):161052-161131
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf) (field 5 lexbuf))))
                          (before parsing/lexer.mll(537):161173-161185
                            (makeblock 19 op))))
                     case int 94:
                      (before parsing/lexer.mll(538):161257-161264 75a)
                     case int 95:
                      (before parsing/lexer.ml(2949):161302-161525
                        (let
                          (illegal_char =[int]
                             (after parsing/lexer.ml(2953):161383-161440
                               (apply (field 15 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf))))
                          (before parsing/lexer.mll(540):161476-161525
                            (after parsing/lexer.mll(540):161476-161525
                              (apply error lexbuf
                                (makeblock 0 (int) illegal_char))))))))))))
        directive
          (function lexbuf
            (funct-body parsing/lexer.ml(2961)<ghost>:161680-161853
              (before parsing/lexer.ml(2962):161691-161853
                (seq
                  (setfield_ptr 9 lexbuf
                    (after parsing/lexer.ml(2962):161716-161733
                      (caml_make_vect 8 -1)))
                  (before parsing/lexer.ml(2963):161758-161853
                    (seq
                      (after parsing/lexer.ml(2963):161758-161813
                        (array.set[int] (field 9 lexbuf) 4 (field 5 lexbuf)))
                      (before parsing/lexer.ml(2964):161817-161853
                        (after parsing/lexer.ml(2964):161817-161853
                          (apply __ocaml_lex_directive_rec lexbuf 142)))))))))
        __ocaml_lex_directive_rec
          (function lexbuf __ocaml_lex_state[int]
            (funct-body parsing/lexer.ml(2965)<ghost>:161884-163277
              (before parsing/lexer.ml(2966):161913-163277
                (let
                  (__ocaml_lex_state =
                     (after parsing/lexer.ml(2966):161919-161980
                       (apply (field 18 (global Stdlib__lexing!))
                         __ocaml_lex_tables __ocaml_lex_state lexbuf)))
                  (if (!= __ocaml_lex_state 0)
                    (before parsing/lexer.ml(2999):163187-163277
                      (seq
                        (after parsing/lexer.ml(2999):163187-163219
                          (apply (field 0 lexbuf) lexbuf))
                        (before parsing/lexer.ml(3000):163227-163277
                          (after parsing/lexer.ml(3000):163227-163277
                            (apply __ocaml_lex_directive_rec lexbuf
                              __ocaml_lex_state)))))
                    (before parsing/lexer.ml(2968):161999-163134
                      (let
                        (num =
                           (after parsing/lexer.ml(2972):162093-162169
                             (apply (field 13 (global Stdlib__lexing!))
                               lexbuf
                               (after parsing/lexer.ml(2972):162118-162143
                                 (array.get[int] (field 9 lexbuf) 0))
                               (after parsing/lexer.ml(2972):162144-162169
                                 (array.get[int] (field 9 lexbuf) 1))))
                         name =
                           (after parsing/lexer.ml(2977):162277-162353
                             (apply (field 13 (global Stdlib__lexing!))
                               lexbuf
                               (after parsing/lexer.ml(2977):162302-162327
                                 (array.get[int] (field 9 lexbuf) 2))
                               (after parsing/lexer.ml(2977):162328-162353
                                 (array.get[int] (field 9 lexbuf) 3))))
                         directive =
                           (after parsing/lexer.ml(2982):162481-162565
                             (apply (field 13 (global Stdlib__lexing!))
                               lexbuf (field 4 lexbuf)
                               (+
                                 (after parsing/lexer.ml(2982):162535-162560
                                   (array.get[int] (field 9 lexbuf) 3))
                                 1))))
                        (before parsing/lexer.mll(546):162601-163134
                          (catch
                            (try
                              (exit 22
                                (after parsing/lexer.mll(547):162617-162634
                                  (caml_int_of_string num)))
                             with exn
                              (before parsing/lexer.mll(550):162703-162831
                                (let
                                  (explanation = "line number out of range")
                                  (before parsing/lexer.mll(551):162763-162831
                                    (after parsing/lexer.mll(551):162763-162831
                                      (apply error lexbuf
                                        (makeblock 7
                                          (after parsing/lexer.mll(551):162796-162811
                                            (apply
                                              (field 27 (global Stdlib!)) "#"
                                              directive))
                                          (makeblock 0 explanation))))))))
                           with (22 line_num[int])
                            (before parsing/lexer.mll(556):163049-163126
                              (seq
                                (after parsing/lexer.mll(556):163049-163100
                                  (apply update_loc lexbuf (makeblock 0 name)
                                    (- line_num 1) 1a 0))
                                (before parsing/lexer.mll(557):163114-163126
                                  (after parsing/lexer.mll(557):163114-163126
                                    (apply token lexbuf))))))))))))))
        comment
          (function lexbuf
            (funct-body parsing/lexer.ml(3002)<ghost>:163291-163337
              (before parsing/lexer.ml(3003):163303-163337
                (after parsing/lexer.ml(3003):163303-163337
                  (apply __ocaml_lex_comment_rec lexbuf 147)))))
        __ocaml_lex_comment_rec
          (function lexbuf __ocaml_lex_state[int]
            (funct-body parsing/lexer.ml(3004)<ghost>:163366-167143
              (before parsing/lexer.ml(3005):163395-167143
                (let
                  (__ocaml_lex_state =
                     (after parsing/lexer.ml(3005):163401-163458
                       (apply (field 17 (global Stdlib__lexing!))
                         __ocaml_lex_tables __ocaml_lex_state lexbuf)))
                  (if (isout 14 __ocaml_lex_state)
                    (before parsing/lexer.ml(3139):167055-167143
                      (seq
                        (after parsing/lexer.ml(3139):167055-167087
                          (apply (field 0 lexbuf) lexbuf))
                        (before parsing/lexer.ml(3140):167095-167143
                          (after parsing/lexer.ml(3140):167095-167143
                            (apply __ocaml_lex_comment_rec lexbuf
                              __ocaml_lex_state)))))
                    (switch* __ocaml_lex_state
                     case int 0:
                      (before parsing/lexer.mll(561):163509-163637
                        (seq
                          (setfield_ptr 0 comment_start_loc
                            (makeblock 0
                              (after parsing/lexer.mll(561):163532-163554
                                (apply (field 3 (global Location!)) lexbuf))
                              (field 0 comment_start_loc)))
                          (before parsing/lexer.mll(562):163586-163629
                            (seq
                              (after parsing/lexer.mll(562):163586-163605
                                (apply store_lexeme lexbuf))
                              (before parsing/lexer.mll(563):163615-163629
                                (after parsing/lexer.mll(563):163615-163629
                                  (apply comment lexbuf)))))))
                     case int 1:
                      (before parsing/lexer.mll(566):163706-163954
                        (let (*match* = (field 0 comment_start_loc))
                          (if *match*
                            (let (l =a (field 1 *match*))
                              (if l
                                (before parsing/lexer.mll(569):163850-163945
                                  (seq (setfield_ptr 0 comment_start_loc l)
                                    (before parsing/lexer.mll(570):163892-163945
                                      (seq
                                        (after parsing/lexer.mll(570):163892-163911
                                          (apply store_lexeme lexbuf))
                                        (before parsing/lexer.mll(571):163931-163945
                                          (after parsing/lexer.mll(571):163931-163945
                                            (apply comment lexbuf)))))))
                                (before parsing/lexer.mll(568):163784-163829
                                  (seq (setfield_ptr 0 comment_start_loc 0a)
                                    (before parsing/lexer.mll(568):163809-163829
                                      (after parsing/lexer.mll(568):163809-163829
                                        (apply (field 3 (global Location!))
                                          lexbuf)))))))
                            (before parsing/lexer.mll(567):163754-163766
                              (raise
                                (after parsing/lexer.mll(567):163754-163766
                                  (makeblock 0 (global Assert_failure!)
                                    [0: "parsing/lexer.mll" 567 16])))))))
                     case int 2:
                      (before parsing/lexer.mll(574):164023-164599
                        (seq
                          (setfield_ptr 0 string_start_loc
                            (after parsing/lexer.mll(575):164053-164073
                              (apply (field 3 (global Location!)) lexbuf)))
                          (before parsing/lexer.mll(576):164083-164597
                            (seq
                              (after parsing/lexer.mll(576):164083-164105
                                (apply store_string_char '"'))
                              (before parsing/lexer.mll(577):164115-164597
                                (seq (setfield_imm 0 is_in_string 1a)
                                  (before parsing/lexer.mll(578):164145-164597
                                    (seq
                                      (try
                                        (after parsing/lexer.mll(578):164155-164168
                                          (apply string lexbuf))
                                       with exn
                                        (catch
                                          (let (tag =a (field 0 exn))
                                            (if (== tag Error)
                                              (let (*match* =a (field 1 exn))
                                                (if (isint *match*)
                                                  (let
                                                    (str_start =a
                                                       (field 2 exn))
                                                    (before parsing/lexer.mll(580):164234-164498
                                                      (let
                                                        (*match* =
                                                           (field 0
                                                             comment_start_loc))
                                                        (if *match*
                                                          (let
                                                            (loc =a
                                                               (field 0
                                                                 *match*))
                                                            (before parsing/lexer.mll(583):164331-164498
                                                              (let
                                                                (start =
                                                                   (after parsing/lexer.mll(583):164343-164380
                                                                    (apply
                                                                    (field 4
                                                                    (global Stdlib__list!))
                                                                    (after parsing/lexer.mll(583):164351-164380
                                                                    (apply
                                                                    (field 8
                                                                    (global Stdlib__list!))
                                                                    (field 0
                                                                    comment_start_loc))))))
                                                                (before parsing/lexer.mll(584):164396-164498
                                                                  (seq
                                                                    (setfield_ptr 0
                                                                    comment_start_loc
                                                                    0a)
                                                                    (before parsing/lexer.mll(585):164433-164498
                                                                    (after parsing/lexer.mll(585):164433-164498
                                                                    (apply
                                                                    error_loc
                                                                    loc
                                                                    (makeblock 4
                                                                    start
                                                                    str_start)))))))))
                                                          (before parsing/lexer.mll(581):164282-164294
                                                            (raise
                                                              (after parsing/lexer.mll(581):164282-164294
                                                                (makeblock 0
                                                                  (global Assert_failure!)
                                                                  [0:
                                                                   "parsing/lexer.mll"
                                                                   581 18]))))))))
                                                  (exit 26)))
                                              (exit 26)))
                                         with (26) (reraise exn)))
                                      (before parsing/lexer.mll(587):164520-164597
                                        (seq (setfield_imm 0 is_in_string 0a)
                                          (before parsing/lexer.mll(588):164551-164597
                                            (seq
                                              (after parsing/lexer.mll(588):164551-164573
                                                (apply store_string_char '"'))
                                              (before parsing/lexer.mll(589):164583-164597
                                                (after parsing/lexer.mll(589):164583-164597
                                                  (apply comment lexbuf)))))))))))))))
                     case int 3:
                      (before parsing/lexer.ml(3046):164636-165495
                        (let
                          (delim =
                             (after parsing/lexer.ml(3050):164723-164815
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (+ (field 4 lexbuf) 1)
                                 (+ (field 5 lexbuf) -1))))
                          (before parsing/lexer.mll(591):164851-165495
                            (seq
                              (setfield_ptr 0 string_start_loc
                                (after parsing/lexer.mll(592):164881-164901
                                  (apply (field 3 (global Location!)) lexbuf)))
                              (before parsing/lexer.mll(593):164911-165493
                                (seq
                                  (after parsing/lexer.mll(593):164911-164930
                                    (apply store_lexeme lexbuf))
                                  (before parsing/lexer.mll(594):164940-165493
                                    (seq (setfield_imm 0 is_in_string 1a)
                                      (before parsing/lexer.mll(595):164970-165493
                                        (seq
                                          (try
                                            (after parsing/lexer.mll(595):164980-165006
                                              (apply quoted_string delim
                                                lexbuf))
                                           with exn
                                            (catch
                                              (let (tag =a (field 0 exn))
                                                (if (== tag Error)
                                                  (let
                                                    (*match* =a (field 1 exn))
                                                    (if (isint *match*)
                                                      (let
                                                        (str_start =a
                                                           (field 2 exn))
                                                        (before parsing/lexer.mll(597):165072-165336
                                                          (let
                                                            (*match* =
                                                               (field 0
                                                                 comment_start_loc))
                                                            (if *match*
                                                              (let
                                                                (loc =a
                                                                   (field 0
                                                                    *match*))
                                                                (before parsing/lexer.mll(600):165169-165336
                                                                  (let
                                                                    (start =
                                                                    (after parsing/lexer.mll(600):165181-165218
                                                                    (apply
                                                                    (field 4
                                                                    (global Stdlib__list!))
                                                                    (after parsing/lexer.mll(600):165189-165218
                                                                    (apply
                                                                    (field 8
                                                                    (global Stdlib__list!))
                                                                    (field 0
                                                                    comment_start_loc))))))
                                                                    (before parsing/lexer.mll(601):165234-165336
                                                                    (seq
                                                                    (setfield_ptr 0
                                                                    comment_start_loc
                                                                    0a)
                                                                    (before parsing/lexer.mll(602):165271-165336
                                                                    (after parsing/lexer.mll(602):165271-165336
                                                                    (apply
                                                                    error_loc
                                                                    loc
                                                                    (makeblock 4
                                                                    start
                                                                    str_start)))))))))
                                                              (before parsing/lexer.mll(598):165120-165132
                                                                (raise
                                                                  (after parsing/lexer.mll(598):165120-165132
                                                                    (makeblock 0
                                                                    (global Assert_failure!)
                                                                    [0:
                                                                    "parsing/lexer.mll"
                                                                    598 18]))))))))
                                                      (exit 27)))
                                                  (exit 27)))
                                             with (27) (reraise exn)))
                                          (before parsing/lexer.mll(604):165358-165493
                                            (seq
                                              (setfield_imm 0 is_in_string
                                                0a)
                                              (before parsing/lexer.mll(605):165389-165493
                                                (seq
                                                  (after parsing/lexer.mll(605):165389-165410
                                                    (apply store_string_char
                                                      '|'))
                                                  (before parsing/lexer.mll(606):165420-165493
                                                    (seq
                                                      (after parsing/lexer.mll(606):165420-165438
                                                        (apply store_string
                                                          delim))
                                                      (before parsing/lexer.mll(607):165448-165493
                                                        (seq
                                                          (after parsing/lexer.mll(607):165448-165469
                                                            (apply
                                                              store_string_char
                                                              '}'))
                                                          (before parsing/lexer.mll(608):165479-165493
                                                            (after parsing/lexer.mll(608):165479-165493
                                                              (apply comment
                                                                lexbuf)))))))))))))))))))))
                     case int 4:
                      (before parsing/lexer.mll(611):165564-165603
                        (seq
                          (after parsing/lexer.mll(611):165566-165585
                            (apply store_lexeme lexbuf))
                          (before parsing/lexer.mll(611):165587-165601
                            (after parsing/lexer.mll(611):165587-165601
                              (apply comment lexbuf)))))
                     case int 5:
                      (before parsing/lexer.mll(613):165672-165767
                        (seq
                          (after parsing/lexer.mll(613):165674-165706
                            (apply update_loc lexbuf 0a 1 0a 1))
                          (before parsing/lexer.mll(614):165716-165759
                            (seq
                              (after parsing/lexer.mll(614):165716-165735
                                (apply store_lexeme lexbuf))
                              (before parsing/lexer.mll(615):165745-165759
                                (after parsing/lexer.mll(615):165745-165759
                                  (apply comment lexbuf)))))))
                     case int 6:
                      (before parsing/lexer.mll(618):165836-165875
                        (seq
                          (after parsing/lexer.mll(618):165838-165857
                            (apply store_lexeme lexbuf))
                          (before parsing/lexer.mll(618):165859-165873
                            (after parsing/lexer.mll(618):165859-165873
                              (apply comment lexbuf)))))
                     case int 7:
                      (before parsing/lexer.mll(620):165944-165983
                        (seq
                          (after parsing/lexer.mll(620):165946-165965
                            (apply store_lexeme lexbuf))
                          (before parsing/lexer.mll(620):165967-165981
                            (after parsing/lexer.mll(620):165967-165981
                              (apply comment lexbuf)))))
                     case int 8:
                      (before parsing/lexer.mll(622):166052-166091
                        (seq
                          (after parsing/lexer.mll(622):166054-166073
                            (apply store_lexeme lexbuf))
                          (before parsing/lexer.mll(622):166075-166089
                            (after parsing/lexer.mll(622):166075-166089
                              (apply comment lexbuf)))))
                     case int 9:
                      (before parsing/lexer.mll(624):166160-166199
                        (seq
                          (after parsing/lexer.mll(624):166162-166181
                            (apply store_lexeme lexbuf))
                          (before parsing/lexer.mll(624):166183-166197
                            (after parsing/lexer.mll(624):166183-166197
                              (apply comment lexbuf)))))
                     case int 10:
                      (before parsing/lexer.mll(626):166269-166308
                        (seq
                          (after parsing/lexer.mll(626):166271-166290
                            (apply store_lexeme lexbuf))
                          (before parsing/lexer.mll(626):166292-166306
                            (after parsing/lexer.mll(626):166292-166306
                              (apply comment lexbuf)))))
                     case int 11:
                      (before parsing/lexer.mll(628):166378-166619
                        (let (*match* = (field 0 comment_start_loc))
                          (if *match*
                            (let (loc =a (field 0 *match*))
                              (before parsing/lexer.mll(631):166471-166611
                                (let
                                  (start =
                                     (after parsing/lexer.mll(631):166483-166520
                                       (apply
                                         (field 4 (global Stdlib__list!))
                                         (after parsing/lexer.mll(631):166491-166520
                                           (apply
                                             (field 8 (global Stdlib__list!))
                                             (field 0 comment_start_loc))))))
                                  (before parsing/lexer.mll(632):166534-166611
                                    (seq
                                      (setfield_ptr 0 comment_start_loc 0a)
                                      (before parsing/lexer.mll(633):166569-166611
                                        (after parsing/lexer.mll(633):166569-166611
                                          (apply error_loc loc
                                            (makeblock 3 start)))))))))
                            (before parsing/lexer.mll(629):166426-166438
                              (raise
                                (after parsing/lexer.mll(629):166426-166438
                                  (makeblock 0 (global Assert_failure!)
                                    [0: "parsing/lexer.mll" 629 16])))))))
                     case int 12:
                      (before parsing/lexer.mll(636):166689-166784
                        (seq
                          (after parsing/lexer.mll(636):166691-166723
                            (apply update_loc lexbuf 0a 1 0a 0))
                          (before parsing/lexer.mll(637):166733-166776
                            (seq
                              (after parsing/lexer.mll(637):166733-166752
                                (apply store_lexeme lexbuf))
                              (before parsing/lexer.mll(638):166762-166776
                                (after parsing/lexer.mll(638):166762-166776
                                  (apply comment lexbuf)))))))
                     case int 13:
                      (before parsing/lexer.mll(641):166854-166893
                        (seq
                          (after parsing/lexer.mll(641):166856-166875
                            (apply store_lexeme lexbuf))
                          (before parsing/lexer.mll(641):166877-166891
                            (after parsing/lexer.mll(641):166877-166891
                              (apply comment lexbuf)))))
                     case int 14:
                      (before parsing/lexer.mll(643):166963-167002
                        (seq
                          (after parsing/lexer.mll(643):166965-166984
                            (apply store_lexeme lexbuf))
                          (before parsing/lexer.mll(643):166986-167000
                            (after parsing/lexer.mll(643):166986-167000
                              (apply comment lexbuf)))))))))))
        string
          (function lexbuf
            (funct-body parsing/lexer.ml(3142)<ghost>:167156-167244
              (before parsing/lexer.ml(3143):167167-167244
                (seq
                  (setfield_ptr 9 lexbuf
                    (after parsing/lexer.ml(3143):167192-167209
                      (caml_make_vect 2 -1)))
                  (before parsing/lexer.ml(3143):167211-167244
                    (after parsing/lexer.ml(3143):167211-167244
                      (apply __ocaml_lex_string_rec lexbuf 185)))))))
        __ocaml_lex_string_rec
          (function lexbuf __ocaml_lex_state[int]
            (funct-body parsing/lexer.ml(3144)<ghost>:167272-169974
              (before parsing/lexer.ml(3145):167301-169974
                (let
                  (__ocaml_lex_state =
                     (after parsing/lexer.ml(3145):167307-167368
                       (apply (field 18 (global Stdlib__lexing!))
                         __ocaml_lex_tables __ocaml_lex_state lexbuf)))
                  (if (isout 10 __ocaml_lex_state)
                    (before parsing/lexer.ml(3240):169887-169974
                      (seq
                        (after parsing/lexer.ml(3240):169887-169919
                          (apply (field 0 lexbuf) lexbuf))
                        (before parsing/lexer.ml(3241):169927-169974
                          (after parsing/lexer.ml(3241):169927-169974
                            (apply __ocaml_lex_string_rec lexbuf
                              __ocaml_lex_state)))))
                    (switch* __ocaml_lex_state
                     case int 0:
                      (before parsing/lexer.mll(647):167419-167425 0a)
                     case int 1:
                      (before parsing/lexer.ml(3152):167462-167809
                        (let
                          (space =
                             (after parsing/lexer.ml(3156):167560-167637
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf
                                 (after parsing/lexer.ml(3156):167585-167610
                                   (array.get[int] (field 9 lexbuf) 0))
                                 (field 5 lexbuf))))
                          (before parsing/lexer.mll(649):167673-167809
                            (seq
                              (after parsing/lexer.mll(649):167675-167727
                                (apply update_loc lexbuf 0a 1 0a
                                  (string.length space)))
                              (before parsing/lexer.mll(650):167737-167801
                                (seq
                                  (if
                                    (after parsing/lexer.mll(650):167740-167753
                                      (apply in_comment 0a))
                                    (before parsing/lexer.mll(650):167759-167778
                                      (after parsing/lexer.mll(650):167759-167778
                                        (apply store_lexeme lexbuf)))
                                    0a)
                                  (before parsing/lexer.mll(651):167788-167801
                                    (after parsing/lexer.mll(651):167788-167801
                                      (apply string lexbuf)))))))))
                     case int 2:
                      (before parsing/lexer.ml(3165):167846-168130
                        (let
                          (c =[int]
                             (after parsing/lexer.ml(3169):167956-168019
                               (apply (field 15 (global Stdlib__lexing!))
                                 lexbuf (+ (field 4 lexbuf) 1))))
                          (before parsing/lexer.mll(654):168055-168130
                            (seq
                              (after parsing/lexer.mll(654):168057-168105
                                (apply store_escaped_char lexbuf
                                  (after parsing/lexer.mll(654):168083-168105
                                    (apply char_for_backslash c))))
                              (before parsing/lexer.mll(655):168115-168128
                                (after parsing/lexer.mll(655):168115-168128
                                  (apply string lexbuf)))))))
                     case int 3:
                      (before parsing/lexer.mll(657):168199-168285
                        (seq
                          (after parsing/lexer.mll(657):168201-168259
                            (apply store_escaped_char lexbuf
                              (after parsing/lexer.mll(657):168227-168259
                                (apply char_for_decimal_code lexbuf 1))))
                          (before parsing/lexer.mll(658):168270-168283
                            (after parsing/lexer.mll(658):168270-168283
                              (apply string lexbuf)))))
                     case int 4:
                      (before parsing/lexer.mll(660):168354-168438
                        (seq
                          (after parsing/lexer.mll(660):168356-168412
                            (apply store_escaped_char lexbuf
                              (after parsing/lexer.mll(660):168382-168412
                                (apply char_for_octal_code lexbuf 2))))
                          (before parsing/lexer.mll(661):168423-168436
                            (after parsing/lexer.mll(661):168423-168436
                              (apply string lexbuf)))))
                     case int 5:
                      (before parsing/lexer.mll(663):168507-168597
                        (seq
                          (after parsing/lexer.mll(663):168509-168571
                            (apply store_escaped_char lexbuf
                              (after parsing/lexer.mll(663):168535-168571
                                (apply char_for_hexadecimal_code lexbuf 2))))
                          (before parsing/lexer.mll(664):168582-168595
                            (after parsing/lexer.mll(664):168582-168595
                              (apply string lexbuf)))))
                     case int 6:
                      (before parsing/lexer.mll(666):168668-168755
                        (seq
                          (after parsing/lexer.mll(666):168670-168728
                            (apply store_escaped_uchar lexbuf
                              (after parsing/lexer.mll(666):168697-168728
                                (apply uchar_for_uchar_escape lexbuf))))
                          (before parsing/lexer.mll(667):168740-168753
                            (after parsing/lexer.mll(667):168740-168753
                              (apply string lexbuf)))))
                     case int 7:
                      (before parsing/lexer.mll(669):168824-169157
                        (seq
                          (if
                            (not
                              (after parsing/lexer.mll(669):168833-168848
                                (apply in_comment 0a)))
                            (before parsing/lexer.mll(669):168854-169097
                              (let
                                (loc =
                                   (after parsing/lexer.mll(673):168997-169017
                                     (apply (field 3 (global Location!))
                                       lexbuf)))
                                (before parsing/lexer.mll(674):169031-169084
                                  (after parsing/lexer.mll(674):169031-169084
                                    (apply (field 34 (global Location!)) loc
                                      6a)))))
                            0a)
                          (before parsing/lexer.mll(676):169107-169149
                            (seq
                              (after parsing/lexer.mll(676):169107-169126
                                (apply store_lexeme lexbuf))
                              (before parsing/lexer.mll(677):169136-169149
                                (after parsing/lexer.mll(677):169136-169149
                                  (apply string lexbuf)))))))
                     case int 8:
                      (before parsing/lexer.mll(680):169226-169436
                        (seq
                          (if
                            (not
                              (after parsing/lexer.mll(680):169235-169250
                                (apply in_comment 0a)))
                            (before parsing/lexer.mll(681):169266-169334
                              (after parsing/lexer.mll(681):169266-169334
                                (apply (field 34 (global Location!))
                                  (after parsing/lexer.mll(681):169289-169311
                                    (apply (field 3 (global Location!))
                                      lexbuf))
                                  13a)))
                            0a)
                          (before parsing/lexer.mll(682):169344-169428
                            (seq
                              (after parsing/lexer.mll(682):169344-169376
                                (apply update_loc lexbuf 0a 1 0a 0))
                              (before parsing/lexer.mll(683):169386-169428
                                (seq
                                  (after parsing/lexer.mll(683):169386-169405
                                    (apply store_lexeme lexbuf))
                                  (before parsing/lexer.mll(684):169415-169428
                                    (after parsing/lexer.mll(684):169415-169428
                                      (apply string lexbuf)))))))))
                     case int 9:
                      (before parsing/lexer.mll(687):169505-169587
                        (seq (setfield_imm 0 is_in_string 0a)
                          (before parsing/lexer.mll(688):169538-169585
                            (after parsing/lexer.mll(688):169538-169585
                              (apply error_loc (field 0 string_start_loc) 0a)))))
                     case int 10:
                      (before parsing/lexer.ml(3230):169625-169834
                        (let
                          (c =[int]
                             (after parsing/lexer.ml(3234):169695-169752
                               (apply (field 15 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf))))
                          (before parsing/lexer.mll(690):169788-169834
                            (seq
                              (after parsing/lexer.mll(690):169790-169809
                                (apply store_string_char c))
                              (before parsing/lexer.mll(691):169819-169832
                                (after parsing/lexer.mll(691):169819-169832
                                  (apply string lexbuf)))))))))))))
        quoted_string
          (function delim lexbuf
            (funct-body parsing/lexer.ml(3243)<ghost>:169994-170058
              (before parsing/lexer.ml(3244):170012-170058
                (after parsing/lexer.ml(3244):170012-170058
                  (apply __ocaml_lex_quoted_string_rec delim lexbuf 212)))))
        __ocaml_lex_quoted_string_rec
          (function delim lexbuf __ocaml_lex_state[int]
            (funct-body parsing/lexer.ml(3245)<ghost>:170093-171271
              (before parsing/lexer.ml(3246):170128-171271
                (let
                  (__ocaml_lex_state =
                     (after parsing/lexer.ml(3246):170134-170191
                       (apply (field 17 (global Stdlib__lexing!))
                         __ocaml_lex_tables __ocaml_lex_state lexbuf)))
                  (if (isout 3 __ocaml_lex_state)
                    (before parsing/lexer.ml(3285):171171-171271
                      (seq
                        (after parsing/lexer.ml(3285):171171-171203
                          (apply (field 0 lexbuf) lexbuf))
                        (before parsing/lexer.ml(3286):171211-171271
                          (after parsing/lexer.ml(3286):171211-171271
                            (apply __ocaml_lex_quoted_string_rec delim lexbuf
                              __ocaml_lex_state)))))
                    (switch* __ocaml_lex_state
                     case int 0:
                      (before parsing/lexer.mll(695):170242-170349
                        (seq
                          (after parsing/lexer.mll(695):170244-170276
                            (apply update_loc lexbuf 0a 1 0a 0))
                          (before parsing/lexer.mll(696):170286-170341
                            (seq
                              (after parsing/lexer.mll(696):170286-170305
                                (apply store_lexeme lexbuf))
                              (before parsing/lexer.mll(697):170315-170341
                                (after parsing/lexer.mll(697):170315-170341
                                  (apply quoted_string delim lexbuf)))))))
                     case int 1:
                      (before parsing/lexer.mll(700):170418-170500
                        (seq (setfield_imm 0 is_in_string 0a)
                          (before parsing/lexer.mll(701):170451-170498
                            (after parsing/lexer.mll(701):170451-170498
                              (apply error_loc (field 0 string_start_loc) 0a)))))
                     case int 2:
                      (before parsing/lexer.ml(3262):170537-170859
                        (let
                          (edelim =
                             (after parsing/lexer.ml(3266):170625-170717
                               (apply (field 13 (global Stdlib__lexing!))
                                 lexbuf (+ (field 4 lexbuf) 1)
                                 (+ (field 5 lexbuf) -1))))
                          (before parsing/lexer.mll(703):170753-170859
                            (if
                              (after parsing/lexer.mll(704):170766-170780
                                (caml_string_equal delim edelim))
                              (before parsing/lexer.mll(704):170786-170788
                                0a)
                              (before parsing/lexer.mll(705):170802-170851
                                (seq
                                  (after parsing/lexer.mll(705):170803-170822
                                    (apply store_lexeme lexbuf))
                                  (before parsing/lexer.mll(705):170824-170850
                                    (after parsing/lexer.mll(705):170824-170850
                                      (apply quoted_string delim lexbuf)))))))))
                     case int 3:
                      (before parsing/lexer.ml(3275):170896-171118
                        (let
                          (c =[int]
                             (after parsing/lexer.ml(3279):170966-171023
                               (apply (field 15 (global Stdlib__lexing!))
                                 lexbuf (field 4 lexbuf))))
                          (before parsing/lexer.mll(708):171059-171118
                            (seq
                              (after parsing/lexer.mll(708):171061-171080
                                (apply store_string_char c))
                              (before parsing/lexer.mll(709):171090-171116
                                (after parsing/lexer.mll(709):171090-171116
                                  (apply quoted_string delim lexbuf)))))))))))))
        skip_hash_bang
          (function lexbuf
            (funct-body parsing/lexer.ml(3288)<ghost>:171292-171345
              (before parsing/lexer.ml(3289):171304-171345
                (after parsing/lexer.ml(3289):171304-171345
                  (apply __ocaml_lex_skip_hash_bang_rec lexbuf 221)))))
        __ocaml_lex_skip_hash_bang_rec
          (function lexbuf __ocaml_lex_state[int]
            (funct-body parsing/lexer.ml(3290)<ghost>:171381-171889
              (before parsing/lexer.ml(3291):171410-171889
                (let
                  (__ocaml_lex_state =
                     (after parsing/lexer.ml(3291):171416-171473
                       (apply (field 17 (global Stdlib__lexing!))
                         __ocaml_lex_tables __ocaml_lex_state lexbuf)))
                  (if (isout 2 __ocaml_lex_state)
                    (before parsing/lexer.ml(3307):171794-171889
                      (seq
                        (after parsing/lexer.ml(3307):171794-171826
                          (apply (field 0 lexbuf) lexbuf))
                        (before parsing/lexer.ml(3308):171834-171889
                          (after parsing/lexer.ml(3308):171834-171889
                            (apply __ocaml_lex_skip_hash_bang_rec lexbuf
                              __ocaml_lex_state)))))
                    (switch* __ocaml_lex_state
                     case int 0:
                      (before parsing/lexer.mll(713):171524-171560
                        (after parsing/lexer.mll(713):171524-171560
                          (apply update_loc lexbuf 0a 3 0a 0)))
                     case int 1:
                      (before parsing/lexer.mll(715):171629-171665
                        (after parsing/lexer.mll(715):171629-171665
                          (apply update_loc lexbuf 0a 1 0a 0)))
                     case int 2:
                      (before parsing/lexer.mll(716):171735-171741 0a))))))))
      (let
        (token_with_comments =
           (function lexbuf
             (funct-body parsing/lexer.mll(720)<ghost>:171950-172072
               (before parsing/lexer.mll(721):171963-172072
                 (let (*match* = (field 0 preprocessor))
                   (if *match*
                     (let
                       (*match* =a (field 0 *match*)
                        preprocess =a (field 1 *match*))
                       (before parsing/lexer.mll(723):172049-172072
                         (after parsing/lexer.mll(723):172049-172072
                           (apply preprocess token lexbuf))))
                     (before parsing/lexer.mll(722):172002-172014
                       (after parsing/lexer.mll(722):172002-172014
                         (apply token lexbuf))))))))
         token =
           (function lexbuf
             (funct-body parsing/lexer.mll(743)<ghost>:172729-175429
               (before parsing/lexer.mll(744):172742-175429
                 (let
                   (post_pos =
                      (after parsing/lexer.mll(744):172757-172776
                        (apply (field 10 (global Stdlib__lexing!)) lexbuf)))
                   (before parsing/lexer.mll(745):172784-175429
                     (let
                       (attach =
                          (function lines docs pre_pos
                            (funct-body parsing/lexer.mll(745)<ghost>:172795-173882
                              (before parsing/lexer.mll(746):172822-173882
                                (let (*match* = docs *match* = lines)
                                  (switch* *match*
                                   case int 0:
                                    (before parsing/lexer.mll(748):172900-172902
                                      0a)
                                   case tag 0:
                                    (let (a =a (field 0 *match*))
                                      (if (>= *match* 2)
                                        (let (a =a a)
                                          (before parsing/lexer.mll(753):173085-173185
                                            (seq
                                              (after parsing/lexer.mll(753):173085-173126
                                                (apply
                                                  (field 7
                                                    (global Docstrings!))
                                                  post_pos
                                                  (after parsing/lexer.mll(753):173114-173126
                                                    (apply
                                                      (field 8
                                                        (global Stdlib__list!))
                                                      a))))
                                              (before parsing/lexer.mll(754):173140-173185
                                                (after parsing/lexer.mll(754):173140-173185
                                                  (apply
                                                    (field 9
                                                      (global Docstrings!))
                                                    pre_pos
                                                    (after parsing/lexer.mll(754):173173-173185
                                                      (apply
                                                        (field 8
                                                          (global Stdlib__list!))
                                                        a))))))))
                                        (before parsing/lexer.mll(750):172956-173040
                                          (seq
                                            (after parsing/lexer.mll(750):172956-172997
                                              (apply
                                                (field 7
                                                  (global Docstrings!))
                                                post_pos
                                                (after parsing/lexer.mll(750):172985-172997
                                                  (apply
                                                    (field 8
                                                      (global Stdlib__list!))
                                                    a))))
                                            (before parsing/lexer.mll(751):173011-173039
                                              (after parsing/lexer.mll(751):173011-173039
                                                (apply
                                                  (field 6
                                                    (global Docstrings!))
                                                  pre_pos a)))))))
                                   case tag 1:
                                    (let
                                      (b =a (field 2 *match*)
                                       f =a (field 1 *match*)
                                       a =a (field 0 *match*))
                                      (if (>= *match* 2)
                                        (let (b =a b f =a f a =a a)
                                          (before parsing/lexer.mll(763):173595-173882
                                            (seq
                                              (after parsing/lexer.mll(763):173595-173636
                                                (apply
                                                  (field 7
                                                    (global Docstrings!))
                                                  post_pos
                                                  (after parsing/lexer.mll(763):173624-173636
                                                    (apply
                                                      (field 8
                                                        (global Stdlib__list!))
                                                      a))))
                                              (before parsing/lexer.mll(764):173650-173882
                                                (seq
                                                  (after parsing/lexer.mll(764):173650-173731
                                                    (apply
                                                      (field 10
                                                        (global Docstrings!))
                                                      post_pos
                                                      (after parsing/lexer.mll(765):173699-173731
                                                        (apply
                                                          (field 11
                                                            (global Stdlib__list!))
                                                          f
                                                          (after parsing/lexer.mll(765):173718-173730
                                                            (apply
                                                              (field 8
                                                                (global Stdlib__list!))
                                                              b))))))
                                                  (before parsing/lexer.mll(766):173745-173882
                                                    (seq
                                                      (after parsing/lexer.mll(766):173745-173823
                                                        (apply
                                                          (field 8
                                                            (global Docstrings!))
                                                          pre_pos
                                                          (after parsing/lexer.mll(767):173791-173823
                                                            (apply
                                                              (field 11
                                                                (global Stdlib__list!))
                                                              f
                                                              (after parsing/lexer.mll(767):173810-173822
                                                                (apply
                                                                  (field 8
                                                                    (global Stdlib__list!))
                                                                  b))))))
                                                      (before parsing/lexer.mll(768):173837-173882
                                                        (after parsing/lexer.mll(768):173837-173882
                                                          (apply
                                                            (field 9
                                                              (global Docstrings!))
                                                            pre_pos
                                                            (after parsing/lexer.mll(768):173870-173882
                                                              (apply
                                                                (field 8
                                                                  (global Stdlib__list!))
                                                                a))))))))))))
                                        (before parsing/lexer.mll(756):173247-173542
                                          (seq
                                            (after parsing/lexer.mll(756):173247-173288
                                              (apply
                                                (field 7
                                                  (global Docstrings!))
                                                post_pos
                                                (after parsing/lexer.mll(756):173276-173288
                                                  (apply
                                                    (field 8
                                                      (global Stdlib__list!))
                                                    a))))
                                            (before parsing/lexer.mll(757):173302-173542
                                              (seq
                                                (after parsing/lexer.mll(757):173302-173383
                                                  (apply
                                                    (field 10
                                                      (global Docstrings!))
                                                    post_pos
                                                    (after parsing/lexer.mll(758):173351-173383
                                                      (apply
                                                        (field 11
                                                          (global Stdlib__list!))
                                                        f
                                                        (after parsing/lexer.mll(758):173370-173382
                                                          (apply
                                                            (field 8
                                                              (global Stdlib__list!))
                                                            b))))))
                                                (before parsing/lexer.mll(759):173397-173542
                                                  (seq
                                                    (after parsing/lexer.mll(759):173397-173441
                                                      (apply
                                                        (field 8
                                                          (global Docstrings!))
                                                        pre_pos
                                                        (after parsing/lexer.mll(759):173429-173441
                                                          (apply
                                                            (field 8
                                                              (global Stdlib__list!))
                                                            f))))
                                                    (before parsing/lexer.mll(760):173455-173542
                                                      (seq
                                                        (after parsing/lexer.mll(760):173455-173500
                                                          (apply
                                                            (field 9
                                                              (global Docstrings!))
                                                            pre_pos
                                                            (after parsing/lexer.mll(760):173488-173500
                                                              (apply
                                                                (field 8
                                                                  (global Stdlib__list!))
                                                                a))))
                                                        (before parsing/lexer.mll(761):173514-173542
                                                          (after parsing/lexer.mll(761):173514-173542
                                                            (apply
                                                              (field 6
                                                                (global Docstrings!))
                                                              pre_pos b)))))))))))))))))))
                       (before parsing/lexer.mll(770):173894-175429
                         (letrec
                           (loop
                              (function lines docs lexbuf
                                (funct-body parsing/lexer.mll(770)<ghost>:173907-175389
                                  (before parsing/lexer.mll(771):173933-175389
                                    (let
                                      (tok =
                                         (after parsing/lexer.mll(771):173939-173965
                                           (apply token_with_comments lexbuf)))
                                      (catch
                                        (switch tok
                                         case int 74:
                                          (before parsing/lexer.mll(782):174255-174447
                                            (let
                                              (lines' =
                                                 (switch* lines
                                                  case int 0:
                                                   (before parsing/lexer.mll(784):174321-174328
                                                     1a)
                                                  case int 1:
                                                   (before parsing/lexer.mll(785):174354-174363
                                                     2a)
                                                  case int 2:
                                                   (before parsing/lexer.mll(786):174391-174400
                                                     2a)))
                                              (before parsing/lexer.mll(788):174424-174447
                                                (after parsing/lexer.mll(788):174424-174447
                                                  (apply loop lines' docs
                                                    lexbuf)))))
                                         case tag 16:
                                          (let (doc =a (field 0 tok))
                                            (before parsing/lexer.mll(790):174483-175307
                                              (seq
                                                (after parsing/lexer.mll(790):174483-174506
                                                  (apply
                                                    (field 3
                                                      (global Docstrings!))
                                                    doc))
                                                (before parsing/lexer.mll(791):174518-175307
                                                  (seq
                                                    (after parsing/lexer.mll(791):174518-174543
                                                      (apply
                                                        add_docstring_comment
                                                        doc))
                                                    (before parsing/lexer.mll(792):174555-175307
                                                      (let
                                                        (docs' =
                                                           (if
                                                             (after parsing/lexer.mll(793):174582-174618
                                                               (caml_string_equal
                                                                 (after parsing/lexer.mll(793):174582-174611
                                                                   (apply
                                                                    (field 4
                                                                    (global Docstrings!))
                                                                    doc))
                                                                 "/*"))
                                                             (before parsing/lexer.mll(794):174638-174814
                                                               (switch* docs
                                                                case int 0:
                                                                 (before parsing/lexer.mll(795):174681-174702
                                                                   (makeblock 1
                                                                    0a
                                                                    (makeblock 0
                                                                    doc 0a)
                                                                    0a))
                                                                case tag 0:
                                                                 (let
                                                                   (a =a
                                                                    (field 0
                                                                    docs))
                                                                   (before parsing/lexer.mll(796):174730-174751
                                                                    (makeblock 1
                                                                    a
                                                                    (makeblock 0
                                                                    doc 0a)
                                                                    0a)))
                                                                case tag 1:
                                                                 (let
                                                                   (b =a
                                                                    (field 2
                                                                    docs)
                                                                    f =a
                                                                    (field 1
                                                                    docs)
                                                                    a =a
                                                                    (field 0
                                                                    docs))
                                                                   (before parsing/lexer.mll(797):174787-174814
                                                                    (makeblock 1
                                                                    a
                                                                    (after parsing/lexer.mll(797):174797-174809
                                                                    (apply
                                                                    (field 36
                                                                    (global Stdlib!))
                                                                    (makeblock 0
                                                                    doc b) f))
                                                                    0a)))))
                                                             (before parsing/lexer.mll(799):174846-175259
                                                               (let
                                                                 (*match* =
                                                                    docs
                                                                  *match* =
                                                                    lines)
                                                                 (switch* *match*
                                                                  case int 0:
                                                                   (if
                                                                    (>=
                                                                    *match*
                                                                    2)
                                                                    (before parsing/lexer.mll(801):174966-174987
                                                                    (makeblock 1
                                                                    0a 0a
                                                                    (makeblock 0
                                                                    doc 0a)))
                                                                    (before parsing/lexer.mll(800):174916-174927
                                                                    (makeblock 0
                                                                    (makeblock 0
                                                                    doc 0a))))
                                                                  case tag 0:
                                                                   (let
                                                                    (a =a
                                                                    (field 0
                                                                    *match*))
                                                                    (if
                                                                    (>=
                                                                    *match*
                                                                    2)
                                                                    (let
                                                                    (a =a a)
                                                                    (before parsing/lexer.mll(803):175090-175111
                                                                    (makeblock 1
                                                                    a 0a
                                                                    (makeblock 0
                                                                    doc 0a))))
                                                                    (before parsing/lexer.mll(802):175035-175051
                                                                    (makeblock 0
                                                                    (makeblock 0
                                                                    doc a)))))
                                                                  case tag 1:
                                                                   (let
                                                                    (b =a
                                                                    (field 2
                                                                    *match*)
                                                                    f =a
                                                                    (field 1
                                                                    *match*)
                                                                    a =a
                                                                    (field 0
                                                                    *match*))
                                                                    (if
                                                                    (>=
                                                                    *match*
                                                                    2)
                                                                    (let
                                                                    (b =a b
                                                                    f =a f
                                                                    a =a a)
                                                                    (before parsing/lexer.mll(805):175236-175259
                                                                    (makeblock 1
                                                                    a
                                                                    (after parsing/lexer.mll(805):175246-175251
                                                                    (apply
                                                                    (field 36
                                                                    (global Stdlib!))
                                                                    b f))
                                                                    (makeblock 0
                                                                    doc 0a))))
                                                                    (before parsing/lexer.mll(804):175167-175189
                                                                    (makeblock 1
                                                                    a f
                                                                    (makeblock 0
                                                                    doc b))))))))))
                                                        (before parsing/lexer.mll(807):175283-175307
                                                          (after parsing/lexer.mll(807):175283-175307
                                                            (apply loop 0a
                                                              docs' lexbuf))))))))))
                                         case tag 17:
                                          (let
                                            (*match* =a (field 0 tok)
                                             loc =a (field 1 *match*)
                                             s =a (field 0 *match*))
                                            (before parsing/lexer.mll(773):174009-174229
                                              (seq
                                                (after parsing/lexer.mll(773):174009-174029
                                                  (apply add_comment
                                                    (makeblock 0 s loc)))
                                                (before parsing/lexer.mll(774):174041-174229
                                                  (let
                                                    (lines' =
                                                       (switch* lines
                                                        case int 0:
                                                         (before parsing/lexer.mll(776):174107-174113
                                                           0a)
                                                        case int 1:
                                                         (before parsing/lexer.mll(777):174139-174145
                                                           0a)
                                                        case int 2:
                                                         (before parsing/lexer.mll(778):174173-174182
                                                           2a)))
                                                    (before parsing/lexer.mll(780):174206-174229
                                                      (after parsing/lexer.mll(780):174206-174229
                                                        (apply loop lines'
                                                          docs lexbuf))))))))
                                         default: (exit 37))
                                       with (37)
                                        (before parsing/lexer.mll(809):175333-175389
                                          (seq
                                            (after parsing/lexer.mll(809):175333-175374
                                              (apply attach lines docs
                                                (after parsing/lexer.mll(809):175351-175374
                                                  (apply
                                                    (field 9
                                                      (global Stdlib__lexing!))
                                                    lexbuf))))
                                            (before parsing/lexer.mll(810):175386-175389
                                              tok)))))))))
                           (before parsing/lexer.mll(812):175403-175429
                             (after parsing/lexer.mll(812):175403-175429
                               (apply loop 0a 0a lexbuf)))))))))))
         init =
           (function param
             (funct-body parsing/lexer.mll(814)<ghost>:175442-175614
               (before parsing/lexer.mll(815):175451-175614
                 (seq (setfield_imm 0 is_in_string 0a)
                   (before parsing/lexer.mll(816):175478-175614
                     (seq (setfield_ptr 0 comment_start_loc 0a)
                       (before parsing/lexer.mll(817):175507-175614
                         (seq (setfield_ptr 0 comment_list 0a)
                           (before parsing/lexer.mll(818):175531-175614
                             (let (*match* = (field 0 preprocessor))
                               (if *match*
                                 (let
                                   (*match* =a (field 0 *match*)
                                    init =a (field 0 *match*))
                                   (before parsing/lexer.mll(820):175607-175614
                                     (after parsing/lexer.mll(820):175607-175614
                                       (apply init 0a))))
                                 (before parsing/lexer.mll(819):175570-175572
                                   0a))))))))))))
         set_preprocessor =
           (function init preprocess
             (funct-body parsing/lexer.mll(822)<ghost>:175639-175730
               (before parsing/lexer.mll(823):175661-175730
                 (seq (setfield_imm 0 escaped_newlines 1a)
                   (before parsing/lexer.mll(824):175691-175730
                     (setfield_ptr 0 preprocessor
                       (makeblock 0 (makeblock 0 init preprocess)))))))))
        (pseudo _none_(0)<ghost>:-1--1
          (makeblock 0 init token skip_hash_bang Error in_comment in_string
            print_warnings handle_docstrings comments token_with_comments
            set_preprocessor))))))
